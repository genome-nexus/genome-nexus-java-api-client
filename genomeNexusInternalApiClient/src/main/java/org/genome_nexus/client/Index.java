/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Index
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class Index {
  public static final String SERIALIZED_NAME_CDNA = "cdna";
  @SerializedName(SERIALIZED_NAME_CDNA)
  private List<String> cdna;

  public static final String SERIALIZED_NAME_HGVSC = "hgvsc";
  @SerializedName(SERIALIZED_NAME_HGVSC)
  private List<String> hgvsc;

  public static final String SERIALIZED_NAME_HGVSP = "hgvsp";
  @SerializedName(SERIALIZED_NAME_HGVSP)
  private List<String> hgvsp;

  public static final String SERIALIZED_NAME_HGVSP_SHORT = "hgvspShort";
  @SerializedName(SERIALIZED_NAME_HGVSP_SHORT)
  private List<String> hgvspShort;

  public static final String SERIALIZED_NAME_HUGO_SYMBOL = "hugoSymbol";
  @SerializedName(SERIALIZED_NAME_HUGO_SYMBOL)
  private List<String> hugoSymbol;

  public static final String SERIALIZED_NAME_RSID = "rsid";
  @SerializedName(SERIALIZED_NAME_RSID)
  private List<String> rsid;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public Index() {
  }

  public Index cdna(List<String> cdna) {
    this.cdna = cdna;
    return this;
  }

  public Index addCdnaItem(String cdnaItem) {
    if (this.cdna == null) {
      this.cdna = new ArrayList<>();
    }
    this.cdna.add(cdnaItem);
    return this;
  }

   /**
   * Get cdna
   * @return cdna
  **/
  @javax.annotation.Nullable
  public List<String> getCdna() {
    return cdna;
  }

  public void setCdna(List<String> cdna) {
    this.cdna = cdna;
  }


  public Index hgvsc(List<String> hgvsc) {
    this.hgvsc = hgvsc;
    return this;
  }

  public Index addHgvscItem(String hgvscItem) {
    if (this.hgvsc == null) {
      this.hgvsc = new ArrayList<>();
    }
    this.hgvsc.add(hgvscItem);
    return this;
  }

   /**
   * Get hgvsc
   * @return hgvsc
  **/
  @javax.annotation.Nullable
  public List<String> getHgvsc() {
    return hgvsc;
  }

  public void setHgvsc(List<String> hgvsc) {
    this.hgvsc = hgvsc;
  }


  public Index hgvsp(List<String> hgvsp) {
    this.hgvsp = hgvsp;
    return this;
  }

  public Index addHgvspItem(String hgvspItem) {
    if (this.hgvsp == null) {
      this.hgvsp = new ArrayList<>();
    }
    this.hgvsp.add(hgvspItem);
    return this;
  }

   /**
   * Get hgvsp
   * @return hgvsp
  **/
  @javax.annotation.Nullable
  public List<String> getHgvsp() {
    return hgvsp;
  }

  public void setHgvsp(List<String> hgvsp) {
    this.hgvsp = hgvsp;
  }


  public Index hgvspShort(List<String> hgvspShort) {
    this.hgvspShort = hgvspShort;
    return this;
  }

  public Index addHgvspShortItem(String hgvspShortItem) {
    if (this.hgvspShort == null) {
      this.hgvspShort = new ArrayList<>();
    }
    this.hgvspShort.add(hgvspShortItem);
    return this;
  }

   /**
   * Get hgvspShort
   * @return hgvspShort
  **/
  @javax.annotation.Nullable
  public List<String> getHgvspShort() {
    return hgvspShort;
  }

  public void setHgvspShort(List<String> hgvspShort) {
    this.hgvspShort = hgvspShort;
  }


  public Index hugoSymbol(List<String> hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
    return this;
  }

  public Index addHugoSymbolItem(String hugoSymbolItem) {
    if (this.hugoSymbol == null) {
      this.hugoSymbol = new ArrayList<>();
    }
    this.hugoSymbol.add(hugoSymbolItem);
    return this;
  }

   /**
   * Get hugoSymbol
   * @return hugoSymbol
  **/
  @javax.annotation.Nullable
  public List<String> getHugoSymbol() {
    return hugoSymbol;
  }

  public void setHugoSymbol(List<String> hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
  }


  public Index rsid(List<String> rsid) {
    this.rsid = rsid;
    return this;
  }

  public Index addRsidItem(String rsidItem) {
    if (this.rsid == null) {
      this.rsid = new ArrayList<>();
    }
    this.rsid.add(rsidItem);
    return this;
  }

   /**
   * Get rsid
   * @return rsid
  **/
  @javax.annotation.Nullable
  public List<String> getRsid() {
    return rsid;
  }

  public void setRsid(List<String> rsid) {
    this.rsid = rsid;
  }


  public Index variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Get variant
   * @return variant
  **/
  @javax.annotation.Nullable
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Index index = (Index) o;
    return Objects.equals(this.cdna, index.cdna) &&
        Objects.equals(this.hgvsc, index.hgvsc) &&
        Objects.equals(this.hgvsp, index.hgvsp) &&
        Objects.equals(this.hgvspShort, index.hgvspShort) &&
        Objects.equals(this.hugoSymbol, index.hugoSymbol) &&
        Objects.equals(this.rsid, index.rsid) &&
        Objects.equals(this.variant, index.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdna, hgvsc, hgvsp, hgvspShort, hugoSymbol, rsid, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Index {\n");
    sb.append("    cdna: ").append(toIndentedString(cdna)).append("\n");
    sb.append("    hgvsc: ").append(toIndentedString(hgvsc)).append("\n");
    sb.append("    hgvsp: ").append(toIndentedString(hgvsp)).append("\n");
    sb.append("    hgvspShort: ").append(toIndentedString(hgvspShort)).append("\n");
    sb.append("    hugoSymbol: ").append(toIndentedString(hugoSymbol)).append("\n");
    sb.append("    rsid: ").append(toIndentedString(rsid)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cdna");
    openapiFields.add("hgvsc");
    openapiFields.add("hgvsp");
    openapiFields.add("hgvspShort");
    openapiFields.add("hugoSymbol");
    openapiFields.add("rsid");
    openapiFields.add("variant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Index
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Index.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Index is not found in the empty JSON string", Index.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Index.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Index` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cdna") != null && !jsonObj.get("cdna").isJsonNull() && !jsonObj.get("cdna").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cdna` to be an array in the JSON string but got `%s`", jsonObj.get("cdna").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hgvsc") != null && !jsonObj.get("hgvsc").isJsonNull() && !jsonObj.get("hgvsc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvsc` to be an array in the JSON string but got `%s`", jsonObj.get("hgvsc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hgvsp") != null && !jsonObj.get("hgvsp").isJsonNull() && !jsonObj.get("hgvsp").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvsp` to be an array in the JSON string but got `%s`", jsonObj.get("hgvsp").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hgvspShort") != null && !jsonObj.get("hgvspShort").isJsonNull() && !jsonObj.get("hgvspShort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvspShort` to be an array in the JSON string but got `%s`", jsonObj.get("hgvspShort").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hugoSymbol") != null && !jsonObj.get("hugoSymbol").isJsonNull() && !jsonObj.get("hugoSymbol").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoSymbol` to be an array in the JSON string but got `%s`", jsonObj.get("hugoSymbol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rsid") != null && !jsonObj.get("rsid").isJsonNull() && !jsonObj.get("rsid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rsid` to be an array in the JSON string but got `%s`", jsonObj.get("rsid").toString()));
      }
      if ((jsonObj.get("variant") != null && !jsonObj.get("variant").isJsonNull()) && !jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Index.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Index' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Index> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Index.class));

       return (TypeAdapter<T>) new TypeAdapter<Index>() {
           @Override
           public void write(JsonWriter out, Index value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Index read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Index given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Index
  * @throws IOException if the JSON string is invalid with respect to Index
  */
  public static Index fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Index.class);
  }

 /**
  * Convert an instance of Index to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

