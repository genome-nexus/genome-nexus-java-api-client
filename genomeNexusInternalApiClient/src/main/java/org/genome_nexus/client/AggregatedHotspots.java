/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.Hotspot;
import org.genome_nexus.client.ProteinLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * AggregatedHotspots
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class AggregatedHotspots {
  public static final String SERIALIZED_NAME_GENOMIC_LOCATION = "genomicLocation";
  @SerializedName(SERIALIZED_NAME_GENOMIC_LOCATION)
  private GenomicLocation genomicLocation;

  public static final String SERIALIZED_NAME_HOTSPOTS = "hotspots";
  @SerializedName(SERIALIZED_NAME_HOTSPOTS)
  private List<Hotspot> hotspots = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTEIN_LOCATION = "proteinLocation";
  @SerializedName(SERIALIZED_NAME_PROTEIN_LOCATION)
  private ProteinLocation proteinLocation;

  public static final String SERIALIZED_NAME_TRANSCRIPT_ID = "transcriptId";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_ID)
  private String transcriptId;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public AggregatedHotspots() {
  }

  public AggregatedHotspots genomicLocation(GenomicLocation genomicLocation) {
    this.genomicLocation = genomicLocation;
    return this;
  }

   /**
   * Get genomicLocation
   * @return genomicLocation
  **/
  @javax.annotation.Nonnull
  public GenomicLocation getGenomicLocation() {
    return genomicLocation;
  }

  public void setGenomicLocation(GenomicLocation genomicLocation) {
    this.genomicLocation = genomicLocation;
  }


  public AggregatedHotspots hotspots(List<Hotspot> hotspots) {
    this.hotspots = hotspots;
    return this;
  }

  public AggregatedHotspots addHotspotsItem(Hotspot hotspotsItem) {
    if (this.hotspots == null) {
      this.hotspots = new ArrayList<>();
    }
    this.hotspots.add(hotspotsItem);
    return this;
  }

   /**
   * Hotspots
   * @return hotspots
  **/
  @javax.annotation.Nonnull
  public List<Hotspot> getHotspots() {
    return hotspots;
  }

  public void setHotspots(List<Hotspot> hotspots) {
    this.hotspots = hotspots;
  }


  public AggregatedHotspots proteinLocation(ProteinLocation proteinLocation) {
    this.proteinLocation = proteinLocation;
    return this;
  }

   /**
   * Get proteinLocation
   * @return proteinLocation
  **/
  @javax.annotation.Nullable
  public ProteinLocation getProteinLocation() {
    return proteinLocation;
  }

  public void setProteinLocation(ProteinLocation proteinLocation) {
    this.proteinLocation = proteinLocation;
  }


  public AggregatedHotspots transcriptId(String transcriptId) {
    this.transcriptId = transcriptId;
    return this;
  }

   /**
   * Get transcriptId
   * @return transcriptId
  **/
  @javax.annotation.Nullable
  public String getTranscriptId() {
    return transcriptId;
  }

  public void setTranscriptId(String transcriptId) {
    this.transcriptId = transcriptId;
  }


  public AggregatedHotspots variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * HGVS notation
   * @return variant
  **/
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregatedHotspots aggregatedHotspots = (AggregatedHotspots) o;
    return Objects.equals(this.genomicLocation, aggregatedHotspots.genomicLocation) &&
        Objects.equals(this.hotspots, aggregatedHotspots.hotspots) &&
        Objects.equals(this.proteinLocation, aggregatedHotspots.proteinLocation) &&
        Objects.equals(this.transcriptId, aggregatedHotspots.transcriptId) &&
        Objects.equals(this.variant, aggregatedHotspots.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(genomicLocation, hotspots, proteinLocation, transcriptId, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregatedHotspots {\n");
    sb.append("    genomicLocation: ").append(toIndentedString(genomicLocation)).append("\n");
    sb.append("    hotspots: ").append(toIndentedString(hotspots)).append("\n");
    sb.append("    proteinLocation: ").append(toIndentedString(proteinLocation)).append("\n");
    sb.append("    transcriptId: ").append(toIndentedString(transcriptId)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("genomicLocation");
    openapiFields.add("hotspots");
    openapiFields.add("proteinLocation");
    openapiFields.add("transcriptId");
    openapiFields.add("variant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("genomicLocation");
    openapiRequiredFields.add("hotspots");
    openapiRequiredFields.add("variant");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AggregatedHotspots
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregatedHotspots.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregatedHotspots is not found in the empty JSON string", AggregatedHotspots.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregatedHotspots.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregatedHotspots` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AggregatedHotspots.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `genomicLocation`
      GenomicLocation.validateJsonElement(jsonObj.get("genomicLocation"));
      // ensure the json data is an array
      if (!jsonObj.get("hotspots").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hotspots` to be an array in the JSON string but got `%s`", jsonObj.get("hotspots").toString()));
      }

      JsonArray jsonArrayhotspots = jsonObj.getAsJsonArray("hotspots");
      // validate the required field `hotspots` (array)
      for (int i = 0; i < jsonArrayhotspots.size(); i++) {
        Hotspot.validateJsonElement(jsonArrayhotspots.get(i));
      };
      // validate the optional field `proteinLocation`
      if (jsonObj.get("proteinLocation") != null && !jsonObj.get("proteinLocation").isJsonNull()) {
        ProteinLocation.validateJsonElement(jsonObj.get("proteinLocation"));
      }
      if ((jsonObj.get("transcriptId") != null && !jsonObj.get("transcriptId").isJsonNull()) && !jsonObj.get("transcriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcriptId").toString()));
      }
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregatedHotspots.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregatedHotspots' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregatedHotspots> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregatedHotspots.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregatedHotspots>() {
           @Override
           public void write(JsonWriter out, AggregatedHotspots value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregatedHotspots read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregatedHotspots given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregatedHotspots
  * @throws IOException if the JSON string is invalid with respect to AggregatedHotspots
  */
  public static AggregatedHotspots fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregatedHotspots.class);
  }

 /**
  * Convert an instance of AggregatedHotspots to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

