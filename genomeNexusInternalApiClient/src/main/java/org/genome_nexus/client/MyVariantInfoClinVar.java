/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.Gene;
import org.genome_nexus.client.Hg19;
import org.genome_nexus.client.Hg38;
import org.genome_nexus.client.Hgvs;
import org.genome_nexus.client.Rcv;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * MyVariantInfoClinVar
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class MyVariantInfoClinVar {
  public static final String SERIALIZED_NAME_ALLELE_ID = "alleleId";
  @SerializedName(SERIALIZED_NAME_ALLELE_ID)
  private Integer alleleId;

  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private String alt;

  public static final String SERIALIZED_NAME_CHROM = "chrom";
  @SerializedName(SERIALIZED_NAME_CHROM)
  private String chrom;

  public static final String SERIALIZED_NAME_CYTOGENIC = "cytogenic";
  @SerializedName(SERIALIZED_NAME_CYTOGENIC)
  private String cytogenic;

  public static final String SERIALIZED_NAME_GENE = "gene";
  @SerializedName(SERIALIZED_NAME_GENE)
  private Gene gene;

  public static final String SERIALIZED_NAME_HG19 = "hg19";
  @SerializedName(SERIALIZED_NAME_HG19)
  private Hg19 hg19;

  public static final String SERIALIZED_NAME_HG38 = "hg38";
  @SerializedName(SERIALIZED_NAME_HG38)
  private Hg38 hg38;

  public static final String SERIALIZED_NAME_HGVS = "hgvs";
  @SerializedName(SERIALIZED_NAME_HGVS)
  private Hgvs hgvs;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_RCV = "rcv";
  @SerializedName(SERIALIZED_NAME_RCV)
  private List<Rcv> rcv;

  public static final String SERIALIZED_NAME_VARIANT_ID = "variantId";
  @SerializedName(SERIALIZED_NAME_VARIANT_ID)
  private Integer variantId;

  public MyVariantInfoClinVar() {
  }

  public MyVariantInfoClinVar alleleId(Integer alleleId) {
    this.alleleId = alleleId;
    return this;
  }

   /**
   * allele_id
   * @return alleleId
  **/
  @javax.annotation.Nullable
  public Integer getAlleleId() {
    return alleleId;
  }

  public void setAlleleId(Integer alleleId) {
    this.alleleId = alleleId;
  }


  public MyVariantInfoClinVar alt(String alt) {
    this.alt = alt;
    return this;
  }

   /**
   * alt
   * @return alt
  **/
  @javax.annotation.Nullable
  public String getAlt() {
    return alt;
  }

  public void setAlt(String alt) {
    this.alt = alt;
  }


  public MyVariantInfoClinVar chrom(String chrom) {
    this.chrom = chrom;
    return this;
  }

   /**
   * chrom
   * @return chrom
  **/
  @javax.annotation.Nullable
  public String getChrom() {
    return chrom;
  }

  public void setChrom(String chrom) {
    this.chrom = chrom;
  }


  public MyVariantInfoClinVar cytogenic(String cytogenic) {
    this.cytogenic = cytogenic;
    return this;
  }

   /**
   * cytogenic
   * @return cytogenic
  **/
  @javax.annotation.Nullable
  public String getCytogenic() {
    return cytogenic;
  }

  public void setCytogenic(String cytogenic) {
    this.cytogenic = cytogenic;
  }


  public MyVariantInfoClinVar gene(Gene gene) {
    this.gene = gene;
    return this;
  }

   /**
   * Get gene
   * @return gene
  **/
  @javax.annotation.Nullable
  public Gene getGene() {
    return gene;
  }

  public void setGene(Gene gene) {
    this.gene = gene;
  }


  public MyVariantInfoClinVar hg19(Hg19 hg19) {
    this.hg19 = hg19;
    return this;
  }

   /**
   * Get hg19
   * @return hg19
  **/
  @javax.annotation.Nullable
  public Hg19 getHg19() {
    return hg19;
  }

  public void setHg19(Hg19 hg19) {
    this.hg19 = hg19;
  }


  public MyVariantInfoClinVar hg38(Hg38 hg38) {
    this.hg38 = hg38;
    return this;
  }

   /**
   * Get hg38
   * @return hg38
  **/
  @javax.annotation.Nullable
  public Hg38 getHg38() {
    return hg38;
  }

  public void setHg38(Hg38 hg38) {
    this.hg38 = hg38;
  }


  public MyVariantInfoClinVar hgvs(Hgvs hgvs) {
    this.hgvs = hgvs;
    return this;
  }

   /**
   * Get hgvs
   * @return hgvs
  **/
  @javax.annotation.Nullable
  public Hgvs getHgvs() {
    return hgvs;
  }

  public void setHgvs(Hgvs hgvs) {
    this.hgvs = hgvs;
  }


  public MyVariantInfoClinVar license(String license) {
    this.license = license;
    return this;
  }

   /**
   * license
   * @return license
  **/
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public MyVariantInfoClinVar rcv(List<Rcv> rcv) {
    this.rcv = rcv;
    return this;
  }

  public MyVariantInfoClinVar addRcvItem(Rcv rcvItem) {
    if (this.rcv == null) {
      this.rcv = new ArrayList<>();
    }
    this.rcv.add(rcvItem);
    return this;
  }

   /**
   * Get rcv
   * @return rcv
  **/
  @javax.annotation.Nullable
  public List<Rcv> getRcv() {
    return rcv;
  }

  public void setRcv(List<Rcv> rcv) {
    this.rcv = rcv;
  }


  public MyVariantInfoClinVar variantId(Integer variantId) {
    this.variantId = variantId;
    return this;
  }

   /**
   * variant_id
   * @return variantId
  **/
  @javax.annotation.Nullable
  public Integer getVariantId() {
    return variantId;
  }

  public void setVariantId(Integer variantId) {
    this.variantId = variantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MyVariantInfoClinVar myVariantInfoClinVar = (MyVariantInfoClinVar) o;
    return Objects.equals(this.alleleId, myVariantInfoClinVar.alleleId) &&
        Objects.equals(this.alt, myVariantInfoClinVar.alt) &&
        Objects.equals(this.chrom, myVariantInfoClinVar.chrom) &&
        Objects.equals(this.cytogenic, myVariantInfoClinVar.cytogenic) &&
        Objects.equals(this.gene, myVariantInfoClinVar.gene) &&
        Objects.equals(this.hg19, myVariantInfoClinVar.hg19) &&
        Objects.equals(this.hg38, myVariantInfoClinVar.hg38) &&
        Objects.equals(this.hgvs, myVariantInfoClinVar.hgvs) &&
        Objects.equals(this.license, myVariantInfoClinVar.license) &&
        Objects.equals(this.rcv, myVariantInfoClinVar.rcv) &&
        Objects.equals(this.variantId, myVariantInfoClinVar.variantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alleleId, alt, chrom, cytogenic, gene, hg19, hg38, hgvs, license, rcv, variantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MyVariantInfoClinVar {\n");
    sb.append("    alleleId: ").append(toIndentedString(alleleId)).append("\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    chrom: ").append(toIndentedString(chrom)).append("\n");
    sb.append("    cytogenic: ").append(toIndentedString(cytogenic)).append("\n");
    sb.append("    gene: ").append(toIndentedString(gene)).append("\n");
    sb.append("    hg19: ").append(toIndentedString(hg19)).append("\n");
    sb.append("    hg38: ").append(toIndentedString(hg38)).append("\n");
    sb.append("    hgvs: ").append(toIndentedString(hgvs)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    rcv: ").append(toIndentedString(rcv)).append("\n");
    sb.append("    variantId: ").append(toIndentedString(variantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alleleId");
    openapiFields.add("alt");
    openapiFields.add("chrom");
    openapiFields.add("cytogenic");
    openapiFields.add("gene");
    openapiFields.add("hg19");
    openapiFields.add("hg38");
    openapiFields.add("hgvs");
    openapiFields.add("license");
    openapiFields.add("rcv");
    openapiFields.add("variantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MyVariantInfoClinVar
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MyVariantInfoClinVar.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MyVariantInfoClinVar is not found in the empty JSON string", MyVariantInfoClinVar.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MyVariantInfoClinVar.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MyVariantInfoClinVar` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull()) && !jsonObj.get("alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt").toString()));
      }
      if ((jsonObj.get("chrom") != null && !jsonObj.get("chrom").isJsonNull()) && !jsonObj.get("chrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chrom").toString()));
      }
      if ((jsonObj.get("cytogenic") != null && !jsonObj.get("cytogenic").isJsonNull()) && !jsonObj.get("cytogenic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cytogenic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cytogenic").toString()));
      }
      // validate the optional field `gene`
      if (jsonObj.get("gene") != null && !jsonObj.get("gene").isJsonNull()) {
        Gene.validateJsonElement(jsonObj.get("gene"));
      }
      // validate the optional field `hg19`
      if (jsonObj.get("hg19") != null && !jsonObj.get("hg19").isJsonNull()) {
        Hg19.validateJsonElement(jsonObj.get("hg19"));
      }
      // validate the optional field `hg38`
      if (jsonObj.get("hg38") != null && !jsonObj.get("hg38").isJsonNull()) {
        Hg38.validateJsonElement(jsonObj.get("hg38"));
      }
      // validate the optional field `hgvs`
      if (jsonObj.get("hgvs") != null && !jsonObj.get("hgvs").isJsonNull()) {
        Hgvs.validateJsonElement(jsonObj.get("hgvs"));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if (jsonObj.get("rcv") != null && !jsonObj.get("rcv").isJsonNull()) {
        JsonArray jsonArrayrcv = jsonObj.getAsJsonArray("rcv");
        if (jsonArrayrcv != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rcv").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rcv` to be an array in the JSON string but got `%s`", jsonObj.get("rcv").toString()));
          }

          // validate the optional field `rcv` (array)
          for (int i = 0; i < jsonArrayrcv.size(); i++) {
            Rcv.validateJsonElement(jsonArrayrcv.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MyVariantInfoClinVar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MyVariantInfoClinVar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MyVariantInfoClinVar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MyVariantInfoClinVar.class));

       return (TypeAdapter<T>) new TypeAdapter<MyVariantInfoClinVar>() {
           @Override
           public void write(JsonWriter out, MyVariantInfoClinVar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MyVariantInfoClinVar read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MyVariantInfoClinVar given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MyVariantInfoClinVar
  * @throws IOException if the JSON string is invalid with respect to MyVariantInfoClinVar
  */
  public static MyVariantInfoClinVar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MyVariantInfoClinVar.class);
  }

 /**
  * Convert an instance of MyVariantInfoClinVar to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

