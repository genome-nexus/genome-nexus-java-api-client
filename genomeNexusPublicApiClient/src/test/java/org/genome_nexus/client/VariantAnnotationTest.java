/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.ClinvarAnnotation;
import org.genome_nexus.client.ColocatedVariant;
import org.genome_nexus.client.HotspotAnnotation;
import org.genome_nexus.client.IntergenicConsequences;
import org.genome_nexus.client.MutationAssessorAnnotation;
import org.genome_nexus.client.MyVariantInfoAnnotation;
import org.genome_nexus.client.NucleotideContextAnnotation;
import org.genome_nexus.client.OncokbAnnotation;
import org.genome_nexus.client.PtmAnnotation;
import org.genome_nexus.client.SignalAnnotation;
import org.genome_nexus.client.TranscriptConsequence;
import org.genome_nexus.client.VariantAnnotationSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VariantAnnotation
 */
public class VariantAnnotationTest {
    private final VariantAnnotation model = new VariantAnnotation();

    /**
     * Model tests for VariantAnnotation
     */
    @Test
    public void testVariantAnnotation() {
        // TODO: test VariantAnnotation
    }

    /**
     * Test the property 'alleleString'
     */
    @Test
    public void alleleStringTest() {
        // TODO: test alleleString
    }

    /**
     * Test the property 'annotationJSON'
     */
    @Test
    public void annotationJSONTest() {
        // TODO: test annotationJSON
    }

    /**
     * Test the property 'annotationSummary'
     */
    @Test
    public void annotationSummaryTest() {
        // TODO: test annotationSummary
    }

    /**
     * Test the property 'assemblyName'
     */
    @Test
    public void assemblyNameTest() {
        // TODO: test assemblyName
    }

    /**
     * Test the property 'clinvar'
     */
    @Test
    public void clinvarTest() {
        // TODO: test clinvar
    }

    /**
     * Test the property 'colocatedVariants'
     */
    @Test
    public void colocatedVariantsTest() {
        // TODO: test colocatedVariants
    }

    /**
     * Test the property 'end'
     */
    @Test
    public void endTest() {
        // TODO: test end
    }

    /**
     * Test the property 'errorMessage'
     */
    @Test
    public void errorMessageTest() {
        // TODO: test errorMessage
    }

    /**
     * Test the property 'genomicLocationExplanation'
     */
    @Test
    public void genomicLocationExplanationTest() {
        // TODO: test genomicLocationExplanation
    }

    /**
     * Test the property 'hgvsg'
     */
    @Test
    public void hgvsgTest() {
        // TODO: test hgvsg
    }

    /**
     * Test the property 'hotspots'
     */
    @Test
    public void hotspotsTest() {
        // TODO: test hotspots
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'intergenicConsequences'
     */
    @Test
    public void intergenicConsequencesTest() {
        // TODO: test intergenicConsequences
    }

    /**
     * Test the property 'mostSevereConsequence'
     */
    @Test
    public void mostSevereConsequenceTest() {
        // TODO: test mostSevereConsequence
    }

    /**
     * Test the property 'mutationAssessor'
     */
    @Test
    public void mutationAssessorTest() {
        // TODO: test mutationAssessor
    }

    /**
     * Test the property 'myVariantInfo'
     */
    @Test
    public void myVariantInfoTest() {
        // TODO: test myVariantInfo
    }

    /**
     * Test the property 'nucleotideContext'
     */
    @Test
    public void nucleotideContextTest() {
        // TODO: test nucleotideContext
    }

    /**
     * Test the property 'oncokb'
     */
    @Test
    public void oncokbTest() {
        // TODO: test oncokb
    }

    /**
     * Test the property 'originalVariantQuery'
     */
    @Test
    public void originalVariantQueryTest() {
        // TODO: test originalVariantQuery
    }

    /**
     * Test the property 'ptms'
     */
    @Test
    public void ptmsTest() {
        // TODO: test ptms
    }

    /**
     * Test the property 'seqRegionName'
     */
    @Test
    public void seqRegionNameTest() {
        // TODO: test seqRegionName
    }

    /**
     * Test the property 'signalAnnotation'
     */
    @Test
    public void signalAnnotationTest() {
        // TODO: test signalAnnotation
    }

    /**
     * Test the property 'start'
     */
    @Test
    public void startTest() {
        // TODO: test start
    }

    /**
     * Test the property 'strand'
     */
    @Test
    public void strandTest() {
        // TODO: test strand
    }

    /**
     * Test the property 'successfullyAnnotated'
     */
    @Test
    public void successfullyAnnotatedTest() {
        // TODO: test successfullyAnnotated
    }

    /**
     * Test the property 'transcriptConsequences'
     */
    @Test
    public void transcriptConsequencesTest() {
        // TODO: test transcriptConsequences
    }

    /**
     * Test the property 'variant'
     */
    @Test
    public void variantTest() {
        // TODO: test variant
    }

}
