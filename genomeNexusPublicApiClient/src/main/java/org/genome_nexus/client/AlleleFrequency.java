/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * AlleleFrequency
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class AlleleFrequency {
  public static final String SERIALIZED_NAME_AF = "af";
  @SerializedName(SERIALIZED_NAME_AF)
  private Double af;

  public static final String SERIALIZED_NAME_AF_AFR = "af_afr";
  @SerializedName(SERIALIZED_NAME_AF_AFR)
  private Double afAfr;

  public static final String SERIALIZED_NAME_AF_AMR = "af_amr";
  @SerializedName(SERIALIZED_NAME_AF_AMR)
  private Double afAmr;

  public static final String SERIALIZED_NAME_AF_ASJ = "af_asj";
  @SerializedName(SERIALIZED_NAME_AF_ASJ)
  private Double afAsj;

  public static final String SERIALIZED_NAME_AF_EAS = "af_eas";
  @SerializedName(SERIALIZED_NAME_AF_EAS)
  private Double afEas;

  public static final String SERIALIZED_NAME_AF_FIN = "af_fin";
  @SerializedName(SERIALIZED_NAME_AF_FIN)
  private Double afFin;

  public static final String SERIALIZED_NAME_AF_NFE = "af_nfe";
  @SerializedName(SERIALIZED_NAME_AF_NFE)
  private Double afNfe;

  public static final String SERIALIZED_NAME_AF_OTH = "af_oth";
  @SerializedName(SERIALIZED_NAME_AF_OTH)
  private Double afOth;

  public static final String SERIALIZED_NAME_AF_SAS = "af_sas";
  @SerializedName(SERIALIZED_NAME_AF_SAS)
  private Double afSas;

  public AlleleFrequency() {
  }

  public AlleleFrequency af(Double af) {
    this.af = af;
    return this;
  }

   /**
   * Get af
   * @return af
  **/
  @javax.annotation.Nonnull
  public Double getAf() {
    return af;
  }

  public void setAf(Double af) {
    this.af = af;
  }


  public AlleleFrequency afAfr(Double afAfr) {
    this.afAfr = afAfr;
    return this;
  }

   /**
   * Get afAfr
   * @return afAfr
  **/
  @javax.annotation.Nonnull
  public Double getAfAfr() {
    return afAfr;
  }

  public void setAfAfr(Double afAfr) {
    this.afAfr = afAfr;
  }


  public AlleleFrequency afAmr(Double afAmr) {
    this.afAmr = afAmr;
    return this;
  }

   /**
   * Get afAmr
   * @return afAmr
  **/
  @javax.annotation.Nonnull
  public Double getAfAmr() {
    return afAmr;
  }

  public void setAfAmr(Double afAmr) {
    this.afAmr = afAmr;
  }


  public AlleleFrequency afAsj(Double afAsj) {
    this.afAsj = afAsj;
    return this;
  }

   /**
   * Get afAsj
   * @return afAsj
  **/
  @javax.annotation.Nonnull
  public Double getAfAsj() {
    return afAsj;
  }

  public void setAfAsj(Double afAsj) {
    this.afAsj = afAsj;
  }


  public AlleleFrequency afEas(Double afEas) {
    this.afEas = afEas;
    return this;
  }

   /**
   * Get afEas
   * @return afEas
  **/
  @javax.annotation.Nonnull
  public Double getAfEas() {
    return afEas;
  }

  public void setAfEas(Double afEas) {
    this.afEas = afEas;
  }


  public AlleleFrequency afFin(Double afFin) {
    this.afFin = afFin;
    return this;
  }

   /**
   * Get afFin
   * @return afFin
  **/
  @javax.annotation.Nonnull
  public Double getAfFin() {
    return afFin;
  }

  public void setAfFin(Double afFin) {
    this.afFin = afFin;
  }


  public AlleleFrequency afNfe(Double afNfe) {
    this.afNfe = afNfe;
    return this;
  }

   /**
   * Get afNfe
   * @return afNfe
  **/
  @javax.annotation.Nonnull
  public Double getAfNfe() {
    return afNfe;
  }

  public void setAfNfe(Double afNfe) {
    this.afNfe = afNfe;
  }


  public AlleleFrequency afOth(Double afOth) {
    this.afOth = afOth;
    return this;
  }

   /**
   * Get afOth
   * @return afOth
  **/
  @javax.annotation.Nonnull
  public Double getAfOth() {
    return afOth;
  }

  public void setAfOth(Double afOth) {
    this.afOth = afOth;
  }


  public AlleleFrequency afSas(Double afSas) {
    this.afSas = afSas;
    return this;
  }

   /**
   * Get afSas
   * @return afSas
  **/
  @javax.annotation.Nonnull
  public Double getAfSas() {
    return afSas;
  }

  public void setAfSas(Double afSas) {
    this.afSas = afSas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlleleFrequency alleleFrequency = (AlleleFrequency) o;
    return Objects.equals(this.af, alleleFrequency.af) &&
        Objects.equals(this.afAfr, alleleFrequency.afAfr) &&
        Objects.equals(this.afAmr, alleleFrequency.afAmr) &&
        Objects.equals(this.afAsj, alleleFrequency.afAsj) &&
        Objects.equals(this.afEas, alleleFrequency.afEas) &&
        Objects.equals(this.afFin, alleleFrequency.afFin) &&
        Objects.equals(this.afNfe, alleleFrequency.afNfe) &&
        Objects.equals(this.afOth, alleleFrequency.afOth) &&
        Objects.equals(this.afSas, alleleFrequency.afSas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(af, afAfr, afAmr, afAsj, afEas, afFin, afNfe, afOth, afSas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlleleFrequency {\n");
    sb.append("    af: ").append(toIndentedString(af)).append("\n");
    sb.append("    afAfr: ").append(toIndentedString(afAfr)).append("\n");
    sb.append("    afAmr: ").append(toIndentedString(afAmr)).append("\n");
    sb.append("    afAsj: ").append(toIndentedString(afAsj)).append("\n");
    sb.append("    afEas: ").append(toIndentedString(afEas)).append("\n");
    sb.append("    afFin: ").append(toIndentedString(afFin)).append("\n");
    sb.append("    afNfe: ").append(toIndentedString(afNfe)).append("\n");
    sb.append("    afOth: ").append(toIndentedString(afOth)).append("\n");
    sb.append("    afSas: ").append(toIndentedString(afSas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("af");
    openapiFields.add("af_afr");
    openapiFields.add("af_amr");
    openapiFields.add("af_asj");
    openapiFields.add("af_eas");
    openapiFields.add("af_fin");
    openapiFields.add("af_nfe");
    openapiFields.add("af_oth");
    openapiFields.add("af_sas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("af");
    openapiRequiredFields.add("af_afr");
    openapiRequiredFields.add("af_amr");
    openapiRequiredFields.add("af_asj");
    openapiRequiredFields.add("af_eas");
    openapiRequiredFields.add("af_fin");
    openapiRequiredFields.add("af_nfe");
    openapiRequiredFields.add("af_oth");
    openapiRequiredFields.add("af_sas");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AlleleFrequency
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlleleFrequency.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlleleFrequency is not found in the empty JSON string", AlleleFrequency.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlleleFrequency.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlleleFrequency` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlleleFrequency.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlleleFrequency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlleleFrequency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlleleFrequency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlleleFrequency.class));

       return (TypeAdapter<T>) new TypeAdapter<AlleleFrequency>() {
           @Override
           public void write(JsonWriter out, AlleleFrequency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlleleFrequency read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AlleleFrequency given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AlleleFrequency
  * @throws IOException if the JSON string is invalid with respect to AlleleFrequency
  */
  public static AlleleFrequency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlleleFrequency.class);
  }

 /**
  * Convert an instance of AlleleFrequency to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

