/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.CountByTumorType;
import org.genome_nexus.client.GeneralPopulationStats;
import org.genome_nexus.client.StatsByTumorType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SignalMutation
 */
public class SignalMutationTest {
    private final SignalMutation model = new SignalMutation();

    /**
     * Model tests for SignalMutation
     */
    @Test
    public void testSignalMutation() {
        // TODO: test SignalMutation
    }

    /**
     * Test the property 'biallelicCountsByTumorType'
     */
    @Test
    public void biallelicCountsByTumorTypeTest() {
        // TODO: test biallelicCountsByTumorType
    }

    /**
     * Test the property 'chromosome'
     */
    @Test
    public void chromosomeTest() {
        // TODO: test chromosome
    }

    /**
     * Test the property 'countsByTumorType'
     */
    @Test
    public void countsByTumorTypeTest() {
        // TODO: test countsByTumorType
    }

    /**
     * Test the property 'endPosition'
     */
    @Test
    public void endPositionTest() {
        // TODO: test endPosition
    }

    /**
     * Test the property 'generalPopulationStats'
     */
    @Test
    public void generalPopulationStatsTest() {
        // TODO: test generalPopulationStats
    }

    /**
     * Test the property 'hugoGeneSymbol'
     */
    @Test
    public void hugoGeneSymbolTest() {
        // TODO: test hugoGeneSymbol
    }

    /**
     * Test the property 'mskExperReview'
     */
    @Test
    public void mskExperReviewTest() {
        // TODO: test mskExperReview
    }

    /**
     * Test the property 'mutationStatus'
     */
    @Test
    public void mutationStatusTest() {
        // TODO: test mutationStatus
    }

    /**
     * Test the property 'overallNumberOfGermlineHomozygous'
     */
    @Test
    public void overallNumberOfGermlineHomozygousTest() {
        // TODO: test overallNumberOfGermlineHomozygous
    }

    /**
     * Test the property 'pathogenic'
     */
    @Test
    public void pathogenicTest() {
        // TODO: test pathogenic
    }

    /**
     * Test the property 'penetrance'
     */
    @Test
    public void penetranceTest() {
        // TODO: test penetrance
    }

    /**
     * Test the property 'qcPassCountsByTumorType'
     */
    @Test
    public void qcPassCountsByTumorTypeTest() {
        // TODO: test qcPassCountsByTumorType
    }

    /**
     * Test the property 'referenceAllele'
     */
    @Test
    public void referenceAlleleTest() {
        // TODO: test referenceAllele
    }

    /**
     * Test the property 'startPosition'
     */
    @Test
    public void startPositionTest() {
        // TODO: test startPosition
    }

    /**
     * Test the property 'statsByTumorType'
     */
    @Test
    public void statsByTumorTypeTest() {
        // TODO: test statsByTumorType
    }

    /**
     * Test the property 'variantAllele'
     */
    @Test
    public void variantAlleleTest() {
        // TODO: test variantAllele
    }

}
