/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.Alleles;
import org.genome_nexus.client.Hg19;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Dbsnp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class Dbsnp {
  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "_class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  private String propertyClass;

  public static final String SERIALIZED_NAME_ALLELE_ORIGIN = "alleleOrigin";
  @SerializedName(SERIALIZED_NAME_ALLELE_ORIGIN)
  private String alleleOrigin;

  public static final String SERIALIZED_NAME_ALLELES = "alleles";
  @SerializedName(SERIALIZED_NAME_ALLELES)
  private List<Alleles> alleles;

  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private String alt;

  public static final String SERIALIZED_NAME_CHROM = "chrom";
  @SerializedName(SERIALIZED_NAME_CHROM)
  private String chrom;

  public static final String SERIALIZED_NAME_DBSNP_BUILD = "dbsnpBuild";
  @SerializedName(SERIALIZED_NAME_DBSNP_BUILD)
  private Integer dbsnpBuild;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags;

  public static final String SERIALIZED_NAME_HG19 = "hg19";
  @SerializedName(SERIALIZED_NAME_HG19)
  private Hg19 hg19;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_RSID = "rsid";
  @SerializedName(SERIALIZED_NAME_RSID)
  private String rsid;

  public static final String SERIALIZED_NAME_VALIDATED = "validated";
  @SerializedName(SERIALIZED_NAME_VALIDATED)
  private Boolean validated;

  public static final String SERIALIZED_NAME_VAR_SUBTYPE = "varSubtype";
  @SerializedName(SERIALIZED_NAME_VAR_SUBTYPE)
  private String varSubtype;

  public static final String SERIALIZED_NAME_VARTYPE = "vartype";
  @SerializedName(SERIALIZED_NAME_VARTYPE)
  private String vartype;

  public Dbsnp() {
  }

  public Dbsnp propertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * class
   * @return propertyClass
  **/
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public Dbsnp alleleOrigin(String alleleOrigin) {
    this.alleleOrigin = alleleOrigin;
    return this;
  }

   /**
   * allele_origin
   * @return alleleOrigin
  **/
  @javax.annotation.Nullable
  public String getAlleleOrigin() {
    return alleleOrigin;
  }

  public void setAlleleOrigin(String alleleOrigin) {
    this.alleleOrigin = alleleOrigin;
  }


  public Dbsnp alleles(List<Alleles> alleles) {
    this.alleles = alleles;
    return this;
  }

  public Dbsnp addAllelesItem(Alleles allelesItem) {
    if (this.alleles == null) {
      this.alleles = new ArrayList<>();
    }
    this.alleles.add(allelesItem);
    return this;
  }

   /**
   * alleles
   * @return alleles
  **/
  @javax.annotation.Nullable
  public List<Alleles> getAlleles() {
    return alleles;
  }

  public void setAlleles(List<Alleles> alleles) {
    this.alleles = alleles;
  }


  public Dbsnp alt(String alt) {
    this.alt = alt;
    return this;
  }

   /**
   * alt
   * @return alt
  **/
  @javax.annotation.Nullable
  public String getAlt() {
    return alt;
  }

  public void setAlt(String alt) {
    this.alt = alt;
  }


  public Dbsnp chrom(String chrom) {
    this.chrom = chrom;
    return this;
  }

   /**
   * chrom
   * @return chrom
  **/
  @javax.annotation.Nullable
  public String getChrom() {
    return chrom;
  }

  public void setChrom(String chrom) {
    this.chrom = chrom;
  }


  public Dbsnp dbsnpBuild(Integer dbsnpBuild) {
    this.dbsnpBuild = dbsnpBuild;
    return this;
  }

   /**
   * dbsnp_build
   * @return dbsnpBuild
  **/
  @javax.annotation.Nullable
  public Integer getDbsnpBuild() {
    return dbsnpBuild;
  }

  public void setDbsnpBuild(Integer dbsnpBuild) {
    this.dbsnpBuild = dbsnpBuild;
  }


  public Dbsnp flags(List<String> flags) {
    this.flags = flags;
    return this;
  }

  public Dbsnp addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * flags
   * @return flags
  **/
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }

  public void setFlags(List<String> flags) {
    this.flags = flags;
  }


  public Dbsnp hg19(Hg19 hg19) {
    this.hg19 = hg19;
    return this;
  }

   /**
   * Get hg19
   * @return hg19
  **/
  @javax.annotation.Nullable
  public Hg19 getHg19() {
    return hg19;
  }

  public void setHg19(Hg19 hg19) {
    this.hg19 = hg19;
  }


  public Dbsnp license(String license) {
    this.license = license;
    return this;
  }

   /**
   * _license
   * @return license
  **/
  @javax.annotation.Nullable
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public Dbsnp ref(String ref) {
    this.ref = ref;
    return this;
  }

   /**
   * ref
   * @return ref
  **/
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }


  public Dbsnp rsid(String rsid) {
    this.rsid = rsid;
    return this;
  }

   /**
   * rsid
   * @return rsid
  **/
  @javax.annotation.Nullable
  public String getRsid() {
    return rsid;
  }

  public void setRsid(String rsid) {
    this.rsid = rsid;
  }


  public Dbsnp validated(Boolean validated) {
    this.validated = validated;
    return this;
  }

   /**
   * validated
   * @return validated
  **/
  @javax.annotation.Nullable
  public Boolean getValidated() {
    return validated;
  }

  public void setValidated(Boolean validated) {
    this.validated = validated;
  }


  public Dbsnp varSubtype(String varSubtype) {
    this.varSubtype = varSubtype;
    return this;
  }

   /**
   * var_subtype
   * @return varSubtype
  **/
  @javax.annotation.Nullable
  public String getVarSubtype() {
    return varSubtype;
  }

  public void setVarSubtype(String varSubtype) {
    this.varSubtype = varSubtype;
  }


  public Dbsnp vartype(String vartype) {
    this.vartype = vartype;
    return this;
  }

   /**
   * vartype
   * @return vartype
  **/
  @javax.annotation.Nullable
  public String getVartype() {
    return vartype;
  }

  public void setVartype(String vartype) {
    this.vartype = vartype;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dbsnp dbsnp = (Dbsnp) o;
    return Objects.equals(this.propertyClass, dbsnp.propertyClass) &&
        Objects.equals(this.alleleOrigin, dbsnp.alleleOrigin) &&
        Objects.equals(this.alleles, dbsnp.alleles) &&
        Objects.equals(this.alt, dbsnp.alt) &&
        Objects.equals(this.chrom, dbsnp.chrom) &&
        Objects.equals(this.dbsnpBuild, dbsnp.dbsnpBuild) &&
        Objects.equals(this.flags, dbsnp.flags) &&
        Objects.equals(this.hg19, dbsnp.hg19) &&
        Objects.equals(this.license, dbsnp.license) &&
        Objects.equals(this.ref, dbsnp.ref) &&
        Objects.equals(this.rsid, dbsnp.rsid) &&
        Objects.equals(this.validated, dbsnp.validated) &&
        Objects.equals(this.varSubtype, dbsnp.varSubtype) &&
        Objects.equals(this.vartype, dbsnp.vartype);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, alleleOrigin, alleles, alt, chrom, dbsnpBuild, flags, hg19, license, ref, rsid, validated, varSubtype, vartype);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dbsnp {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    alleleOrigin: ").append(toIndentedString(alleleOrigin)).append("\n");
    sb.append("    alleles: ").append(toIndentedString(alleles)).append("\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    chrom: ").append(toIndentedString(chrom)).append("\n");
    sb.append("    dbsnpBuild: ").append(toIndentedString(dbsnpBuild)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    hg19: ").append(toIndentedString(hg19)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    rsid: ").append(toIndentedString(rsid)).append("\n");
    sb.append("    validated: ").append(toIndentedString(validated)).append("\n");
    sb.append("    varSubtype: ").append(toIndentedString(varSubtype)).append("\n");
    sb.append("    vartype: ").append(toIndentedString(vartype)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_class");
    openapiFields.add("alleleOrigin");
    openapiFields.add("alleles");
    openapiFields.add("alt");
    openapiFields.add("chrom");
    openapiFields.add("dbsnpBuild");
    openapiFields.add("flags");
    openapiFields.add("hg19");
    openapiFields.add("license");
    openapiFields.add("ref");
    openapiFields.add("rsid");
    openapiFields.add("validated");
    openapiFields.add("varSubtype");
    openapiFields.add("vartype");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dbsnp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dbsnp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dbsnp is not found in the empty JSON string", Dbsnp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dbsnp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dbsnp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_class") != null && !jsonObj.get("_class").isJsonNull()) && !jsonObj.get("_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_class").toString()));
      }
      if ((jsonObj.get("alleleOrigin") != null && !jsonObj.get("alleleOrigin").isJsonNull()) && !jsonObj.get("alleleOrigin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alleleOrigin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alleleOrigin").toString()));
      }
      if (jsonObj.get("alleles") != null && !jsonObj.get("alleles").isJsonNull()) {
        JsonArray jsonArrayalleles = jsonObj.getAsJsonArray("alleles");
        if (jsonArrayalleles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alleles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alleles` to be an array in the JSON string but got `%s`", jsonObj.get("alleles").toString()));
          }

          // validate the optional field `alleles` (array)
          for (int i = 0; i < jsonArrayalleles.size(); i++) {
            Alleles.validateJsonElement(jsonArrayalleles.get(i));
          };
        }
      }
      if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull()) && !jsonObj.get("alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt").toString()));
      }
      if ((jsonObj.get("chrom") != null && !jsonObj.get("chrom").isJsonNull()) && !jsonObj.get("chrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chrom").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      // validate the optional field `hg19`
      if (jsonObj.get("hg19") != null && !jsonObj.get("hg19").isJsonNull()) {
        Hg19.validateJsonElement(jsonObj.get("hg19"));
      }
      if ((jsonObj.get("license") != null && !jsonObj.get("license").isJsonNull()) && !jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("rsid") != null && !jsonObj.get("rsid").isJsonNull()) && !jsonObj.get("rsid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rsid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rsid").toString()));
      }
      if ((jsonObj.get("varSubtype") != null && !jsonObj.get("varSubtype").isJsonNull()) && !jsonObj.get("varSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `varSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("varSubtype").toString()));
      }
      if ((jsonObj.get("vartype") != null && !jsonObj.get("vartype").isJsonNull()) && !jsonObj.get("vartype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vartype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vartype").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dbsnp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dbsnp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dbsnp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dbsnp.class));

       return (TypeAdapter<T>) new TypeAdapter<Dbsnp>() {
           @Override
           public void write(JsonWriter out, Dbsnp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dbsnp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dbsnp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dbsnp
  * @throws IOException if the JSON string is invalid with respect to Dbsnp
  */
  public static Dbsnp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dbsnp.class);
  }

 /**
  * Convert an instance of Dbsnp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

