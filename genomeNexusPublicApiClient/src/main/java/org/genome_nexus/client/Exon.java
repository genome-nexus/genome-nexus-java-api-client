/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Exon
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class Exon {
  public static final String SERIALIZED_NAME_EXON_ID = "exonId";
  @SerializedName(SERIALIZED_NAME_EXON_ID)
  private String exonId;

  public static final String SERIALIZED_NAME_EXON_START = "exonStart";
  @SerializedName(SERIALIZED_NAME_EXON_START)
  private Integer exonStart;

  public static final String SERIALIZED_NAME_EXON_END = "exonEnd";
  @SerializedName(SERIALIZED_NAME_EXON_END)
  private Integer exonEnd;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_STRAND = "strand";
  @SerializedName(SERIALIZED_NAME_STRAND)
  private Integer strand;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Exon() {
  }

  public Exon exonId(String exonId) {
    this.exonId = exonId;
    return this;
  }

   /**
   * Exon id
   * @return exonId
  **/
  @javax.annotation.Nonnull
  public String getExonId() {
    return exonId;
  }

  public void setExonId(String exonId) {
    this.exonId = exonId;
  }


  public Exon exonStart(Integer exonStart) {
    this.exonStart = exonStart;
    return this;
  }

   /**
   * Start position of exon
   * @return exonStart
  **/
  @javax.annotation.Nonnull
  public Integer getExonStart() {
    return exonStart;
  }

  public void setExonStart(Integer exonStart) {
    this.exonStart = exonStart;
  }


  public Exon exonEnd(Integer exonEnd) {
    this.exonEnd = exonEnd;
    return this;
  }

   /**
   * End position of exon
   * @return exonEnd
  **/
  @javax.annotation.Nonnull
  public Integer getExonEnd() {
    return exonEnd;
  }

  public void setExonEnd(Integer exonEnd) {
    this.exonEnd = exonEnd;
  }


  public Exon rank(Integer rank) {
    this.rank = rank;
    return this;
  }

   /**
   * Number of exon in transcript
   * @return rank
  **/
  @javax.annotation.Nonnull
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public Exon strand(Integer strand) {
    this.strand = strand;
    return this;
  }

   /**
   * Strand exon is on, -1 for - and 1 for +
   * @return strand
  **/
  @javax.annotation.Nonnull
  public Integer getStrand() {
    return strand;
  }

  public void setStrand(Integer strand) {
    this.strand = strand;
  }


  public Exon version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * Exon version
   * @return version
  **/
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Exon exon = (Exon) o;
    return Objects.equals(this.exonId, exon.exonId) &&
        Objects.equals(this.exonStart, exon.exonStart) &&
        Objects.equals(this.exonEnd, exon.exonEnd) &&
        Objects.equals(this.rank, exon.rank) &&
        Objects.equals(this.strand, exon.strand) &&
        Objects.equals(this.version, exon.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exonId, exonStart, exonEnd, rank, strand, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Exon {\n");
    sb.append("    exonId: ").append(toIndentedString(exonId)).append("\n");
    sb.append("    exonStart: ").append(toIndentedString(exonStart)).append("\n");
    sb.append("    exonEnd: ").append(toIndentedString(exonEnd)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    strand: ").append(toIndentedString(strand)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exonId");
    openapiFields.add("exonStart");
    openapiFields.add("exonEnd");
    openapiFields.add("rank");
    openapiFields.add("strand");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("exonId");
    openapiRequiredFields.add("exonStart");
    openapiRequiredFields.add("exonEnd");
    openapiRequiredFields.add("rank");
    openapiRequiredFields.add("strand");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Exon
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Exon.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Exon is not found in the empty JSON string", Exon.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Exon.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Exon` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Exon.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("exonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exonId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Exon.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Exon' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Exon> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Exon.class));

       return (TypeAdapter<T>) new TypeAdapter<Exon>() {
           @Override
           public void write(JsonWriter out, Exon value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Exon read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Exon given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Exon
  * @throws IOException if the JSON string is invalid with respect to Exon
  */
  public static Exon fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Exon.class);
  }

 /**
  * Convert an instance of Exon to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

