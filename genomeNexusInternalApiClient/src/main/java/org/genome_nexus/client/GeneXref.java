/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * GeneXref
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class GeneXref {
  public static final String SERIALIZED_NAME_DB_DISPLAY_NAME = "db_display_name";
  @SerializedName(SERIALIZED_NAME_DB_DISPLAY_NAME)
  private String dbDisplayName;

  public static final String SERIALIZED_NAME_DBNAME = "dbname";
  @SerializedName(SERIALIZED_NAME_DBNAME)
  private String dbname;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_ID = "display_id";
  @SerializedName(SERIALIZED_NAME_DISPLAY_ID)
  private String displayId;

  public static final String SERIALIZED_NAME_ENSEMBL_GENE_ID = "ensemblGeneId";
  @SerializedName(SERIALIZED_NAME_ENSEMBL_GENE_ID)
  private String ensemblGeneId;

  public static final String SERIALIZED_NAME_INFO_TEXT = "info_text";
  @SerializedName(SERIALIZED_NAME_INFO_TEXT)
  private String infoText;

  public static final String SERIALIZED_NAME_INFO_TYPES = "info_types";
  @SerializedName(SERIALIZED_NAME_INFO_TYPES)
  private String infoTypes;

  public static final String SERIALIZED_NAME_PRIMARY_ID = "primary_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ID)
  private String primaryId;

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<String> synonyms;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GeneXref() {
  }

  public GeneXref dbDisplayName(String dbDisplayName) {
    this.dbDisplayName = dbDisplayName;
    return this;
  }

   /**
   * Database display name
   * @return dbDisplayName
  **/
  @javax.annotation.Nonnull
  public String getDbDisplayName() {
    return dbDisplayName;
  }

  public void setDbDisplayName(String dbDisplayName) {
    this.dbDisplayName = dbDisplayName;
  }


  public GeneXref dbname(String dbname) {
    this.dbname = dbname;
    return this;
  }

   /**
   * Database name
   * @return dbname
  **/
  @javax.annotation.Nonnull
  public String getDbname() {
    return dbname;
  }

  public void setDbname(String dbname) {
    this.dbname = dbname;
  }


  public GeneXref description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GeneXref displayId(String displayId) {
    this.displayId = displayId;
    return this;
  }

   /**
   * Display id
   * @return displayId
  **/
  @javax.annotation.Nonnull
  public String getDisplayId() {
    return displayId;
  }

  public void setDisplayId(String displayId) {
    this.displayId = displayId;
  }


  public GeneXref ensemblGeneId(String ensemblGeneId) {
    this.ensemblGeneId = ensemblGeneId;
    return this;
  }

   /**
   * Get ensemblGeneId
   * @return ensemblGeneId
  **/
  @javax.annotation.Nullable
  public String getEnsemblGeneId() {
    return ensemblGeneId;
  }

  public void setEnsemblGeneId(String ensemblGeneId) {
    this.ensemblGeneId = ensemblGeneId;
  }


  public GeneXref infoText(String infoText) {
    this.infoText = infoText;
    return this;
  }

   /**
   * Database info text
   * @return infoText
  **/
  @javax.annotation.Nullable
  public String getInfoText() {
    return infoText;
  }

  public void setInfoText(String infoText) {
    this.infoText = infoText;
  }


  public GeneXref infoTypes(String infoTypes) {
    this.infoTypes = infoTypes;
    return this;
  }

   /**
   * Database info type
   * @return infoTypes
  **/
  @javax.annotation.Nullable
  public String getInfoTypes() {
    return infoTypes;
  }

  public void setInfoTypes(String infoTypes) {
    this.infoTypes = infoTypes;
  }


  public GeneXref primaryId(String primaryId) {
    this.primaryId = primaryId;
    return this;
  }

   /**
   * Primary id
   * @return primaryId
  **/
  @javax.annotation.Nonnull
  public String getPrimaryId() {
    return primaryId;
  }

  public void setPrimaryId(String primaryId) {
    this.primaryId = primaryId;
  }


  public GeneXref synonyms(List<String> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public GeneXref addSynonymsItem(String synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Synonyms
   * @return synonyms
  **/
  @javax.annotation.Nullable
  public List<String> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<String> synonyms) {
    this.synonyms = synonyms;
  }


  public GeneXref version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Version
   * @return version
  **/
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneXref geneXref = (GeneXref) o;
    return Objects.equals(this.dbDisplayName, geneXref.dbDisplayName) &&
        Objects.equals(this.dbname, geneXref.dbname) &&
        Objects.equals(this.description, geneXref.description) &&
        Objects.equals(this.displayId, geneXref.displayId) &&
        Objects.equals(this.ensemblGeneId, geneXref.ensemblGeneId) &&
        Objects.equals(this.infoText, geneXref.infoText) &&
        Objects.equals(this.infoTypes, geneXref.infoTypes) &&
        Objects.equals(this.primaryId, geneXref.primaryId) &&
        Objects.equals(this.synonyms, geneXref.synonyms) &&
        Objects.equals(this.version, geneXref.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dbDisplayName, dbname, description, displayId, ensemblGeneId, infoText, infoTypes, primaryId, synonyms, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneXref {\n");
    sb.append("    dbDisplayName: ").append(toIndentedString(dbDisplayName)).append("\n");
    sb.append("    dbname: ").append(toIndentedString(dbname)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayId: ").append(toIndentedString(displayId)).append("\n");
    sb.append("    ensemblGeneId: ").append(toIndentedString(ensemblGeneId)).append("\n");
    sb.append("    infoText: ").append(toIndentedString(infoText)).append("\n");
    sb.append("    infoTypes: ").append(toIndentedString(infoTypes)).append("\n");
    sb.append("    primaryId: ").append(toIndentedString(primaryId)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("db_display_name");
    openapiFields.add("dbname");
    openapiFields.add("description");
    openapiFields.add("display_id");
    openapiFields.add("ensemblGeneId");
    openapiFields.add("info_text");
    openapiFields.add("info_types");
    openapiFields.add("primary_id");
    openapiFields.add("synonyms");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("db_display_name");
    openapiRequiredFields.add("dbname");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("display_id");
    openapiRequiredFields.add("primary_id");
    openapiRequiredFields.add("version");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GeneXref
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeneXref.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneXref is not found in the empty JSON string", GeneXref.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeneXref.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeneXref` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GeneXref.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("db_display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_display_name").toString()));
      }
      if (!jsonObj.get("dbname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dbname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dbname").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("display_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_id").toString()));
      }
      if ((jsonObj.get("ensemblGeneId") != null && !jsonObj.get("ensemblGeneId").isJsonNull()) && !jsonObj.get("ensemblGeneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ensemblGeneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ensemblGeneId").toString()));
      }
      if ((jsonObj.get("info_text") != null && !jsonObj.get("info_text").isJsonNull()) && !jsonObj.get("info_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info_text").toString()));
      }
      if ((jsonObj.get("info_types") != null && !jsonObj.get("info_types").isJsonNull()) && !jsonObj.get("info_types").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `info_types` to be a primitive type in the JSON string but got `%s`", jsonObj.get("info_types").toString()));
      }
      if (!jsonObj.get("primary_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull() && !jsonObj.get("synonyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneXref.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneXref' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneXref> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneXref.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneXref>() {
           @Override
           public void write(JsonWriter out, GeneXref value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneXref read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GeneXref given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GeneXref
  * @throws IOException if the JSON string is invalid with respect to GeneXref
  */
  public static GeneXref fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneXref.class);
  }

 /**
  * Convert an instance of GeneXref to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

