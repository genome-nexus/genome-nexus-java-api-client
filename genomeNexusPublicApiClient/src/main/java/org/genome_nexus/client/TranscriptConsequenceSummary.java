/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.genome_nexus.client.IntegerRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * TranscriptConsequenceSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class TranscriptConsequenceSummary {
  public static final String SERIALIZED_NAME_AMINO_ACID_ALT = "aminoAcidAlt";
  @SerializedName(SERIALIZED_NAME_AMINO_ACID_ALT)
  private String aminoAcidAlt;

  public static final String SERIALIZED_NAME_AMINO_ACID_REF = "aminoAcidRef";
  @SerializedName(SERIALIZED_NAME_AMINO_ACID_REF)
  private String aminoAcidRef;

  public static final String SERIALIZED_NAME_AMINO_ACIDS = "aminoAcids";
  @SerializedName(SERIALIZED_NAME_AMINO_ACIDS)
  private String aminoAcids;

  public static final String SERIALIZED_NAME_CODON_CHANGE = "codonChange";
  @SerializedName(SERIALIZED_NAME_CODON_CHANGE)
  private String codonChange;

  public static final String SERIALIZED_NAME_CONSEQUENCE_TERMS = "consequenceTerms";
  @SerializedName(SERIALIZED_NAME_CONSEQUENCE_TERMS)
  private String consequenceTerms;

  public static final String SERIALIZED_NAME_ENTREZ_GENE_ID = "entrezGeneId";
  @SerializedName(SERIALIZED_NAME_ENTREZ_GENE_ID)
  private String entrezGeneId;

  public static final String SERIALIZED_NAME_EXON = "exon";
  @SerializedName(SERIALIZED_NAME_EXON)
  private String exon;

  public static final String SERIALIZED_NAME_HGVSC = "hgvsc";
  @SerializedName(SERIALIZED_NAME_HGVSC)
  private String hgvsc;

  public static final String SERIALIZED_NAME_HGVSP = "hgvsp";
  @SerializedName(SERIALIZED_NAME_HGVSP)
  private String hgvsp;

  public static final String SERIALIZED_NAME_HGVSP_SHORT = "hgvspShort";
  @SerializedName(SERIALIZED_NAME_HGVSP_SHORT)
  private String hgvspShort;

  public static final String SERIALIZED_NAME_HUGO_GENE_SYMBOL = "hugoGeneSymbol";
  @SerializedName(SERIALIZED_NAME_HUGO_GENE_SYMBOL)
  private String hugoGeneSymbol;

  public static final String SERIALIZED_NAME_IS_VUE = "isVue";
  @SerializedName(SERIALIZED_NAME_IS_VUE)
  private Boolean isVue;

  public static final String SERIALIZED_NAME_POLYPHEN_PREDICTION = "polyphenPrediction";
  @SerializedName(SERIALIZED_NAME_POLYPHEN_PREDICTION)
  private String polyphenPrediction;

  public static final String SERIALIZED_NAME_POLYPHEN_SCORE = "polyphenScore";
  @SerializedName(SERIALIZED_NAME_POLYPHEN_SCORE)
  private Double polyphenScore;

  public static final String SERIALIZED_NAME_PROTEIN_POSITION = "proteinPosition";
  @SerializedName(SERIALIZED_NAME_PROTEIN_POSITION)
  private IntegerRange proteinPosition;

  public static final String SERIALIZED_NAME_REF_SEQ = "refSeq";
  @SerializedName(SERIALIZED_NAME_REF_SEQ)
  private String refSeq;

  public static final String SERIALIZED_NAME_SIFT_PREDICTION = "siftPrediction";
  @SerializedName(SERIALIZED_NAME_SIFT_PREDICTION)
  private String siftPrediction;

  public static final String SERIALIZED_NAME_SIFT_SCORE = "siftScore";
  @SerializedName(SERIALIZED_NAME_SIFT_SCORE)
  private Double siftScore;

  public static final String SERIALIZED_NAME_TRANSCRIPT_ID = "transcriptId";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_ID)
  private String transcriptId;

  public static final String SERIALIZED_NAME_UNIPROT_ID = "uniprotId";
  @SerializedName(SERIALIZED_NAME_UNIPROT_ID)
  private String uniprotId;

  public static final String SERIALIZED_NAME_VARIANT_CLASSIFICATION = "variantClassification";
  @SerializedName(SERIALIZED_NAME_VARIANT_CLASSIFICATION)
  private String variantClassification;

  public TranscriptConsequenceSummary() {
  }

  public TranscriptConsequenceSummary aminoAcidAlt(String aminoAcidAlt) {
    this.aminoAcidAlt = aminoAcidAlt;
    return this;
  }

   /**
   * Alt Amino Acid
   * @return aminoAcidAlt
  **/
  @javax.annotation.Nullable
  public String getAminoAcidAlt() {
    return aminoAcidAlt;
  }

  public void setAminoAcidAlt(String aminoAcidAlt) {
    this.aminoAcidAlt = aminoAcidAlt;
  }


  public TranscriptConsequenceSummary aminoAcidRef(String aminoAcidRef) {
    this.aminoAcidRef = aminoAcidRef;
    return this;
  }

   /**
   * Reference Amino Acid
   * @return aminoAcidRef
  **/
  @javax.annotation.Nullable
  public String getAminoAcidRef() {
    return aminoAcidRef;
  }

  public void setAminoAcidRef(String aminoAcidRef) {
    this.aminoAcidRef = aminoAcidRef;
  }


  public TranscriptConsequenceSummary aminoAcids(String aminoAcids) {
    this.aminoAcids = aminoAcids;
    return this;
  }

   /**
   * Amino acids change
   * @return aminoAcids
  **/
  @javax.annotation.Nullable
  public String getAminoAcids() {
    return aminoAcids;
  }

  public void setAminoAcids(String aminoAcids) {
    this.aminoAcids = aminoAcids;
  }


  public TranscriptConsequenceSummary codonChange(String codonChange) {
    this.codonChange = codonChange;
    return this;
  }

   /**
   * Codon change
   * @return codonChange
  **/
  @javax.annotation.Nullable
  public String getCodonChange() {
    return codonChange;
  }

  public void setCodonChange(String codonChange) {
    this.codonChange = codonChange;
  }


  public TranscriptConsequenceSummary consequenceTerms(String consequenceTerms) {
    this.consequenceTerms = consequenceTerms;
    return this;
  }

   /**
   * Consequence terms (comma separated)
   * @return consequenceTerms
  **/
  @javax.annotation.Nullable
  public String getConsequenceTerms() {
    return consequenceTerms;
  }

  public void setConsequenceTerms(String consequenceTerms) {
    this.consequenceTerms = consequenceTerms;
  }


  public TranscriptConsequenceSummary entrezGeneId(String entrezGeneId) {
    this.entrezGeneId = entrezGeneId;
    return this;
  }

   /**
   * Entrez gene id
   * @return entrezGeneId
  **/
  @javax.annotation.Nullable
  public String getEntrezGeneId() {
    return entrezGeneId;
  }

  public void setEntrezGeneId(String entrezGeneId) {
    this.entrezGeneId = entrezGeneId;
  }


  public TranscriptConsequenceSummary exon(String exon) {
    this.exon = exon;
    return this;
  }

   /**
   * Get exon
   * @return exon
  **/
  @javax.annotation.Nullable
  public String getExon() {
    return exon;
  }

  public void setExon(String exon) {
    this.exon = exon;
  }


  public TranscriptConsequenceSummary hgvsc(String hgvsc) {
    this.hgvsc = hgvsc;
    return this;
  }

   /**
   * HGVSc
   * @return hgvsc
  **/
  @javax.annotation.Nullable
  public String getHgvsc() {
    return hgvsc;
  }

  public void setHgvsc(String hgvsc) {
    this.hgvsc = hgvsc;
  }


  public TranscriptConsequenceSummary hgvsp(String hgvsp) {
    this.hgvsp = hgvsp;
    return this;
  }

   /**
   * HGVSp
   * @return hgvsp
  **/
  @javax.annotation.Nullable
  public String getHgvsp() {
    return hgvsp;
  }

  public void setHgvsp(String hgvsp) {
    this.hgvsp = hgvsp;
  }


  public TranscriptConsequenceSummary hgvspShort(String hgvspShort) {
    this.hgvspShort = hgvspShort;
    return this;
  }

   /**
   * HGVSp short
   * @return hgvspShort
  **/
  @javax.annotation.Nullable
  public String getHgvspShort() {
    return hgvspShort;
  }

  public void setHgvspShort(String hgvspShort) {
    this.hgvspShort = hgvspShort;
  }


  public TranscriptConsequenceSummary hugoGeneSymbol(String hugoGeneSymbol) {
    this.hugoGeneSymbol = hugoGeneSymbol;
    return this;
  }

   /**
   * Hugo gene symbol
   * @return hugoGeneSymbol
  **/
  @javax.annotation.Nullable
  public String getHugoGeneSymbol() {
    return hugoGeneSymbol;
  }

  public void setHugoGeneSymbol(String hugoGeneSymbol) {
    this.hugoGeneSymbol = hugoGeneSymbol;
  }


  public TranscriptConsequenceSummary isVue(Boolean isVue) {
    this.isVue = isVue;
    return this;
  }

   /**
   * Get isVue
   * @return isVue
  **/
  @javax.annotation.Nullable
  public Boolean getIsVue() {
    return isVue;
  }

  public void setIsVue(Boolean isVue) {
    this.isVue = isVue;
  }


  public TranscriptConsequenceSummary polyphenPrediction(String polyphenPrediction) {
    this.polyphenPrediction = polyphenPrediction;
    return this;
  }

   /**
   * Polyphen Prediction
   * @return polyphenPrediction
  **/
  @javax.annotation.Nullable
  public String getPolyphenPrediction() {
    return polyphenPrediction;
  }

  public void setPolyphenPrediction(String polyphenPrediction) {
    this.polyphenPrediction = polyphenPrediction;
  }


  public TranscriptConsequenceSummary polyphenScore(Double polyphenScore) {
    this.polyphenScore = polyphenScore;
    return this;
  }

   /**
   * Polyphen Score
   * @return polyphenScore
  **/
  @javax.annotation.Nullable
  public Double getPolyphenScore() {
    return polyphenScore;
  }

  public void setPolyphenScore(Double polyphenScore) {
    this.polyphenScore = polyphenScore;
  }


  public TranscriptConsequenceSummary proteinPosition(IntegerRange proteinPosition) {
    this.proteinPosition = proteinPosition;
    return this;
  }

   /**
   * Get proteinPosition
   * @return proteinPosition
  **/
  @javax.annotation.Nullable
  public IntegerRange getProteinPosition() {
    return proteinPosition;
  }

  public void setProteinPosition(IntegerRange proteinPosition) {
    this.proteinPosition = proteinPosition;
  }


  public TranscriptConsequenceSummary refSeq(String refSeq) {
    this.refSeq = refSeq;
    return this;
  }

   /**
   * RefSeq id
   * @return refSeq
  **/
  @javax.annotation.Nullable
  public String getRefSeq() {
    return refSeq;
  }

  public void setRefSeq(String refSeq) {
    this.refSeq = refSeq;
  }


  public TranscriptConsequenceSummary siftPrediction(String siftPrediction) {
    this.siftPrediction = siftPrediction;
    return this;
  }

   /**
   * Sift Prediction
   * @return siftPrediction
  **/
  @javax.annotation.Nullable
  public String getSiftPrediction() {
    return siftPrediction;
  }

  public void setSiftPrediction(String siftPrediction) {
    this.siftPrediction = siftPrediction;
  }


  public TranscriptConsequenceSummary siftScore(Double siftScore) {
    this.siftScore = siftScore;
    return this;
  }

   /**
   * Sift Score
   * @return siftScore
  **/
  @javax.annotation.Nullable
  public Double getSiftScore() {
    return siftScore;
  }

  public void setSiftScore(Double siftScore) {
    this.siftScore = siftScore;
  }


  public TranscriptConsequenceSummary transcriptId(String transcriptId) {
    this.transcriptId = transcriptId;
    return this;
  }

   /**
   * Transcript id
   * @return transcriptId
  **/
  @javax.annotation.Nonnull
  public String getTranscriptId() {
    return transcriptId;
  }

  public void setTranscriptId(String transcriptId) {
    this.transcriptId = transcriptId;
  }


  public TranscriptConsequenceSummary uniprotId(String uniprotId) {
    this.uniprotId = uniprotId;
    return this;
  }

   /**
   * Uniprot ID
   * @return uniprotId
  **/
  @javax.annotation.Nullable
  public String getUniprotId() {
    return uniprotId;
  }

  public void setUniprotId(String uniprotId) {
    this.uniprotId = uniprotId;
  }


  public TranscriptConsequenceSummary variantClassification(String variantClassification) {
    this.variantClassification = variantClassification;
    return this;
  }

   /**
   * Variant classification
   * @return variantClassification
  **/
  @javax.annotation.Nullable
  public String getVariantClassification() {
    return variantClassification;
  }

  public void setVariantClassification(String variantClassification) {
    this.variantClassification = variantClassification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscriptConsequenceSummary transcriptConsequenceSummary = (TranscriptConsequenceSummary) o;
    return Objects.equals(this.aminoAcidAlt, transcriptConsequenceSummary.aminoAcidAlt) &&
        Objects.equals(this.aminoAcidRef, transcriptConsequenceSummary.aminoAcidRef) &&
        Objects.equals(this.aminoAcids, transcriptConsequenceSummary.aminoAcids) &&
        Objects.equals(this.codonChange, transcriptConsequenceSummary.codonChange) &&
        Objects.equals(this.consequenceTerms, transcriptConsequenceSummary.consequenceTerms) &&
        Objects.equals(this.entrezGeneId, transcriptConsequenceSummary.entrezGeneId) &&
        Objects.equals(this.exon, transcriptConsequenceSummary.exon) &&
        Objects.equals(this.hgvsc, transcriptConsequenceSummary.hgvsc) &&
        Objects.equals(this.hgvsp, transcriptConsequenceSummary.hgvsp) &&
        Objects.equals(this.hgvspShort, transcriptConsequenceSummary.hgvspShort) &&
        Objects.equals(this.hugoGeneSymbol, transcriptConsequenceSummary.hugoGeneSymbol) &&
        Objects.equals(this.isVue, transcriptConsequenceSummary.isVue) &&
        Objects.equals(this.polyphenPrediction, transcriptConsequenceSummary.polyphenPrediction) &&
        Objects.equals(this.polyphenScore, transcriptConsequenceSummary.polyphenScore) &&
        Objects.equals(this.proteinPosition, transcriptConsequenceSummary.proteinPosition) &&
        Objects.equals(this.refSeq, transcriptConsequenceSummary.refSeq) &&
        Objects.equals(this.siftPrediction, transcriptConsequenceSummary.siftPrediction) &&
        Objects.equals(this.siftScore, transcriptConsequenceSummary.siftScore) &&
        Objects.equals(this.transcriptId, transcriptConsequenceSummary.transcriptId) &&
        Objects.equals(this.uniprotId, transcriptConsequenceSummary.uniprotId) &&
        Objects.equals(this.variantClassification, transcriptConsequenceSummary.variantClassification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aminoAcidAlt, aminoAcidRef, aminoAcids, codonChange, consequenceTerms, entrezGeneId, exon, hgvsc, hgvsp, hgvspShort, hugoGeneSymbol, isVue, polyphenPrediction, polyphenScore, proteinPosition, refSeq, siftPrediction, siftScore, transcriptId, uniprotId, variantClassification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscriptConsequenceSummary {\n");
    sb.append("    aminoAcidAlt: ").append(toIndentedString(aminoAcidAlt)).append("\n");
    sb.append("    aminoAcidRef: ").append(toIndentedString(aminoAcidRef)).append("\n");
    sb.append("    aminoAcids: ").append(toIndentedString(aminoAcids)).append("\n");
    sb.append("    codonChange: ").append(toIndentedString(codonChange)).append("\n");
    sb.append("    consequenceTerms: ").append(toIndentedString(consequenceTerms)).append("\n");
    sb.append("    entrezGeneId: ").append(toIndentedString(entrezGeneId)).append("\n");
    sb.append("    exon: ").append(toIndentedString(exon)).append("\n");
    sb.append("    hgvsc: ").append(toIndentedString(hgvsc)).append("\n");
    sb.append("    hgvsp: ").append(toIndentedString(hgvsp)).append("\n");
    sb.append("    hgvspShort: ").append(toIndentedString(hgvspShort)).append("\n");
    sb.append("    hugoGeneSymbol: ").append(toIndentedString(hugoGeneSymbol)).append("\n");
    sb.append("    isVue: ").append(toIndentedString(isVue)).append("\n");
    sb.append("    polyphenPrediction: ").append(toIndentedString(polyphenPrediction)).append("\n");
    sb.append("    polyphenScore: ").append(toIndentedString(polyphenScore)).append("\n");
    sb.append("    proteinPosition: ").append(toIndentedString(proteinPosition)).append("\n");
    sb.append("    refSeq: ").append(toIndentedString(refSeq)).append("\n");
    sb.append("    siftPrediction: ").append(toIndentedString(siftPrediction)).append("\n");
    sb.append("    siftScore: ").append(toIndentedString(siftScore)).append("\n");
    sb.append("    transcriptId: ").append(toIndentedString(transcriptId)).append("\n");
    sb.append("    uniprotId: ").append(toIndentedString(uniprotId)).append("\n");
    sb.append("    variantClassification: ").append(toIndentedString(variantClassification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aminoAcidAlt");
    openapiFields.add("aminoAcidRef");
    openapiFields.add("aminoAcids");
    openapiFields.add("codonChange");
    openapiFields.add("consequenceTerms");
    openapiFields.add("entrezGeneId");
    openapiFields.add("exon");
    openapiFields.add("hgvsc");
    openapiFields.add("hgvsp");
    openapiFields.add("hgvspShort");
    openapiFields.add("hugoGeneSymbol");
    openapiFields.add("isVue");
    openapiFields.add("polyphenPrediction");
    openapiFields.add("polyphenScore");
    openapiFields.add("proteinPosition");
    openapiFields.add("refSeq");
    openapiFields.add("siftPrediction");
    openapiFields.add("siftScore");
    openapiFields.add("transcriptId");
    openapiFields.add("uniprotId");
    openapiFields.add("variantClassification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transcriptId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TranscriptConsequenceSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TranscriptConsequenceSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TranscriptConsequenceSummary is not found in the empty JSON string", TranscriptConsequenceSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TranscriptConsequenceSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TranscriptConsequenceSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TranscriptConsequenceSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aminoAcidAlt") != null && !jsonObj.get("aminoAcidAlt").isJsonNull()) && !jsonObj.get("aminoAcidAlt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aminoAcidAlt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aminoAcidAlt").toString()));
      }
      if ((jsonObj.get("aminoAcidRef") != null && !jsonObj.get("aminoAcidRef").isJsonNull()) && !jsonObj.get("aminoAcidRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aminoAcidRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aminoAcidRef").toString()));
      }
      if ((jsonObj.get("aminoAcids") != null && !jsonObj.get("aminoAcids").isJsonNull()) && !jsonObj.get("aminoAcids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aminoAcids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aminoAcids").toString()));
      }
      if ((jsonObj.get("codonChange") != null && !jsonObj.get("codonChange").isJsonNull()) && !jsonObj.get("codonChange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codonChange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codonChange").toString()));
      }
      if ((jsonObj.get("consequenceTerms") != null && !jsonObj.get("consequenceTerms").isJsonNull()) && !jsonObj.get("consequenceTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consequenceTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consequenceTerms").toString()));
      }
      if ((jsonObj.get("entrezGeneId") != null && !jsonObj.get("entrezGeneId").isJsonNull()) && !jsonObj.get("entrezGeneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrezGeneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entrezGeneId").toString()));
      }
      if ((jsonObj.get("exon") != null && !jsonObj.get("exon").isJsonNull()) && !jsonObj.get("exon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exon").toString()));
      }
      if ((jsonObj.get("hgvsc") != null && !jsonObj.get("hgvsc").isJsonNull()) && !jsonObj.get("hgvsc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvsc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hgvsc").toString()));
      }
      if ((jsonObj.get("hgvsp") != null && !jsonObj.get("hgvsp").isJsonNull()) && !jsonObj.get("hgvsp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvsp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hgvsp").toString()));
      }
      if ((jsonObj.get("hgvspShort") != null && !jsonObj.get("hgvspShort").isJsonNull()) && !jsonObj.get("hgvspShort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvspShort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hgvspShort").toString()));
      }
      if ((jsonObj.get("hugoGeneSymbol") != null && !jsonObj.get("hugoGeneSymbol").isJsonNull()) && !jsonObj.get("hugoGeneSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoGeneSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hugoGeneSymbol").toString()));
      }
      if ((jsonObj.get("polyphenPrediction") != null && !jsonObj.get("polyphenPrediction").isJsonNull()) && !jsonObj.get("polyphenPrediction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `polyphenPrediction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("polyphenPrediction").toString()));
      }
      // validate the optional field `proteinPosition`
      if (jsonObj.get("proteinPosition") != null && !jsonObj.get("proteinPosition").isJsonNull()) {
        IntegerRange.validateJsonElement(jsonObj.get("proteinPosition"));
      }
      if ((jsonObj.get("refSeq") != null && !jsonObj.get("refSeq").isJsonNull()) && !jsonObj.get("refSeq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refSeq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refSeq").toString()));
      }
      if ((jsonObj.get("siftPrediction") != null && !jsonObj.get("siftPrediction").isJsonNull()) && !jsonObj.get("siftPrediction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siftPrediction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siftPrediction").toString()));
      }
      if (!jsonObj.get("transcriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcriptId").toString()));
      }
      if ((jsonObj.get("uniprotId") != null && !jsonObj.get("uniprotId").isJsonNull()) && !jsonObj.get("uniprotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniprotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniprotId").toString()));
      }
      if ((jsonObj.get("variantClassification") != null && !jsonObj.get("variantClassification").isJsonNull()) && !jsonObj.get("variantClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantClassification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TranscriptConsequenceSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TranscriptConsequenceSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TranscriptConsequenceSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TranscriptConsequenceSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TranscriptConsequenceSummary>() {
           @Override
           public void write(JsonWriter out, TranscriptConsequenceSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TranscriptConsequenceSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TranscriptConsequenceSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TranscriptConsequenceSummary
  * @throws IOException if the JSON string is invalid with respect to TranscriptConsequenceSummary
  */
  public static TranscriptConsequenceSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TranscriptConsequenceSummary.class);
  }

 /**
  * Convert an instance of TranscriptConsequenceSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

