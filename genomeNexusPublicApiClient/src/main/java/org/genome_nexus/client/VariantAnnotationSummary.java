/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.TranscriptConsequenceSummary;
import org.genome_nexus.client.Vues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * VariantAnnotationSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class VariantAnnotationSummary {
  public static final String SERIALIZED_NAME_ASSEMBLY_NAME = "assemblyName";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_NAME)
  private String assemblyName;

  public static final String SERIALIZED_NAME_CANONICAL_TRANSCRIPT_ID = "canonicalTranscriptId";
  @SerializedName(SERIALIZED_NAME_CANONICAL_TRANSCRIPT_ID)
  private String canonicalTranscriptId;

  public static final String SERIALIZED_NAME_GENOMIC_LOCATION = "genomicLocation";
  @SerializedName(SERIALIZED_NAME_GENOMIC_LOCATION)
  private GenomicLocation genomicLocation;

  public static final String SERIALIZED_NAME_STRAND_SIGN = "strandSign";
  @SerializedName(SERIALIZED_NAME_STRAND_SIGN)
  private String strandSign;

  public static final String SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCE_SUMMARIES = "transcriptConsequenceSummaries";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCE_SUMMARIES)
  private List<TranscriptConsequenceSummary> transcriptConsequenceSummaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCE_SUMMARY = "transcriptConsequenceSummary";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCE_SUMMARY)
  private TranscriptConsequenceSummary transcriptConsequenceSummary;

  public static final String SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCES = "transcriptConsequences";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCES)
  private List<TranscriptConsequenceSummary> transcriptConsequences = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public static final String SERIALIZED_NAME_VARIANT_TYPE = "variantType";
  @SerializedName(SERIALIZED_NAME_VARIANT_TYPE)
  private String variantType;

  public static final String SERIALIZED_NAME_VUES = "vues";
  @SerializedName(SERIALIZED_NAME_VUES)
  private Vues vues;

  public VariantAnnotationSummary() {
  }

  public VariantAnnotationSummary assemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
    return this;
  }

   /**
   * Assembly name
   * @return assemblyName
  **/
  @javax.annotation.Nullable
  public String getAssemblyName() {
    return assemblyName;
  }

  public void setAssemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
  }


  public VariantAnnotationSummary canonicalTranscriptId(String canonicalTranscriptId) {
    this.canonicalTranscriptId = canonicalTranscriptId;
    return this;
  }

   /**
   * Canonical transcript id
   * @return canonicalTranscriptId
  **/
  @javax.annotation.Nullable
  public String getCanonicalTranscriptId() {
    return canonicalTranscriptId;
  }

  public void setCanonicalTranscriptId(String canonicalTranscriptId) {
    this.canonicalTranscriptId = canonicalTranscriptId;
  }


  public VariantAnnotationSummary genomicLocation(GenomicLocation genomicLocation) {
    this.genomicLocation = genomicLocation;
    return this;
  }

   /**
   * Get genomicLocation
   * @return genomicLocation
  **/
  @javax.annotation.Nullable
  public GenomicLocation getGenomicLocation() {
    return genomicLocation;
  }

  public void setGenomicLocation(GenomicLocation genomicLocation) {
    this.genomicLocation = genomicLocation;
  }


  public VariantAnnotationSummary strandSign(String strandSign) {
    this.strandSign = strandSign;
    return this;
  }

   /**
   * Strand (- or +)
   * @return strandSign
  **/
  @javax.annotation.Nullable
  public String getStrandSign() {
    return strandSign;
  }

  public void setStrandSign(String strandSign) {
    this.strandSign = strandSign;
  }


  public VariantAnnotationSummary transcriptConsequenceSummaries(List<TranscriptConsequenceSummary> transcriptConsequenceSummaries) {
    this.transcriptConsequenceSummaries = transcriptConsequenceSummaries;
    return this;
  }

  public VariantAnnotationSummary addTranscriptConsequenceSummariesItem(TranscriptConsequenceSummary transcriptConsequenceSummariesItem) {
    if (this.transcriptConsequenceSummaries == null) {
      this.transcriptConsequenceSummaries = new ArrayList<>();
    }
    this.transcriptConsequenceSummaries.add(transcriptConsequenceSummariesItem);
    return this;
  }

   /**
   * All transcript consequence summaries
   * @return transcriptConsequenceSummaries
  **/
  @javax.annotation.Nonnull
  public List<TranscriptConsequenceSummary> getTranscriptConsequenceSummaries() {
    return transcriptConsequenceSummaries;
  }

  public void setTranscriptConsequenceSummaries(List<TranscriptConsequenceSummary> transcriptConsequenceSummaries) {
    this.transcriptConsequenceSummaries = transcriptConsequenceSummaries;
  }


  public VariantAnnotationSummary transcriptConsequenceSummary(TranscriptConsequenceSummary transcriptConsequenceSummary) {
    this.transcriptConsequenceSummary = transcriptConsequenceSummary;
    return this;
  }

   /**
   * Get transcriptConsequenceSummary
   * @return transcriptConsequenceSummary
  **/
  @javax.annotation.Nonnull
  public TranscriptConsequenceSummary getTranscriptConsequenceSummary() {
    return transcriptConsequenceSummary;
  }

  public void setTranscriptConsequenceSummary(TranscriptConsequenceSummary transcriptConsequenceSummary) {
    this.transcriptConsequenceSummary = transcriptConsequenceSummary;
  }


  public VariantAnnotationSummary transcriptConsequences(List<TranscriptConsequenceSummary> transcriptConsequences) {
    this.transcriptConsequences = transcriptConsequences;
    return this;
  }

  public VariantAnnotationSummary addTranscriptConsequencesItem(TranscriptConsequenceSummary transcriptConsequencesItem) {
    if (this.transcriptConsequences == null) {
      this.transcriptConsequences = new ArrayList<>();
    }
    this.transcriptConsequences.add(transcriptConsequencesItem);
    return this;
  }

   /**
   * (Deprecated) Transcript consequence summaries (list of one when using annotation/, multiple when using annotation/summary/
   * @return transcriptConsequences
  **/
  @javax.annotation.Nonnull
  public List<TranscriptConsequenceSummary> getTranscriptConsequences() {
    return transcriptConsequences;
  }

  public void setTranscriptConsequences(List<TranscriptConsequenceSummary> transcriptConsequences) {
    this.transcriptConsequences = transcriptConsequences;
  }


  public VariantAnnotationSummary variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Variant key
   * @return variant
  **/
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }


  public VariantAnnotationSummary variantType(String variantType) {
    this.variantType = variantType;
    return this;
  }

   /**
   * Variant type
   * @return variantType
  **/
  @javax.annotation.Nullable
  public String getVariantType() {
    return variantType;
  }

  public void setVariantType(String variantType) {
    this.variantType = variantType;
  }


  public VariantAnnotationSummary vues(Vues vues) {
    this.vues = vues;
    return this;
  }

   /**
   * Get vues
   * @return vues
  **/
  @javax.annotation.Nullable
  public Vues getVues() {
    return vues;
  }

  public void setVues(Vues vues) {
    this.vues = vues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariantAnnotationSummary variantAnnotationSummary = (VariantAnnotationSummary) o;
    return Objects.equals(this.assemblyName, variantAnnotationSummary.assemblyName) &&
        Objects.equals(this.canonicalTranscriptId, variantAnnotationSummary.canonicalTranscriptId) &&
        Objects.equals(this.genomicLocation, variantAnnotationSummary.genomicLocation) &&
        Objects.equals(this.strandSign, variantAnnotationSummary.strandSign) &&
        Objects.equals(this.transcriptConsequenceSummaries, variantAnnotationSummary.transcriptConsequenceSummaries) &&
        Objects.equals(this.transcriptConsequenceSummary, variantAnnotationSummary.transcriptConsequenceSummary) &&
        Objects.equals(this.transcriptConsequences, variantAnnotationSummary.transcriptConsequences) &&
        Objects.equals(this.variant, variantAnnotationSummary.variant) &&
        Objects.equals(this.variantType, variantAnnotationSummary.variantType) &&
        Objects.equals(this.vues, variantAnnotationSummary.vues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assemblyName, canonicalTranscriptId, genomicLocation, strandSign, transcriptConsequenceSummaries, transcriptConsequenceSummary, transcriptConsequences, variant, variantType, vues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariantAnnotationSummary {\n");
    sb.append("    assemblyName: ").append(toIndentedString(assemblyName)).append("\n");
    sb.append("    canonicalTranscriptId: ").append(toIndentedString(canonicalTranscriptId)).append("\n");
    sb.append("    genomicLocation: ").append(toIndentedString(genomicLocation)).append("\n");
    sb.append("    strandSign: ").append(toIndentedString(strandSign)).append("\n");
    sb.append("    transcriptConsequenceSummaries: ").append(toIndentedString(transcriptConsequenceSummaries)).append("\n");
    sb.append("    transcriptConsequenceSummary: ").append(toIndentedString(transcriptConsequenceSummary)).append("\n");
    sb.append("    transcriptConsequences: ").append(toIndentedString(transcriptConsequences)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    variantType: ").append(toIndentedString(variantType)).append("\n");
    sb.append("    vues: ").append(toIndentedString(vues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assemblyName");
    openapiFields.add("canonicalTranscriptId");
    openapiFields.add("genomicLocation");
    openapiFields.add("strandSign");
    openapiFields.add("transcriptConsequenceSummaries");
    openapiFields.add("transcriptConsequenceSummary");
    openapiFields.add("transcriptConsequences");
    openapiFields.add("variant");
    openapiFields.add("variantType");
    openapiFields.add("vues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transcriptConsequenceSummaries");
    openapiRequiredFields.add("transcriptConsequenceSummary");
    openapiRequiredFields.add("transcriptConsequences");
    openapiRequiredFields.add("variant");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VariantAnnotationSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VariantAnnotationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VariantAnnotationSummary is not found in the empty JSON string", VariantAnnotationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VariantAnnotationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VariantAnnotationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VariantAnnotationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assemblyName") != null && !jsonObj.get("assemblyName").isJsonNull()) && !jsonObj.get("assemblyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assemblyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assemblyName").toString()));
      }
      if ((jsonObj.get("canonicalTranscriptId") != null && !jsonObj.get("canonicalTranscriptId").isJsonNull()) && !jsonObj.get("canonicalTranscriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalTranscriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalTranscriptId").toString()));
      }
      // validate the optional field `genomicLocation`
      if (jsonObj.get("genomicLocation") != null && !jsonObj.get("genomicLocation").isJsonNull()) {
        GenomicLocation.validateJsonElement(jsonObj.get("genomicLocation"));
      }
      if ((jsonObj.get("strandSign") != null && !jsonObj.get("strandSign").isJsonNull()) && !jsonObj.get("strandSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `strandSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("strandSign").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("transcriptConsequenceSummaries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptConsequenceSummaries` to be an array in the JSON string but got `%s`", jsonObj.get("transcriptConsequenceSummaries").toString()));
      }

      JsonArray jsonArraytranscriptConsequenceSummaries = jsonObj.getAsJsonArray("transcriptConsequenceSummaries");
      // validate the required field `transcriptConsequenceSummaries` (array)
      for (int i = 0; i < jsonArraytranscriptConsequenceSummaries.size(); i++) {
        TranscriptConsequenceSummary.validateJsonElement(jsonArraytranscriptConsequenceSummaries.get(i));
      };
      // validate the required field `transcriptConsequenceSummary`
      TranscriptConsequenceSummary.validateJsonElement(jsonObj.get("transcriptConsequenceSummary"));
      // ensure the json data is an array
      if (!jsonObj.get("transcriptConsequences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptConsequences` to be an array in the JSON string but got `%s`", jsonObj.get("transcriptConsequences").toString()));
      }

      JsonArray jsonArraytranscriptConsequences = jsonObj.getAsJsonArray("transcriptConsequences");
      // validate the required field `transcriptConsequences` (array)
      for (int i = 0; i < jsonArraytranscriptConsequences.size(); i++) {
        TranscriptConsequenceSummary.validateJsonElement(jsonArraytranscriptConsequences.get(i));
      };
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      if ((jsonObj.get("variantType") != null && !jsonObj.get("variantType").isJsonNull()) && !jsonObj.get("variantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantType").toString()));
      }
      // validate the optional field `vues`
      if (jsonObj.get("vues") != null && !jsonObj.get("vues").isJsonNull()) {
        Vues.validateJsonElement(jsonObj.get("vues"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VariantAnnotationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VariantAnnotationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VariantAnnotationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VariantAnnotationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<VariantAnnotationSummary>() {
           @Override
           public void write(JsonWriter out, VariantAnnotationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VariantAnnotationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VariantAnnotationSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VariantAnnotationSummary
  * @throws IOException if the JSON string is invalid with respect to VariantAnnotationSummary
  */
  public static VariantAnnotationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VariantAnnotationSummary.class);
  }

 /**
  * Convert an instance of VariantAnnotationSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

