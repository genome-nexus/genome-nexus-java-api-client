/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * EnsemblGene
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class EnsemblGene {
  public static final String SERIALIZED_NAME_GENE_ID = "geneId";
  @SerializedName(SERIALIZED_NAME_GENE_ID)
  private String geneId;

  public static final String SERIALIZED_NAME_HUGO_SYMBOL = "hugoSymbol";
  @SerializedName(SERIALIZED_NAME_HUGO_SYMBOL)
  private String hugoSymbol;

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<String> synonyms;

  public static final String SERIALIZED_NAME_PREVIOUS_SYMBOLS = "previousSymbols";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_SYMBOLS)
  private List<String> previousSymbols;

  public static final String SERIALIZED_NAME_ENTREZ_GENE_ID = "entrezGeneId";
  @SerializedName(SERIALIZED_NAME_ENTREZ_GENE_ID)
  private String entrezGeneId;

  public EnsemblGene() {
  }

  public EnsemblGene geneId(String geneId) {
    this.geneId = geneId;
    return this;
  }

   /**
   * Ensembl gene id
   * @return geneId
  **/
  @javax.annotation.Nonnull
  public String getGeneId() {
    return geneId;
  }

  public void setGeneId(String geneId) {
    this.geneId = geneId;
  }


  public EnsemblGene hugoSymbol(String hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
    return this;
  }

   /**
   * Approved Hugo symbol
   * @return hugoSymbol
  **/
  @javax.annotation.Nonnull
  public String getHugoSymbol() {
    return hugoSymbol;
  }

  public void setHugoSymbol(String hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
  }


  public EnsemblGene synonyms(List<String> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public EnsemblGene addSynonymsItem(String synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Hugo symbol synonyms
   * @return synonyms
  **/
  @javax.annotation.Nullable
  public List<String> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<String> synonyms) {
    this.synonyms = synonyms;
  }


  public EnsemblGene previousSymbols(List<String> previousSymbols) {
    this.previousSymbols = previousSymbols;
    return this;
  }

  public EnsemblGene addPreviousSymbolsItem(String previousSymbolsItem) {
    if (this.previousSymbols == null) {
      this.previousSymbols = new ArrayList<>();
    }
    this.previousSymbols.add(previousSymbolsItem);
    return this;
  }

   /**
   * Previous Hugo symbols
   * @return previousSymbols
  **/
  @javax.annotation.Nullable
  public List<String> getPreviousSymbols() {
    return previousSymbols;
  }

  public void setPreviousSymbols(List<String> previousSymbols) {
    this.previousSymbols = previousSymbols;
  }


  public EnsemblGene entrezGeneId(String entrezGeneId) {
    this.entrezGeneId = entrezGeneId;
    return this;
  }

   /**
   * Entrez Gene Id
   * @return entrezGeneId
  **/
  @javax.annotation.Nullable
  public String getEntrezGeneId() {
    return entrezGeneId;
  }

  public void setEntrezGeneId(String entrezGeneId) {
    this.entrezGeneId = entrezGeneId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnsemblGene ensemblGene = (EnsemblGene) o;
    return Objects.equals(this.geneId, ensemblGene.geneId) &&
        Objects.equals(this.hugoSymbol, ensemblGene.hugoSymbol) &&
        Objects.equals(this.synonyms, ensemblGene.synonyms) &&
        Objects.equals(this.previousSymbols, ensemblGene.previousSymbols) &&
        Objects.equals(this.entrezGeneId, ensemblGene.entrezGeneId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geneId, hugoSymbol, synonyms, previousSymbols, entrezGeneId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnsemblGene {\n");
    sb.append("    geneId: ").append(toIndentedString(geneId)).append("\n");
    sb.append("    hugoSymbol: ").append(toIndentedString(hugoSymbol)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    previousSymbols: ").append(toIndentedString(previousSymbols)).append("\n");
    sb.append("    entrezGeneId: ").append(toIndentedString(entrezGeneId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("geneId");
    openapiFields.add("hugoSymbol");
    openapiFields.add("synonyms");
    openapiFields.add("previousSymbols");
    openapiFields.add("entrezGeneId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("geneId");
    openapiRequiredFields.add("hugoSymbol");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnsemblGene
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnsemblGene.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnsemblGene is not found in the empty JSON string", EnsemblGene.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnsemblGene.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnsemblGene` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnsemblGene.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("geneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geneId").toString()));
      }
      if (!jsonObj.get("hugoSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hugoSymbol").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull() && !jsonObj.get("synonyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("previousSymbols") != null && !jsonObj.get("previousSymbols").isJsonNull() && !jsonObj.get("previousSymbols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousSymbols` to be an array in the JSON string but got `%s`", jsonObj.get("previousSymbols").toString()));
      }
      if ((jsonObj.get("entrezGeneId") != null && !jsonObj.get("entrezGeneId").isJsonNull()) && !jsonObj.get("entrezGeneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entrezGeneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entrezGeneId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnsemblGene.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnsemblGene' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnsemblGene> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnsemblGene.class));

       return (TypeAdapter<T>) new TypeAdapter<EnsemblGene>() {
           @Override
           public void write(JsonWriter out, EnsemblGene value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnsemblGene read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnsemblGene given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnsemblGene
  * @throws IOException if the JSON string is invalid with respect to EnsemblGene
  */
  public static EnsemblGene fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnsemblGene.class);
  }

 /**
  * Convert an instance of EnsemblGene to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

