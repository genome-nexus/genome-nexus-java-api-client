/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.GenomeNexusInfo;
import org.genome_nexus.client.SourceVersionInfo;
import org.genome_nexus.client.VEPInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * AggregateSourceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class AggregateSourceInfo {
  public static final String SERIALIZED_NAME_ANNOTATION_SOURCES_INFO = "annotationSourcesInfo";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SOURCES_INFO)
  private List<SourceVersionInfo> annotationSourcesInfo;

  public static final String SERIALIZED_NAME_GENOME_NEXUS = "genomeNexus";
  @SerializedName(SERIALIZED_NAME_GENOME_NEXUS)
  private GenomeNexusInfo genomeNexus;

  public static final String SERIALIZED_NAME_VEP = "vep";
  @SerializedName(SERIALIZED_NAME_VEP)
  private VEPInfo vep;

  public AggregateSourceInfo() {
  }

  public AggregateSourceInfo annotationSourcesInfo(List<SourceVersionInfo> annotationSourcesInfo) {
    this.annotationSourcesInfo = annotationSourcesInfo;
    return this;
  }

  public AggregateSourceInfo addAnnotationSourcesInfoItem(SourceVersionInfo annotationSourcesInfoItem) {
    if (this.annotationSourcesInfo == null) {
      this.annotationSourcesInfo = new ArrayList<>();
    }
    this.annotationSourcesInfo.add(annotationSourcesInfoItem);
    return this;
  }

   /**
   * Get annotationSourcesInfo
   * @return annotationSourcesInfo
  **/
  @javax.annotation.Nullable
  public List<SourceVersionInfo> getAnnotationSourcesInfo() {
    return annotationSourcesInfo;
  }

  public void setAnnotationSourcesInfo(List<SourceVersionInfo> annotationSourcesInfo) {
    this.annotationSourcesInfo = annotationSourcesInfo;
  }


  public AggregateSourceInfo genomeNexus(GenomeNexusInfo genomeNexus) {
    this.genomeNexus = genomeNexus;
    return this;
  }

   /**
   * Get genomeNexus
   * @return genomeNexus
  **/
  @javax.annotation.Nullable
  public GenomeNexusInfo getGenomeNexus() {
    return genomeNexus;
  }

  public void setGenomeNexus(GenomeNexusInfo genomeNexus) {
    this.genomeNexus = genomeNexus;
  }


  public AggregateSourceInfo vep(VEPInfo vep) {
    this.vep = vep;
    return this;
  }

   /**
   * Get vep
   * @return vep
  **/
  @javax.annotation.Nullable
  public VEPInfo getVep() {
    return vep;
  }

  public void setVep(VEPInfo vep) {
    this.vep = vep;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AggregateSourceInfo aggregateSourceInfo = (AggregateSourceInfo) o;
    return Objects.equals(this.annotationSourcesInfo, aggregateSourceInfo.annotationSourcesInfo) &&
        Objects.equals(this.genomeNexus, aggregateSourceInfo.genomeNexus) &&
        Objects.equals(this.vep, aggregateSourceInfo.vep);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSourcesInfo, genomeNexus, vep);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AggregateSourceInfo {\n");
    sb.append("    annotationSourcesInfo: ").append(toIndentedString(annotationSourcesInfo)).append("\n");
    sb.append("    genomeNexus: ").append(toIndentedString(genomeNexus)).append("\n");
    sb.append("    vep: ").append(toIndentedString(vep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSourcesInfo");
    openapiFields.add("genomeNexus");
    openapiFields.add("vep");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AggregateSourceInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AggregateSourceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AggregateSourceInfo is not found in the empty JSON string", AggregateSourceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AggregateSourceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AggregateSourceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("annotationSourcesInfo") != null && !jsonObj.get("annotationSourcesInfo").isJsonNull()) {
        JsonArray jsonArrayannotationSourcesInfo = jsonObj.getAsJsonArray("annotationSourcesInfo");
        if (jsonArrayannotationSourcesInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("annotationSourcesInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `annotationSourcesInfo` to be an array in the JSON string but got `%s`", jsonObj.get("annotationSourcesInfo").toString()));
          }

          // validate the optional field `annotationSourcesInfo` (array)
          for (int i = 0; i < jsonArrayannotationSourcesInfo.size(); i++) {
            SourceVersionInfo.validateJsonElement(jsonArrayannotationSourcesInfo.get(i));
          };
        }
      }
      // validate the optional field `genomeNexus`
      if (jsonObj.get("genomeNexus") != null && !jsonObj.get("genomeNexus").isJsonNull()) {
        GenomeNexusInfo.validateJsonElement(jsonObj.get("genomeNexus"));
      }
      // validate the optional field `vep`
      if (jsonObj.get("vep") != null && !jsonObj.get("vep").isJsonNull()) {
        VEPInfo.validateJsonElement(jsonObj.get("vep"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AggregateSourceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AggregateSourceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AggregateSourceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AggregateSourceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AggregateSourceInfo>() {
           @Override
           public void write(JsonWriter out, AggregateSourceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AggregateSourceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AggregateSourceInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AggregateSourceInfo
  * @throws IOException if the JSON string is invalid with respect to AggregateSourceInfo
  */
  public static AggregateSourceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AggregateSourceInfo.class);
  }

 /**
  * Convert an instance of AggregateSourceInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

