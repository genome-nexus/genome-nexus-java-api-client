/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.genome_nexus.client.Citations;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * MutationEffectResp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class MutationEffectResp {
  public static final String SERIALIZED_NAME_CITATIONS = "citations";
  @SerializedName(SERIALIZED_NAME_CITATIONS)
  private Citations citations;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KNOWN_EFFECT = "knownEffect";
  @SerializedName(SERIALIZED_NAME_KNOWN_EFFECT)
  private String knownEffect;

  public MutationEffectResp() {
  }

  public MutationEffectResp citations(Citations citations) {
    this.citations = citations;
    return this;
  }

   /**
   * Get citations
   * @return citations
  **/
  @javax.annotation.Nullable
  public Citations getCitations() {
    return citations;
  }

  public void setCitations(Citations citations) {
    this.citations = citations;
  }


  public MutationEffectResp description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MutationEffectResp knownEffect(String knownEffect) {
    this.knownEffect = knownEffect;
    return this;
  }

   /**
   * Get knownEffect
   * @return knownEffect
  **/
  @javax.annotation.Nullable
  public String getKnownEffect() {
    return knownEffect;
  }

  public void setKnownEffect(String knownEffect) {
    this.knownEffect = knownEffect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MutationEffectResp mutationEffectResp = (MutationEffectResp) o;
    return Objects.equals(this.citations, mutationEffectResp.citations) &&
        Objects.equals(this.description, mutationEffectResp.description) &&
        Objects.equals(this.knownEffect, mutationEffectResp.knownEffect);
  }

  @Override
  public int hashCode() {
    return Objects.hash(citations, description, knownEffect);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MutationEffectResp {\n");
    sb.append("    citations: ").append(toIndentedString(citations)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    knownEffect: ").append(toIndentedString(knownEffect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("citations");
    openapiFields.add("description");
    openapiFields.add("knownEffect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MutationEffectResp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MutationEffectResp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MutationEffectResp is not found in the empty JSON string", MutationEffectResp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MutationEffectResp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MutationEffectResp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `citations`
      if (jsonObj.get("citations") != null && !jsonObj.get("citations").isJsonNull()) {
        Citations.validateJsonElement(jsonObj.get("citations"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("knownEffect") != null && !jsonObj.get("knownEffect").isJsonNull()) && !jsonObj.get("knownEffect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownEffect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knownEffect").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MutationEffectResp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MutationEffectResp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MutationEffectResp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MutationEffectResp.class));

       return (TypeAdapter<T>) new TypeAdapter<MutationEffectResp>() {
           @Override
           public void write(JsonWriter out, MutationEffectResp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MutationEffectResp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MutationEffectResp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MutationEffectResp
  * @throws IOException if the JSON string is invalid with respect to MutationEffectResp
  */
  public static MutationEffectResp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MutationEffectResp.class);
  }

 /**
  * Convert an instance of MutationEffectResp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

