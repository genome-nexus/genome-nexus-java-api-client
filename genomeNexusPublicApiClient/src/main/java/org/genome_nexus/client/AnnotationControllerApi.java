/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.VariantAnnotation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnnotationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchVariantAnnotationByGenomicLocationGET
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByGenomicLocationGETCall(String genomicLocation, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/genomic/{genomicLocation}"
            .replace("{" + "genomicLocation" + "}", localVarApiClient.escapeString(genomicLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationByGenomicLocationGETValidateBeforeCall(String genomicLocation, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genomicLocation' is set
        if (genomicLocation == null) {
            throw new ApiException("Missing the required parameter 'genomicLocation' when calling fetchVariantAnnotationByGenomicLocationGET(Async)");
        }

        return fetchVariantAnnotationByGenomicLocationGETCall(genomicLocation, isoformOverrideSource, token, fields, _callback);

    }

    /**
     * Retrieves VEP annotation for the provided genomic location
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return VariantAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VariantAnnotation fetchVariantAnnotationByGenomicLocationGET(String genomicLocation, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        ApiResponse<VariantAnnotation> localVarResp = fetchVariantAnnotationByGenomicLocationGETWithHttpInfo(genomicLocation, isoformOverrideSource, token, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation for the provided genomic location
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return ApiResponse&lt;VariantAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariantAnnotation> fetchVariantAnnotationByGenomicLocationGETWithHttpInfo(String genomicLocation, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationByGenomicLocationGETValidateBeforeCall(genomicLocation, isoformOverrideSource, token, fields, null);
        Type localVarReturnType = new TypeToken<VariantAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation for the provided genomic location (asynchronously)
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByGenomicLocationGETAsync(String genomicLocation, String isoformOverrideSource, String token, List<String> fields, final ApiCallback<VariantAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationByGenomicLocationGETValidateBeforeCall(genomicLocation, isoformOverrideSource, token, fields, _callback);
        Type localVarReturnType = new TypeToken<VariantAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariantAnnotationByGenomicLocationPOST
     * @param genomicLocations List of Genomic Locations (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByGenomicLocationPOSTCall(List<GenomicLocation> genomicLocations, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = genomicLocations;

        // create path and map variables
        String localVarPath = "/annotation/genomic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationByGenomicLocationPOSTValidateBeforeCall(List<GenomicLocation> genomicLocations, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genomicLocations' is set
        if (genomicLocations == null) {
            throw new ApiException("Missing the required parameter 'genomicLocations' when calling fetchVariantAnnotationByGenomicLocationPOST(Async)");
        }

        return fetchVariantAnnotationByGenomicLocationPOSTCall(genomicLocations, isoformOverrideSource, token, fields, _callback);

    }

    /**
     * Retrieves VEP annotation for the provided list of genomic locations
     * 
     * @param genomicLocations List of Genomic Locations (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return List&lt;VariantAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VariantAnnotation> fetchVariantAnnotationByGenomicLocationPOST(List<GenomicLocation> genomicLocations, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        ApiResponse<List<VariantAnnotation>> localVarResp = fetchVariantAnnotationByGenomicLocationPOSTWithHttpInfo(genomicLocations, isoformOverrideSource, token, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation for the provided list of genomic locations
     * 
     * @param genomicLocations List of Genomic Locations (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return ApiResponse&lt;List&lt;VariantAnnotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VariantAnnotation>> fetchVariantAnnotationByGenomicLocationPOSTWithHttpInfo(List<GenomicLocation> genomicLocations, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationByGenomicLocationPOSTValidateBeforeCall(genomicLocations, isoformOverrideSource, token, fields, null);
        Type localVarReturnType = new TypeToken<List<VariantAnnotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation for the provided list of genomic locations (asynchronously)
     * 
     * @param genomicLocations List of Genomic Locations (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByGenomicLocationPOSTAsync(List<GenomicLocation> genomicLocations, String isoformOverrideSource, String token, List<String> fields, final ApiCallback<List<VariantAnnotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationByGenomicLocationPOSTValidateBeforeCall(genomicLocations, isoformOverrideSource, token, fields, _callback);
        Type localVarReturnType = new TypeToken<List<VariantAnnotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariantAnnotationByIdGET
     * @param variantId dbSNP id. For example rs116035550. (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByIdGETCall(String variantId, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/dbsnp/{variantId}"
            .replace("{" + "variantId" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationByIdGETValidateBeforeCall(String variantId, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling fetchVariantAnnotationByIdGET(Async)");
        }

        return fetchVariantAnnotationByIdGETCall(variantId, isoformOverrideSource, token, fields, _callback);

    }

    /**
     * Retrieves VEP annotation for the give dbSNP id
     * 
     * @param variantId dbSNP id. For example rs116035550. (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return VariantAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VariantAnnotation fetchVariantAnnotationByIdGET(String variantId, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        ApiResponse<VariantAnnotation> localVarResp = fetchVariantAnnotationByIdGETWithHttpInfo(variantId, isoformOverrideSource, token, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation for the give dbSNP id
     * 
     * @param variantId dbSNP id. For example rs116035550. (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return ApiResponse&lt;VariantAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariantAnnotation> fetchVariantAnnotationByIdGETWithHttpInfo(String variantId, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationByIdGETValidateBeforeCall(variantId, isoformOverrideSource, token, fields, null);
        Type localVarReturnType = new TypeToken<VariantAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation for the give dbSNP id (asynchronously)
     * 
     * @param variantId dbSNP id. For example rs116035550. (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByIdGETAsync(String variantId, String isoformOverrideSource, String token, List<String> fields, final ApiCallback<VariantAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationByIdGETValidateBeforeCall(variantId, isoformOverrideSource, token, fields, _callback);
        Type localVarReturnType = new TypeToken<VariantAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariantAnnotationByIdPOST
     * @param variantIds List of variant IDs. For example [\&quot;rs116035550\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByIdPOSTCall(List<String> variantIds, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variantIds;

        // create path and map variables
        String localVarPath = "/annotation/dbsnp/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationByIdPOSTValidateBeforeCall(List<String> variantIds, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variantIds' is set
        if (variantIds == null) {
            throw new ApiException("Missing the required parameter 'variantIds' when calling fetchVariantAnnotationByIdPOST(Async)");
        }

        return fetchVariantAnnotationByIdPOSTCall(variantIds, isoformOverrideSource, token, fields, _callback);

    }

    /**
     * Retrieves VEP annotation for the provided list of dbSNP ids
     * 
     * @param variantIds List of variant IDs. For example [\&quot;rs116035550\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return List&lt;VariantAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VariantAnnotation> fetchVariantAnnotationByIdPOST(List<String> variantIds, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        ApiResponse<List<VariantAnnotation>> localVarResp = fetchVariantAnnotationByIdPOSTWithHttpInfo(variantIds, isoformOverrideSource, token, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation for the provided list of dbSNP ids
     * 
     * @param variantIds List of variant IDs. For example [\&quot;rs116035550\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return ApiResponse&lt;List&lt;VariantAnnotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VariantAnnotation>> fetchVariantAnnotationByIdPOSTWithHttpInfo(List<String> variantIds, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationByIdPOSTValidateBeforeCall(variantIds, isoformOverrideSource, token, fields, null);
        Type localVarReturnType = new TypeToken<List<VariantAnnotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation for the provided list of dbSNP ids (asynchronously)
     * 
     * @param variantIds List of variant IDs. For example [\&quot;rs116035550\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationByIdPOSTAsync(List<String> variantIds, String isoformOverrideSource, String token, List<String> fields, final ApiCallback<List<VariantAnnotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationByIdPOSTValidateBeforeCall(variantIds, isoformOverrideSource, token, fields, _callback);
        Type localVarReturnType = new TypeToken<List<VariantAnnotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariantAnnotationGET
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationGETCall(String variant, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/{variant}"
            .replace("{" + "variant" + "}", localVarApiClient.escapeString(variant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationGETValidateBeforeCall(String variant, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variant' is set
        if (variant == null) {
            throw new ApiException("Missing the required parameter 'variant' when calling fetchVariantAnnotationGET(Async)");
        }

        return fetchVariantAnnotationGETCall(variant, isoformOverrideSource, token, fields, _callback);

    }

    /**
     * Retrieves VEP annotation for the provided variant
     * 
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return VariantAnnotation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VariantAnnotation fetchVariantAnnotationGET(String variant, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        ApiResponse<VariantAnnotation> localVarResp = fetchVariantAnnotationGETWithHttpInfo(variant, isoformOverrideSource, token, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation for the provided variant
     * 
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return ApiResponse&lt;VariantAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariantAnnotation> fetchVariantAnnotationGETWithHttpInfo(String variant, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationGETValidateBeforeCall(variant, isoformOverrideSource, token, fields, null);
        Type localVarReturnType = new TypeToken<VariantAnnotation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation for the provided variant (asynchronously)
     * 
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationGETAsync(String variant, String isoformOverrideSource, String token, List<String> fields, final ApiCallback<VariantAnnotation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationGETValidateBeforeCall(variant, isoformOverrideSource, token, fields, _callback);
        Type localVarReturnType = new TypeToken<VariantAnnotation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariantAnnotationPOST
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationPOSTCall(List<String> variants, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variants;

        // create path and map variables
        String localVarPath = "/annotation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationPOSTValidateBeforeCall(List<String> variants, String isoformOverrideSource, String token, List<String> fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variants' is set
        if (variants == null) {
            throw new ApiException("Missing the required parameter 'variants' when calling fetchVariantAnnotationPOST(Async)");
        }

        return fetchVariantAnnotationPOSTCall(variants, isoformOverrideSource, token, fields, _callback);

    }

    /**
     * Retrieves VEP annotation for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return List&lt;VariantAnnotation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VariantAnnotation> fetchVariantAnnotationPOST(List<String> variants, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        ApiResponse<List<VariantAnnotation>> localVarResp = fetchVariantAnnotationPOSTWithHttpInfo(variants, isoformOverrideSource, token, fields);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @return ApiResponse&lt;List&lt;VariantAnnotation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VariantAnnotation>> fetchVariantAnnotationPOSTWithHttpInfo(List<String> variants, String isoformOverrideSource, String token, List<String> fields) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationPOSTValidateBeforeCall(variants, isoformOverrideSource, token, fields, null);
        Type localVarReturnType = new TypeToken<List<VariantAnnotation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation for the provided list of variants (asynchronously)
     * 
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param token Map of tokens. For example {\&quot;source1\&quot;:\&quot;put-your-token1-here\&quot;,\&quot;source2\&quot;:\&quot;put-your-token2-here\&quot;} (optional)
     * @param fields Comma separated list of fields to include in the annotation (case-sensitive!). Defaults to \&quot;annotation_summary\&quot; if no value passed. Valid values: {annotation_summary, clinvar, hotspots, mutation_assessor, my_variant_info, nucleotide_context, oncokb, ptms, signal} (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationPOSTAsync(List<String> variants, String isoformOverrideSource, String token, List<String> fields, final ApiCallback<List<VariantAnnotation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationPOSTValidateBeforeCall(variants, isoformOverrideSource, token, fields, _callback);
        Type localVarReturnType = new TypeToken<List<VariantAnnotation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
