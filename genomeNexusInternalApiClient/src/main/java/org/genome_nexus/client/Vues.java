/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Vues
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class Vues {
  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CONFIRMED = "confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private String context;

  public static final String SERIALIZED_NAME_DEFAULT_EFFECT = "defaultEffect";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EFFECT)
  private String defaultEffect;

  public static final String SERIALIZED_NAME_GENOMIC_LOCATION = "genomicLocation";
  @SerializedName(SERIALIZED_NAME_GENOMIC_LOCATION)
  private String genomicLocation;

  public static final String SERIALIZED_NAME_GENOMIC_LOCATION_DESCRIPTION = "genomicLocationDescription";
  @SerializedName(SERIALIZED_NAME_GENOMIC_LOCATION_DESCRIPTION)
  private String genomicLocationDescription;

  public static final String SERIALIZED_NAME_HUGO_GENE_SYMBOL = "hugoGeneSymbol";
  @SerializedName(SERIALIZED_NAME_HUGO_GENE_SYMBOL)
  private String hugoGeneSymbol;

  public static final String SERIALIZED_NAME_PUBMED_ID = "pubmedId";
  @SerializedName(SERIALIZED_NAME_PUBMED_ID)
  private Integer pubmedId;

  public static final String SERIALIZED_NAME_REFERENCE_TEXT = "referenceText";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TEXT)
  private String referenceText;

  public static final String SERIALIZED_NAME_REVISED_PROTEIN_EFFECT = "revisedProteinEffect";
  @SerializedName(SERIALIZED_NAME_REVISED_PROTEIN_EFFECT)
  private String revisedProteinEffect;

  public static final String SERIALIZED_NAME_REVISED_VARIANT_CLASSIFICATION = "revisedVariantClassification";
  @SerializedName(SERIALIZED_NAME_REVISED_VARIANT_CLASSIFICATION)
  private String revisedVariantClassification;

  public static final String SERIALIZED_NAME_TRANSCRIPT_ID = "transcriptId";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_ID)
  private String transcriptId;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public static final String SERIALIZED_NAME_VEP_PREDICTED_PROTEIN_EFFECT = "vepPredictedProteinEffect";
  @SerializedName(SERIALIZED_NAME_VEP_PREDICTED_PROTEIN_EFFECT)
  private String vepPredictedProteinEffect;

  public static final String SERIALIZED_NAME_VEP_PREDICTED_VARIANT_CLASSIFICATION = "vepPredictedVariantClassification";
  @SerializedName(SERIALIZED_NAME_VEP_PREDICTED_VARIANT_CLASSIFICATION)
  private String vepPredictedVariantClassification;

  public Vues() {
  }

  public Vues comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }


  public Vues confirmed(Boolean confirmed) {
    this.confirmed = confirmed;
    return this;
  }

   /**
   * Get confirmed
   * @return confirmed
  **/
  @javax.annotation.Nullable
  public Boolean getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public Vues context(String context) {
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @javax.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  public Vues defaultEffect(String defaultEffect) {
    this.defaultEffect = defaultEffect;
    return this;
  }

   /**
   * Get defaultEffect
   * @return defaultEffect
  **/
  @javax.annotation.Nullable
  public String getDefaultEffect() {
    return defaultEffect;
  }

  public void setDefaultEffect(String defaultEffect) {
    this.defaultEffect = defaultEffect;
  }


  public Vues genomicLocation(String genomicLocation) {
    this.genomicLocation = genomicLocation;
    return this;
  }

   /**
   * Get genomicLocation
   * @return genomicLocation
  **/
  @javax.annotation.Nullable
  public String getGenomicLocation() {
    return genomicLocation;
  }

  public void setGenomicLocation(String genomicLocation) {
    this.genomicLocation = genomicLocation;
  }


  public Vues genomicLocationDescription(String genomicLocationDescription) {
    this.genomicLocationDescription = genomicLocationDescription;
    return this;
  }

   /**
   * Get genomicLocationDescription
   * @return genomicLocationDescription
  **/
  @javax.annotation.Nullable
  public String getGenomicLocationDescription() {
    return genomicLocationDescription;
  }

  public void setGenomicLocationDescription(String genomicLocationDescription) {
    this.genomicLocationDescription = genomicLocationDescription;
  }


  public Vues hugoGeneSymbol(String hugoGeneSymbol) {
    this.hugoGeneSymbol = hugoGeneSymbol;
    return this;
  }

   /**
   * Get hugoGeneSymbol
   * @return hugoGeneSymbol
  **/
  @javax.annotation.Nullable
  public String getHugoGeneSymbol() {
    return hugoGeneSymbol;
  }

  public void setHugoGeneSymbol(String hugoGeneSymbol) {
    this.hugoGeneSymbol = hugoGeneSymbol;
  }


  public Vues pubmedId(Integer pubmedId) {
    this.pubmedId = pubmedId;
    return this;
  }

   /**
   * Get pubmedId
   * @return pubmedId
  **/
  @javax.annotation.Nullable
  public Integer getPubmedId() {
    return pubmedId;
  }

  public void setPubmedId(Integer pubmedId) {
    this.pubmedId = pubmedId;
  }


  public Vues referenceText(String referenceText) {
    this.referenceText = referenceText;
    return this;
  }

   /**
   * Get referenceText
   * @return referenceText
  **/
  @javax.annotation.Nullable
  public String getReferenceText() {
    return referenceText;
  }

  public void setReferenceText(String referenceText) {
    this.referenceText = referenceText;
  }


  public Vues revisedProteinEffect(String revisedProteinEffect) {
    this.revisedProteinEffect = revisedProteinEffect;
    return this;
  }

   /**
   * Get revisedProteinEffect
   * @return revisedProteinEffect
  **/
  @javax.annotation.Nullable
  public String getRevisedProteinEffect() {
    return revisedProteinEffect;
  }

  public void setRevisedProteinEffect(String revisedProteinEffect) {
    this.revisedProteinEffect = revisedProteinEffect;
  }


  public Vues revisedVariantClassification(String revisedVariantClassification) {
    this.revisedVariantClassification = revisedVariantClassification;
    return this;
  }

   /**
   * Get revisedVariantClassification
   * @return revisedVariantClassification
  **/
  @javax.annotation.Nullable
  public String getRevisedVariantClassification() {
    return revisedVariantClassification;
  }

  public void setRevisedVariantClassification(String revisedVariantClassification) {
    this.revisedVariantClassification = revisedVariantClassification;
  }


  public Vues transcriptId(String transcriptId) {
    this.transcriptId = transcriptId;
    return this;
  }

   /**
   * Get transcriptId
   * @return transcriptId
  **/
  @javax.annotation.Nullable
  public String getTranscriptId() {
    return transcriptId;
  }

  public void setTranscriptId(String transcriptId) {
    this.transcriptId = transcriptId;
  }


  public Vues variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Get variant
   * @return variant
  **/
  @javax.annotation.Nullable
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }


  public Vues vepPredictedProteinEffect(String vepPredictedProteinEffect) {
    this.vepPredictedProteinEffect = vepPredictedProteinEffect;
    return this;
  }

   /**
   * Get vepPredictedProteinEffect
   * @return vepPredictedProteinEffect
  **/
  @javax.annotation.Nullable
  public String getVepPredictedProteinEffect() {
    return vepPredictedProteinEffect;
  }

  public void setVepPredictedProteinEffect(String vepPredictedProteinEffect) {
    this.vepPredictedProteinEffect = vepPredictedProteinEffect;
  }


  public Vues vepPredictedVariantClassification(String vepPredictedVariantClassification) {
    this.vepPredictedVariantClassification = vepPredictedVariantClassification;
    return this;
  }

   /**
   * Get vepPredictedVariantClassification
   * @return vepPredictedVariantClassification
  **/
  @javax.annotation.Nullable
  public String getVepPredictedVariantClassification() {
    return vepPredictedVariantClassification;
  }

  public void setVepPredictedVariantClassification(String vepPredictedVariantClassification) {
    this.vepPredictedVariantClassification = vepPredictedVariantClassification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vues vues = (Vues) o;
    return Objects.equals(this.comment, vues.comment) &&
        Objects.equals(this.confirmed, vues.confirmed) &&
        Objects.equals(this.context, vues.context) &&
        Objects.equals(this.defaultEffect, vues.defaultEffect) &&
        Objects.equals(this.genomicLocation, vues.genomicLocation) &&
        Objects.equals(this.genomicLocationDescription, vues.genomicLocationDescription) &&
        Objects.equals(this.hugoGeneSymbol, vues.hugoGeneSymbol) &&
        Objects.equals(this.pubmedId, vues.pubmedId) &&
        Objects.equals(this.referenceText, vues.referenceText) &&
        Objects.equals(this.revisedProteinEffect, vues.revisedProteinEffect) &&
        Objects.equals(this.revisedVariantClassification, vues.revisedVariantClassification) &&
        Objects.equals(this.transcriptId, vues.transcriptId) &&
        Objects.equals(this.variant, vues.variant) &&
        Objects.equals(this.vepPredictedProteinEffect, vues.vepPredictedProteinEffect) &&
        Objects.equals(this.vepPredictedVariantClassification, vues.vepPredictedVariantClassification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comment, confirmed, context, defaultEffect, genomicLocation, genomicLocationDescription, hugoGeneSymbol, pubmedId, referenceText, revisedProteinEffect, revisedVariantClassification, transcriptId, variant, vepPredictedProteinEffect, vepPredictedVariantClassification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vues {\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    defaultEffect: ").append(toIndentedString(defaultEffect)).append("\n");
    sb.append("    genomicLocation: ").append(toIndentedString(genomicLocation)).append("\n");
    sb.append("    genomicLocationDescription: ").append(toIndentedString(genomicLocationDescription)).append("\n");
    sb.append("    hugoGeneSymbol: ").append(toIndentedString(hugoGeneSymbol)).append("\n");
    sb.append("    pubmedId: ").append(toIndentedString(pubmedId)).append("\n");
    sb.append("    referenceText: ").append(toIndentedString(referenceText)).append("\n");
    sb.append("    revisedProteinEffect: ").append(toIndentedString(revisedProteinEffect)).append("\n");
    sb.append("    revisedVariantClassification: ").append(toIndentedString(revisedVariantClassification)).append("\n");
    sb.append("    transcriptId: ").append(toIndentedString(transcriptId)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    vepPredictedProteinEffect: ").append(toIndentedString(vepPredictedProteinEffect)).append("\n");
    sb.append("    vepPredictedVariantClassification: ").append(toIndentedString(vepPredictedVariantClassification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment");
    openapiFields.add("confirmed");
    openapiFields.add("context");
    openapiFields.add("defaultEffect");
    openapiFields.add("genomicLocation");
    openapiFields.add("genomicLocationDescription");
    openapiFields.add("hugoGeneSymbol");
    openapiFields.add("pubmedId");
    openapiFields.add("referenceText");
    openapiFields.add("revisedProteinEffect");
    openapiFields.add("revisedVariantClassification");
    openapiFields.add("transcriptId");
    openapiFields.add("variant");
    openapiFields.add("vepPredictedProteinEffect");
    openapiFields.add("vepPredictedVariantClassification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Vues
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vues is not found in the empty JSON string", Vues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("defaultEffect") != null && !jsonObj.get("defaultEffect").isJsonNull()) && !jsonObj.get("defaultEffect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultEffect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultEffect").toString()));
      }
      if ((jsonObj.get("genomicLocation") != null && !jsonObj.get("genomicLocation").isJsonNull()) && !jsonObj.get("genomicLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genomicLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genomicLocation").toString()));
      }
      if ((jsonObj.get("genomicLocationDescription") != null && !jsonObj.get("genomicLocationDescription").isJsonNull()) && !jsonObj.get("genomicLocationDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genomicLocationDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genomicLocationDescription").toString()));
      }
      if ((jsonObj.get("hugoGeneSymbol") != null && !jsonObj.get("hugoGeneSymbol").isJsonNull()) && !jsonObj.get("hugoGeneSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoGeneSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hugoGeneSymbol").toString()));
      }
      if ((jsonObj.get("referenceText") != null && !jsonObj.get("referenceText").isJsonNull()) && !jsonObj.get("referenceText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceText").toString()));
      }
      if ((jsonObj.get("revisedProteinEffect") != null && !jsonObj.get("revisedProteinEffect").isJsonNull()) && !jsonObj.get("revisedProteinEffect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisedProteinEffect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisedProteinEffect").toString()));
      }
      if ((jsonObj.get("revisedVariantClassification") != null && !jsonObj.get("revisedVariantClassification").isJsonNull()) && !jsonObj.get("revisedVariantClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisedVariantClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisedVariantClassification").toString()));
      }
      if ((jsonObj.get("transcriptId") != null && !jsonObj.get("transcriptId").isJsonNull()) && !jsonObj.get("transcriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcriptId").toString()));
      }
      if ((jsonObj.get("variant") != null && !jsonObj.get("variant").isJsonNull()) && !jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      if ((jsonObj.get("vepPredictedProteinEffect") != null && !jsonObj.get("vepPredictedProteinEffect").isJsonNull()) && !jsonObj.get("vepPredictedProteinEffect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vepPredictedProteinEffect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vepPredictedProteinEffect").toString()));
      }
      if ((jsonObj.get("vepPredictedVariantClassification") != null && !jsonObj.get("vepPredictedVariantClassification").isJsonNull()) && !jsonObj.get("vepPredictedVariantClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vepPredictedVariantClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vepPredictedVariantClassification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vues.class));

       return (TypeAdapter<T>) new TypeAdapter<Vues>() {
           @Override
           public void write(JsonWriter out, Vues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Vues given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Vues
  * @throws IOException if the JSON string is invalid with respect to Vues
  */
  public static Vues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vues.class);
  }

 /**
  * Convert an instance of Vues to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

