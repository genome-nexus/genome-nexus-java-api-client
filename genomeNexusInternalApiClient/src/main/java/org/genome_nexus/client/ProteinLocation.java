/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * ProteinLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class ProteinLocation {
  public static final String SERIALIZED_NAME_TRANSCRIPT_ID = "transcriptId";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_ID)
  private String transcriptId;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Integer end;

  public static final String SERIALIZED_NAME_MUTATION_TYPE = "mutationType";
  @SerializedName(SERIALIZED_NAME_MUTATION_TYPE)
  private String mutationType;

  public ProteinLocation() {
  }

  public ProteinLocation transcriptId(String transcriptId) {
    this.transcriptId = transcriptId;
    return this;
  }

   /**
   * Ensembl Transcript ID
   * @return transcriptId
  **/
  @javax.annotation.Nonnull
  public String getTranscriptId() {
    return transcriptId;
  }

  public void setTranscriptId(String transcriptId) {
    this.transcriptId = transcriptId;
  }


  public ProteinLocation start(Integer start) {
    this.start = start;
    return this;
  }

   /**
   * Start Position Residue
   * @return start
  **/
  @javax.annotation.Nonnull
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }


  public ProteinLocation end(Integer end) {
    this.end = end;
    return this;
  }

   /**
   * End Position Residue
   * @return end
  **/
  @javax.annotation.Nonnull
  public Integer getEnd() {
    return end;
  }

  public void setEnd(Integer end) {
    this.end = end;
  }


  public ProteinLocation mutationType(String mutationType) {
    this.mutationType = mutationType;
    return this;
  }

   /**
   * Mutation Type e.g. Missense_Mutation
   * @return mutationType
  **/
  @javax.annotation.Nonnull
  public String getMutationType() {
    return mutationType;
  }

  public void setMutationType(String mutationType) {
    this.mutationType = mutationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProteinLocation proteinLocation = (ProteinLocation) o;
    return Objects.equals(this.transcriptId, proteinLocation.transcriptId) &&
        Objects.equals(this.start, proteinLocation.start) &&
        Objects.equals(this.end, proteinLocation.end) &&
        Objects.equals(this.mutationType, proteinLocation.mutationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transcriptId, start, end, mutationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProteinLocation {\n");
    sb.append("    transcriptId: ").append(toIndentedString(transcriptId)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    mutationType: ").append(toIndentedString(mutationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("transcriptId");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("mutationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transcriptId");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("mutationType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProteinLocation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProteinLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProteinLocation is not found in the empty JSON string", ProteinLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProteinLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProteinLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProteinLocation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("transcriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcriptId").toString()));
      }
      if (!jsonObj.get("mutationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mutationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mutationType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProteinLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProteinLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProteinLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProteinLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<ProteinLocation>() {
           @Override
           public void write(JsonWriter out, ProteinLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProteinLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProteinLocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProteinLocation
  * @throws IOException if the JSON string is invalid with respect to ProteinLocation
  */
  public static ProteinLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProteinLocation.class);
  }

 /**
  * Convert an instance of ProteinLocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

