/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.ClinvarAnnotation;
import org.genome_nexus.client.ColocatedVariant;
import org.genome_nexus.client.HotspotAnnotation;
import org.genome_nexus.client.IntergenicConsequences;
import org.genome_nexus.client.MutationAssessorAnnotation;
import org.genome_nexus.client.MyVariantInfoAnnotation;
import org.genome_nexus.client.NucleotideContextAnnotation;
import org.genome_nexus.client.OncokbAnnotation;
import org.genome_nexus.client.PtmAnnotation;
import org.genome_nexus.client.SignalAnnotation;
import org.genome_nexus.client.TranscriptConsequence;
import org.genome_nexus.client.VariantAnnotationSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * VariantAnnotation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class VariantAnnotation {
  public static final String SERIALIZED_NAME_ALLELE_STRING = "allele_string";
  @SerializedName(SERIALIZED_NAME_ALLELE_STRING)
  private String alleleString;

  public static final String SERIALIZED_NAME_ANNOTATION_J_S_O_N = "annotationJSON";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_J_S_O_N)
  private String annotationJSON;

  public static final String SERIALIZED_NAME_ANNOTATION_SUMMARY = "annotation_summary";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SUMMARY)
  private VariantAnnotationSummary annotationSummary;

  public static final String SERIALIZED_NAME_ASSEMBLY_NAME = "assembly_name";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY_NAME)
  private String assemblyName;

  public static final String SERIALIZED_NAME_CLINVAR = "clinvar";
  @SerializedName(SERIALIZED_NAME_CLINVAR)
  private ClinvarAnnotation clinvar;

  public static final String SERIALIZED_NAME_COLOCATED_VARIANTS = "colocatedVariants";
  @SerializedName(SERIALIZED_NAME_COLOCATED_VARIANTS)
  private List<ColocatedVariant> colocatedVariants;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Integer end;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_GENOMIC_LOCATION_EXPLANATION = "genomicLocationExplanation";
  @SerializedName(SERIALIZED_NAME_GENOMIC_LOCATION_EXPLANATION)
  private String genomicLocationExplanation;

  public static final String SERIALIZED_NAME_HGVSG = "hgvsg";
  @SerializedName(SERIALIZED_NAME_HGVSG)
  private String hgvsg;

  public static final String SERIALIZED_NAME_HOTSPOTS = "hotspots";
  @SerializedName(SERIALIZED_NAME_HOTSPOTS)
  private HotspotAnnotation hotspots;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERGENIC_CONSEQUENCES = "intergenic_consequences";
  @SerializedName(SERIALIZED_NAME_INTERGENIC_CONSEQUENCES)
  private List<IntergenicConsequences> intergenicConsequences = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOST_SEVERE_CONSEQUENCE = "most_severe_consequence";
  @SerializedName(SERIALIZED_NAME_MOST_SEVERE_CONSEQUENCE)
  private String mostSevereConsequence;

  public static final String SERIALIZED_NAME_MUTATION_ASSESSOR = "mutation_assessor";
  @SerializedName(SERIALIZED_NAME_MUTATION_ASSESSOR)
  private MutationAssessorAnnotation mutationAssessor;

  public static final String SERIALIZED_NAME_MY_VARIANT_INFO = "my_variant_info";
  @SerializedName(SERIALIZED_NAME_MY_VARIANT_INFO)
  private MyVariantInfoAnnotation myVariantInfo;

  public static final String SERIALIZED_NAME_NUCLEOTIDE_CONTEXT = "nucleotide_context";
  @SerializedName(SERIALIZED_NAME_NUCLEOTIDE_CONTEXT)
  private NucleotideContextAnnotation nucleotideContext;

  public static final String SERIALIZED_NAME_ONCOKB = "oncokb";
  @SerializedName(SERIALIZED_NAME_ONCOKB)
  private OncokbAnnotation oncokb;

  public static final String SERIALIZED_NAME_ORIGINAL_VARIANT_QUERY = "originalVariantQuery";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_VARIANT_QUERY)
  private String originalVariantQuery;

  public static final String SERIALIZED_NAME_PTMS = "ptms";
  @SerializedName(SERIALIZED_NAME_PTMS)
  private PtmAnnotation ptms;

  public static final String SERIALIZED_NAME_SEQ_REGION_NAME = "seq_region_name";
  @SerializedName(SERIALIZED_NAME_SEQ_REGION_NAME)
  private String seqRegionName;

  public static final String SERIALIZED_NAME_SIGNAL_ANNOTATION = "signalAnnotation";
  @SerializedName(SERIALIZED_NAME_SIGNAL_ANNOTATION)
  private SignalAnnotation signalAnnotation;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public static final String SERIALIZED_NAME_STRAND = "strand";
  @SerializedName(SERIALIZED_NAME_STRAND)
  private Integer strand;

  public static final String SERIALIZED_NAME_SUCCESSFULLY_ANNOTATED = "successfully_annotated";
  @SerializedName(SERIALIZED_NAME_SUCCESSFULLY_ANNOTATED)
  private Boolean successfullyAnnotated;

  public static final String SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCES = "transcript_consequences";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_CONSEQUENCES)
  private List<TranscriptConsequence> transcriptConsequences;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public VariantAnnotation() {
  }

  public VariantAnnotation alleleString(String alleleString) {
    this.alleleString = alleleString;
    return this;
  }

   /**
   * Allele string (e.g: A/T)
   * @return alleleString
  **/
  @javax.annotation.Nullable
  public String getAlleleString() {
    return alleleString;
  }

  public void setAlleleString(String alleleString) {
    this.alleleString = alleleString;
  }


  public VariantAnnotation annotationJSON(String annotationJSON) {
    this.annotationJSON = annotationJSON;
    return this;
  }

   /**
   * Annotation data as JSON string
   * @return annotationJSON
  **/
  @javax.annotation.Nullable
  public String getAnnotationJSON() {
    return annotationJSON;
  }

  public void setAnnotationJSON(String annotationJSON) {
    this.annotationJSON = annotationJSON;
  }


  public VariantAnnotation annotationSummary(VariantAnnotationSummary annotationSummary) {
    this.annotationSummary = annotationSummary;
    return this;
  }

   /**
   * Get annotationSummary
   * @return annotationSummary
  **/
  @javax.annotation.Nullable
  public VariantAnnotationSummary getAnnotationSummary() {
    return annotationSummary;
  }

  public void setAnnotationSummary(VariantAnnotationSummary annotationSummary) {
    this.annotationSummary = annotationSummary;
  }


  public VariantAnnotation assemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
    return this;
  }

   /**
   * NCBI build number
   * @return assemblyName
  **/
  @javax.annotation.Nullable
  public String getAssemblyName() {
    return assemblyName;
  }

  public void setAssemblyName(String assemblyName) {
    this.assemblyName = assemblyName;
  }


  public VariantAnnotation clinvar(ClinvarAnnotation clinvar) {
    this.clinvar = clinvar;
    return this;
  }

   /**
   * Get clinvar
   * @return clinvar
  **/
  @javax.annotation.Nullable
  public ClinvarAnnotation getClinvar() {
    return clinvar;
  }

  public void setClinvar(ClinvarAnnotation clinvar) {
    this.clinvar = clinvar;
  }


  public VariantAnnotation colocatedVariants(List<ColocatedVariant> colocatedVariants) {
    this.colocatedVariants = colocatedVariants;
    return this;
  }

  public VariantAnnotation addColocatedVariantsItem(ColocatedVariant colocatedVariantsItem) {
    if (this.colocatedVariants == null) {
      this.colocatedVariants = new ArrayList<>();
    }
    this.colocatedVariants.add(colocatedVariantsItem);
    return this;
  }

   /**
   * Get colocatedVariants
   * @return colocatedVariants
  **/
  @javax.annotation.Nullable
  public List<ColocatedVariant> getColocatedVariants() {
    return colocatedVariants;
  }

  public void setColocatedVariants(List<ColocatedVariant> colocatedVariants) {
    this.colocatedVariants = colocatedVariants;
  }


  public VariantAnnotation end(Integer end) {
    this.end = end;
    return this;
  }

   /**
   * End position
   * @return end
  **/
  @javax.annotation.Nullable
  public Integer getEnd() {
    return end;
  }

  public void setEnd(Integer end) {
    this.end = end;
  }


  public VariantAnnotation errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public VariantAnnotation genomicLocationExplanation(String genomicLocationExplanation) {
    this.genomicLocationExplanation = genomicLocationExplanation;
    return this;
  }

   /**
   * Get genomicLocationExplanation
   * @return genomicLocationExplanation
  **/
  @javax.annotation.Nullable
  public String getGenomicLocationExplanation() {
    return genomicLocationExplanation;
  }

  public void setGenomicLocationExplanation(String genomicLocationExplanation) {
    this.genomicLocationExplanation = genomicLocationExplanation;
  }


  public VariantAnnotation hgvsg(String hgvsg) {
    this.hgvsg = hgvsg;
    return this;
  }

   /**
   * Get hgvsg
   * @return hgvsg
  **/
  @javax.annotation.Nullable
  public String getHgvsg() {
    return hgvsg;
  }

  public void setHgvsg(String hgvsg) {
    this.hgvsg = hgvsg;
  }


  public VariantAnnotation hotspots(HotspotAnnotation hotspots) {
    this.hotspots = hotspots;
    return this;
  }

   /**
   * Get hotspots
   * @return hotspots
  **/
  @javax.annotation.Nullable
  public HotspotAnnotation getHotspots() {
    return hotspots;
  }

  public void setHotspots(HotspotAnnotation hotspots) {
    this.hotspots = hotspots;
  }


  public VariantAnnotation id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Variant id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public VariantAnnotation intergenicConsequences(List<IntergenicConsequences> intergenicConsequences) {
    this.intergenicConsequences = intergenicConsequences;
    return this;
  }

  public VariantAnnotation addIntergenicConsequencesItem(IntergenicConsequences intergenicConsequencesItem) {
    if (this.intergenicConsequences == null) {
      this.intergenicConsequences = new ArrayList<>();
    }
    this.intergenicConsequences.add(intergenicConsequencesItem);
    return this;
  }

   /**
   * intergenicConsequences
   * @return intergenicConsequences
  **/
  @javax.annotation.Nonnull
  public List<IntergenicConsequences> getIntergenicConsequences() {
    return intergenicConsequences;
  }

  public void setIntergenicConsequences(List<IntergenicConsequences> intergenicConsequences) {
    this.intergenicConsequences = intergenicConsequences;
  }


  public VariantAnnotation mostSevereConsequence(String mostSevereConsequence) {
    this.mostSevereConsequence = mostSevereConsequence;
    return this;
  }

   /**
   * Most severe consequence
   * @return mostSevereConsequence
  **/
  @javax.annotation.Nullable
  public String getMostSevereConsequence() {
    return mostSevereConsequence;
  }

  public void setMostSevereConsequence(String mostSevereConsequence) {
    this.mostSevereConsequence = mostSevereConsequence;
  }


  public VariantAnnotation mutationAssessor(MutationAssessorAnnotation mutationAssessor) {
    this.mutationAssessor = mutationAssessor;
    return this;
  }

   /**
   * Get mutationAssessor
   * @return mutationAssessor
  **/
  @javax.annotation.Nullable
  public MutationAssessorAnnotation getMutationAssessor() {
    return mutationAssessor;
  }

  public void setMutationAssessor(MutationAssessorAnnotation mutationAssessor) {
    this.mutationAssessor = mutationAssessor;
  }


  public VariantAnnotation myVariantInfo(MyVariantInfoAnnotation myVariantInfo) {
    this.myVariantInfo = myVariantInfo;
    return this;
  }

   /**
   * Get myVariantInfo
   * @return myVariantInfo
  **/
  @javax.annotation.Nullable
  public MyVariantInfoAnnotation getMyVariantInfo() {
    return myVariantInfo;
  }

  public void setMyVariantInfo(MyVariantInfoAnnotation myVariantInfo) {
    this.myVariantInfo = myVariantInfo;
  }


  public VariantAnnotation nucleotideContext(NucleotideContextAnnotation nucleotideContext) {
    this.nucleotideContext = nucleotideContext;
    return this;
  }

   /**
   * Get nucleotideContext
   * @return nucleotideContext
  **/
  @javax.annotation.Nullable
  public NucleotideContextAnnotation getNucleotideContext() {
    return nucleotideContext;
  }

  public void setNucleotideContext(NucleotideContextAnnotation nucleotideContext) {
    this.nucleotideContext = nucleotideContext;
  }


  public VariantAnnotation oncokb(OncokbAnnotation oncokb) {
    this.oncokb = oncokb;
    return this;
  }

   /**
   * Get oncokb
   * @return oncokb
  **/
  @javax.annotation.Nullable
  public OncokbAnnotation getOncokb() {
    return oncokb;
  }

  public void setOncokb(OncokbAnnotation oncokb) {
    this.oncokb = oncokb;
  }


  public VariantAnnotation originalVariantQuery(String originalVariantQuery) {
    this.originalVariantQuery = originalVariantQuery;
    return this;
  }

   /**
   * Original variant query
   * @return originalVariantQuery
  **/
  @javax.annotation.Nonnull
  public String getOriginalVariantQuery() {
    return originalVariantQuery;
  }

  public void setOriginalVariantQuery(String originalVariantQuery) {
    this.originalVariantQuery = originalVariantQuery;
  }


  public VariantAnnotation ptms(PtmAnnotation ptms) {
    this.ptms = ptms;
    return this;
  }

   /**
   * Get ptms
   * @return ptms
  **/
  @javax.annotation.Nullable
  public PtmAnnotation getPtms() {
    return ptms;
  }

  public void setPtms(PtmAnnotation ptms) {
    this.ptms = ptms;
  }


  public VariantAnnotation seqRegionName(String seqRegionName) {
    this.seqRegionName = seqRegionName;
    return this;
  }

   /**
   * Chromosome
   * @return seqRegionName
  **/
  @javax.annotation.Nullable
  public String getSeqRegionName() {
    return seqRegionName;
  }

  public void setSeqRegionName(String seqRegionName) {
    this.seqRegionName = seqRegionName;
  }


  public VariantAnnotation signalAnnotation(SignalAnnotation signalAnnotation) {
    this.signalAnnotation = signalAnnotation;
    return this;
  }

   /**
   * Get signalAnnotation
   * @return signalAnnotation
  **/
  @javax.annotation.Nullable
  public SignalAnnotation getSignalAnnotation() {
    return signalAnnotation;
  }

  public void setSignalAnnotation(SignalAnnotation signalAnnotation) {
    this.signalAnnotation = signalAnnotation;
  }


  public VariantAnnotation start(Integer start) {
    this.start = start;
    return this;
  }

   /**
   * Start position
   * @return start
  **/
  @javax.annotation.Nullable
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }


  public VariantAnnotation strand(Integer strand) {
    this.strand = strand;
    return this;
  }

   /**
   * Strand (negative or positive)
   * @return strand
  **/
  @javax.annotation.Nullable
  public Integer getStrand() {
    return strand;
  }

  public void setStrand(Integer strand) {
    this.strand = strand;
  }


  public VariantAnnotation successfullyAnnotated(Boolean successfullyAnnotated) {
    this.successfullyAnnotated = successfullyAnnotated;
    return this;
  }

   /**
   * Status flag indicating whether variant was succesfully annotated
   * @return successfullyAnnotated
  **/
  @javax.annotation.Nullable
  public Boolean getSuccessfullyAnnotated() {
    return successfullyAnnotated;
  }

  public void setSuccessfullyAnnotated(Boolean successfullyAnnotated) {
    this.successfullyAnnotated = successfullyAnnotated;
  }


  public VariantAnnotation transcriptConsequences(List<TranscriptConsequence> transcriptConsequences) {
    this.transcriptConsequences = transcriptConsequences;
    return this;
  }

  public VariantAnnotation addTranscriptConsequencesItem(TranscriptConsequence transcriptConsequencesItem) {
    if (this.transcriptConsequences == null) {
      this.transcriptConsequences = new ArrayList<>();
    }
    this.transcriptConsequences.add(transcriptConsequencesItem);
    return this;
  }

   /**
   * List of transcripts
   * @return transcriptConsequences
  **/
  @javax.annotation.Nullable
  public List<TranscriptConsequence> getTranscriptConsequences() {
    return transcriptConsequences;
  }

  public void setTranscriptConsequences(List<TranscriptConsequence> transcriptConsequences) {
    this.transcriptConsequences = transcriptConsequences;
  }


  public VariantAnnotation variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Variant key
   * @return variant
  **/
  @javax.annotation.Nonnull
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VariantAnnotation variantAnnotation = (VariantAnnotation) o;
    return Objects.equals(this.alleleString, variantAnnotation.alleleString) &&
        Objects.equals(this.annotationJSON, variantAnnotation.annotationJSON) &&
        Objects.equals(this.annotationSummary, variantAnnotation.annotationSummary) &&
        Objects.equals(this.assemblyName, variantAnnotation.assemblyName) &&
        Objects.equals(this.clinvar, variantAnnotation.clinvar) &&
        Objects.equals(this.colocatedVariants, variantAnnotation.colocatedVariants) &&
        Objects.equals(this.end, variantAnnotation.end) &&
        Objects.equals(this.errorMessage, variantAnnotation.errorMessage) &&
        Objects.equals(this.genomicLocationExplanation, variantAnnotation.genomicLocationExplanation) &&
        Objects.equals(this.hgvsg, variantAnnotation.hgvsg) &&
        Objects.equals(this.hotspots, variantAnnotation.hotspots) &&
        Objects.equals(this.id, variantAnnotation.id) &&
        Objects.equals(this.intergenicConsequences, variantAnnotation.intergenicConsequences) &&
        Objects.equals(this.mostSevereConsequence, variantAnnotation.mostSevereConsequence) &&
        Objects.equals(this.mutationAssessor, variantAnnotation.mutationAssessor) &&
        Objects.equals(this.myVariantInfo, variantAnnotation.myVariantInfo) &&
        Objects.equals(this.nucleotideContext, variantAnnotation.nucleotideContext) &&
        Objects.equals(this.oncokb, variantAnnotation.oncokb) &&
        Objects.equals(this.originalVariantQuery, variantAnnotation.originalVariantQuery) &&
        Objects.equals(this.ptms, variantAnnotation.ptms) &&
        Objects.equals(this.seqRegionName, variantAnnotation.seqRegionName) &&
        Objects.equals(this.signalAnnotation, variantAnnotation.signalAnnotation) &&
        Objects.equals(this.start, variantAnnotation.start) &&
        Objects.equals(this.strand, variantAnnotation.strand) &&
        Objects.equals(this.successfullyAnnotated, variantAnnotation.successfullyAnnotated) &&
        Objects.equals(this.transcriptConsequences, variantAnnotation.transcriptConsequences) &&
        Objects.equals(this.variant, variantAnnotation.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alleleString, annotationJSON, annotationSummary, assemblyName, clinvar, colocatedVariants, end, errorMessage, genomicLocationExplanation, hgvsg, hotspots, id, intergenicConsequences, mostSevereConsequence, mutationAssessor, myVariantInfo, nucleotideContext, oncokb, originalVariantQuery, ptms, seqRegionName, signalAnnotation, start, strand, successfullyAnnotated, transcriptConsequences, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VariantAnnotation {\n");
    sb.append("    alleleString: ").append(toIndentedString(alleleString)).append("\n");
    sb.append("    annotationJSON: ").append(toIndentedString(annotationJSON)).append("\n");
    sb.append("    annotationSummary: ").append(toIndentedString(annotationSummary)).append("\n");
    sb.append("    assemblyName: ").append(toIndentedString(assemblyName)).append("\n");
    sb.append("    clinvar: ").append(toIndentedString(clinvar)).append("\n");
    sb.append("    colocatedVariants: ").append(toIndentedString(colocatedVariants)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    genomicLocationExplanation: ").append(toIndentedString(genomicLocationExplanation)).append("\n");
    sb.append("    hgvsg: ").append(toIndentedString(hgvsg)).append("\n");
    sb.append("    hotspots: ").append(toIndentedString(hotspots)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intergenicConsequences: ").append(toIndentedString(intergenicConsequences)).append("\n");
    sb.append("    mostSevereConsequence: ").append(toIndentedString(mostSevereConsequence)).append("\n");
    sb.append("    mutationAssessor: ").append(toIndentedString(mutationAssessor)).append("\n");
    sb.append("    myVariantInfo: ").append(toIndentedString(myVariantInfo)).append("\n");
    sb.append("    nucleotideContext: ").append(toIndentedString(nucleotideContext)).append("\n");
    sb.append("    oncokb: ").append(toIndentedString(oncokb)).append("\n");
    sb.append("    originalVariantQuery: ").append(toIndentedString(originalVariantQuery)).append("\n");
    sb.append("    ptms: ").append(toIndentedString(ptms)).append("\n");
    sb.append("    seqRegionName: ").append(toIndentedString(seqRegionName)).append("\n");
    sb.append("    signalAnnotation: ").append(toIndentedString(signalAnnotation)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    strand: ").append(toIndentedString(strand)).append("\n");
    sb.append("    successfullyAnnotated: ").append(toIndentedString(successfullyAnnotated)).append("\n");
    sb.append("    transcriptConsequences: ").append(toIndentedString(transcriptConsequences)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allele_string");
    openapiFields.add("annotationJSON");
    openapiFields.add("annotation_summary");
    openapiFields.add("assembly_name");
    openapiFields.add("clinvar");
    openapiFields.add("colocatedVariants");
    openapiFields.add("end");
    openapiFields.add("errorMessage");
    openapiFields.add("genomicLocationExplanation");
    openapiFields.add("hgvsg");
    openapiFields.add("hotspots");
    openapiFields.add("id");
    openapiFields.add("intergenic_consequences");
    openapiFields.add("most_severe_consequence");
    openapiFields.add("mutation_assessor");
    openapiFields.add("my_variant_info");
    openapiFields.add("nucleotide_context");
    openapiFields.add("oncokb");
    openapiFields.add("originalVariantQuery");
    openapiFields.add("ptms");
    openapiFields.add("seq_region_name");
    openapiFields.add("signalAnnotation");
    openapiFields.add("start");
    openapiFields.add("strand");
    openapiFields.add("successfully_annotated");
    openapiFields.add("transcript_consequences");
    openapiFields.add("variant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    //openapiRequiredFields.add("intergenic_consequences");
    openapiRequiredFields.add("originalVariantQuery");
    openapiRequiredFields.add("variant");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VariantAnnotation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VariantAnnotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VariantAnnotation is not found in the empty JSON string", VariantAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VariantAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VariantAnnotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VariantAnnotation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allele_string") != null && !jsonObj.get("allele_string").isJsonNull()) && !jsonObj.get("allele_string").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allele_string` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allele_string").toString()));
      }
      if ((jsonObj.get("annotationJSON") != null && !jsonObj.get("annotationJSON").isJsonNull()) && !jsonObj.get("annotationJSON").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationJSON` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotationJSON").toString()));
      }
      // validate the optional field `annotation_summary`
      if (jsonObj.get("annotation_summary") != null && !jsonObj.get("annotation_summary").isJsonNull()) {
        VariantAnnotationSummary.validateJsonElement(jsonObj.get("annotation_summary"));
      }
      if ((jsonObj.get("assembly_name") != null && !jsonObj.get("assembly_name").isJsonNull()) && !jsonObj.get("assembly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assembly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assembly_name").toString()));
      }
      // validate the optional field `clinvar`
      if (jsonObj.get("clinvar") != null && !jsonObj.get("clinvar").isJsonNull()) {
        ClinvarAnnotation.validateJsonElement(jsonObj.get("clinvar"));
      }
      if (jsonObj.get("colocatedVariants") != null && !jsonObj.get("colocatedVariants").isJsonNull()) {
        JsonArray jsonArraycolocatedVariants = jsonObj.getAsJsonArray("colocatedVariants");
        if (jsonArraycolocatedVariants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("colocatedVariants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `colocatedVariants` to be an array in the JSON string but got `%s`", jsonObj.get("colocatedVariants").toString()));
          }

          // validate the optional field `colocatedVariants` (array)
          for (int i = 0; i < jsonArraycolocatedVariants.size(); i++) {
            ColocatedVariant.validateJsonElement(jsonArraycolocatedVariants.get(i));
          };
        }
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("genomicLocationExplanation") != null && !jsonObj.get("genomicLocationExplanation").isJsonNull()) && !jsonObj.get("genomicLocationExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genomicLocationExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genomicLocationExplanation").toString()));
      }
      if ((jsonObj.get("hgvsg") != null && !jsonObj.get("hgvsg").isJsonNull()) && !jsonObj.get("hgvsg").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvsg` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hgvsg").toString()));
      }
      // validate the optional field `hotspots`
      if (jsonObj.get("hotspots") != null && !jsonObj.get("hotspots").isJsonNull()) {
        HotspotAnnotation.validateJsonElement(jsonObj.get("hotspots"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the json data is an array
      if (jsonObj.get("intergenic_consequences") != null) {
        if (!jsonObj.get("intergenic_consequences").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `intergenic_consequences` to be an array in the JSON string but got `%s`", jsonObj.get("intergenic_consequences").toString()));
        }
  
        JsonArray jsonArrayintergenicConsequences = jsonObj.getAsJsonArray("intergenic_consequences");
        // validate the required field `intergenic_consequences` (array)
        for (int i = 0; i < jsonArrayintergenicConsequences.size(); i++) {
          IntergenicConsequences.validateJsonElement(jsonArrayintergenicConsequences.get(i));
        };
      }
      if ((jsonObj.get("most_severe_consequence") != null && !jsonObj.get("most_severe_consequence").isJsonNull()) && !jsonObj.get("most_severe_consequence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `most_severe_consequence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("most_severe_consequence").toString()));
      }
      // validate the optional field `mutation_assessor`
      if (jsonObj.get("mutation_assessor") != null && !jsonObj.get("mutation_assessor").isJsonNull()) {
        MutationAssessorAnnotation.validateJsonElement(jsonObj.get("mutation_assessor"));
      }
      // validate the optional field `my_variant_info`
      if (jsonObj.get("my_variant_info") != null && !jsonObj.get("my_variant_info").isJsonNull()) {
        MyVariantInfoAnnotation.validateJsonElement(jsonObj.get("my_variant_info"));
      }
      // validate the optional field `nucleotide_context`
      if (jsonObj.get("nucleotide_context") != null && !jsonObj.get("nucleotide_context").isJsonNull()) {
        NucleotideContextAnnotation.validateJsonElement(jsonObj.get("nucleotide_context"));
      }
      // validate the optional field `oncokb`
      if (jsonObj.get("oncokb") != null && !jsonObj.get("oncokb").isJsonNull()) {
        OncokbAnnotation.validateJsonElement(jsonObj.get("oncokb"));
      }
      if (!jsonObj.get("originalVariantQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalVariantQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalVariantQuery").toString()));
      }
      // validate the optional field `ptms`
      if (jsonObj.get("ptms") != null && !jsonObj.get("ptms").isJsonNull()) {
        PtmAnnotation.validateJsonElement(jsonObj.get("ptms"));
      }
      if ((jsonObj.get("seq_region_name") != null && !jsonObj.get("seq_region_name").isJsonNull()) && !jsonObj.get("seq_region_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seq_region_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seq_region_name").toString()));
      }
      // validate the optional field `signalAnnotation`
      if (jsonObj.get("signalAnnotation") != null && !jsonObj.get("signalAnnotation").isJsonNull()) {
        SignalAnnotation.validateJsonElement(jsonObj.get("signalAnnotation"));
      }
      if (jsonObj.get("transcript_consequences") != null && !jsonObj.get("transcript_consequences").isJsonNull()) {
        JsonArray jsonArraytranscriptConsequences = jsonObj.getAsJsonArray("transcript_consequences");
        if (jsonArraytranscriptConsequences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transcript_consequences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transcript_consequences` to be an array in the JSON string but got `%s`", jsonObj.get("transcript_consequences").toString()));
          }

          // validate the optional field `transcript_consequences` (array)
          for (int i = 0; i < jsonArraytranscriptConsequences.size(); i++) {
            TranscriptConsequence.validateJsonElement(jsonArraytranscriptConsequences.get(i));
          };
        }
      }
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VariantAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VariantAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VariantAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VariantAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<VariantAnnotation>() {
           @Override
           public void write(JsonWriter out, VariantAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VariantAnnotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VariantAnnotation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VariantAnnotation
  * @throws IOException if the JSON string is invalid with respect to VariantAnnotation
  */
  public static VariantAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VariantAnnotation.class);
  }

 /**
  * Convert an instance of VariantAnnotation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

