/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Homozygotes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class Homozygotes {
  public static final String SERIALIZED_NAME_HOM = "hom";
  @SerializedName(SERIALIZED_NAME_HOM)
  private Integer hom;

  public static final String SERIALIZED_NAME_HOM_AFR = "hom_afr";
  @SerializedName(SERIALIZED_NAME_HOM_AFR)
  private Integer homAfr;

  public static final String SERIALIZED_NAME_HOM_AMR = "hom_amr";
  @SerializedName(SERIALIZED_NAME_HOM_AMR)
  private Integer homAmr;

  public static final String SERIALIZED_NAME_HOM_ASJ = "hom_asj";
  @SerializedName(SERIALIZED_NAME_HOM_ASJ)
  private Integer homAsj;

  public static final String SERIALIZED_NAME_HOM_EAS = "hom_eas";
  @SerializedName(SERIALIZED_NAME_HOM_EAS)
  private Integer homEas;

  public static final String SERIALIZED_NAME_HOM_FIN = "hom_fin";
  @SerializedName(SERIALIZED_NAME_HOM_FIN)
  private Integer homFin;

  public static final String SERIALIZED_NAME_HOM_NFE = "hom_nfe";
  @SerializedName(SERIALIZED_NAME_HOM_NFE)
  private Integer homNfe;

  public static final String SERIALIZED_NAME_HOM_OTH = "hom_oth";
  @SerializedName(SERIALIZED_NAME_HOM_OTH)
  private Integer homOth;

  public static final String SERIALIZED_NAME_HOM_SAS = "hom_sas";
  @SerializedName(SERIALIZED_NAME_HOM_SAS)
  private Integer homSas;

  public Homozygotes() {
  }

  public Homozygotes hom(Integer hom) {
    this.hom = hom;
    return this;
  }

   /**
   * Get hom
   * @return hom
  **/
  @javax.annotation.Nonnull
  public Integer getHom() {
    return hom;
  }

  public void setHom(Integer hom) {
    this.hom = hom;
  }


  public Homozygotes homAfr(Integer homAfr) {
    this.homAfr = homAfr;
    return this;
  }

   /**
   * Get homAfr
   * @return homAfr
  **/
  @javax.annotation.Nonnull
  public Integer getHomAfr() {
    return homAfr;
  }

  public void setHomAfr(Integer homAfr) {
    this.homAfr = homAfr;
  }


  public Homozygotes homAmr(Integer homAmr) {
    this.homAmr = homAmr;
    return this;
  }

   /**
   * Get homAmr
   * @return homAmr
  **/
  @javax.annotation.Nonnull
  public Integer getHomAmr() {
    return homAmr;
  }

  public void setHomAmr(Integer homAmr) {
    this.homAmr = homAmr;
  }


  public Homozygotes homAsj(Integer homAsj) {
    this.homAsj = homAsj;
    return this;
  }

   /**
   * Get homAsj
   * @return homAsj
  **/
  @javax.annotation.Nonnull
  public Integer getHomAsj() {
    return homAsj;
  }

  public void setHomAsj(Integer homAsj) {
    this.homAsj = homAsj;
  }


  public Homozygotes homEas(Integer homEas) {
    this.homEas = homEas;
    return this;
  }

   /**
   * Get homEas
   * @return homEas
  **/
  @javax.annotation.Nonnull
  public Integer getHomEas() {
    return homEas;
  }

  public void setHomEas(Integer homEas) {
    this.homEas = homEas;
  }


  public Homozygotes homFin(Integer homFin) {
    this.homFin = homFin;
    return this;
  }

   /**
   * Get homFin
   * @return homFin
  **/
  @javax.annotation.Nonnull
  public Integer getHomFin() {
    return homFin;
  }

  public void setHomFin(Integer homFin) {
    this.homFin = homFin;
  }


  public Homozygotes homNfe(Integer homNfe) {
    this.homNfe = homNfe;
    return this;
  }

   /**
   * Get homNfe
   * @return homNfe
  **/
  @javax.annotation.Nonnull
  public Integer getHomNfe() {
    return homNfe;
  }

  public void setHomNfe(Integer homNfe) {
    this.homNfe = homNfe;
  }


  public Homozygotes homOth(Integer homOth) {
    this.homOth = homOth;
    return this;
  }

   /**
   * Get homOth
   * @return homOth
  **/
  @javax.annotation.Nonnull
  public Integer getHomOth() {
    return homOth;
  }

  public void setHomOth(Integer homOth) {
    this.homOth = homOth;
  }


  public Homozygotes homSas(Integer homSas) {
    this.homSas = homSas;
    return this;
  }

   /**
   * Get homSas
   * @return homSas
  **/
  @javax.annotation.Nonnull
  public Integer getHomSas() {
    return homSas;
  }

  public void setHomSas(Integer homSas) {
    this.homSas = homSas;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Homozygotes homozygotes = (Homozygotes) o;
    return Objects.equals(this.hom, homozygotes.hom) &&
        Objects.equals(this.homAfr, homozygotes.homAfr) &&
        Objects.equals(this.homAmr, homozygotes.homAmr) &&
        Objects.equals(this.homAsj, homozygotes.homAsj) &&
        Objects.equals(this.homEas, homozygotes.homEas) &&
        Objects.equals(this.homFin, homozygotes.homFin) &&
        Objects.equals(this.homNfe, homozygotes.homNfe) &&
        Objects.equals(this.homOth, homozygotes.homOth) &&
        Objects.equals(this.homSas, homozygotes.homSas);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hom, homAfr, homAmr, homAsj, homEas, homFin, homNfe, homOth, homSas);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Homozygotes {\n");
    sb.append("    hom: ").append(toIndentedString(hom)).append("\n");
    sb.append("    homAfr: ").append(toIndentedString(homAfr)).append("\n");
    sb.append("    homAmr: ").append(toIndentedString(homAmr)).append("\n");
    sb.append("    homAsj: ").append(toIndentedString(homAsj)).append("\n");
    sb.append("    homEas: ").append(toIndentedString(homEas)).append("\n");
    sb.append("    homFin: ").append(toIndentedString(homFin)).append("\n");
    sb.append("    homNfe: ").append(toIndentedString(homNfe)).append("\n");
    sb.append("    homOth: ").append(toIndentedString(homOth)).append("\n");
    sb.append("    homSas: ").append(toIndentedString(homSas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hom");
    openapiFields.add("hom_afr");
    openapiFields.add("hom_amr");
    openapiFields.add("hom_asj");
    openapiFields.add("hom_eas");
    openapiFields.add("hom_fin");
    openapiFields.add("hom_nfe");
    openapiFields.add("hom_oth");
    openapiFields.add("hom_sas");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hom");
    openapiRequiredFields.add("hom_afr");
    openapiRequiredFields.add("hom_amr");
    openapiRequiredFields.add("hom_asj");
    openapiRequiredFields.add("hom_eas");
    openapiRequiredFields.add("hom_fin");
    openapiRequiredFields.add("hom_nfe");
    openapiRequiredFields.add("hom_oth");
    openapiRequiredFields.add("hom_sas");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Homozygotes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Homozygotes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Homozygotes is not found in the empty JSON string", Homozygotes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Homozygotes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Homozygotes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Homozygotes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Homozygotes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Homozygotes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Homozygotes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Homozygotes.class));

       return (TypeAdapter<T>) new TypeAdapter<Homozygotes>() {
           @Override
           public void write(JsonWriter out, Homozygotes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Homozygotes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Homozygotes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Homozygotes
  * @throws IOException if the JSON string is invalid with respect to Homozygotes
  */
  public static Homozygotes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Homozygotes.class);
  }

 /**
  * Convert an instance of Homozygotes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

