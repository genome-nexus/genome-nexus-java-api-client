/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.genome_nexus.client.Cosmic;
import org.genome_nexus.client.Dbsnp;
import org.genome_nexus.client.Gnomad;
import org.genome_nexus.client.Mutdb;
import org.genome_nexus.client.MyVariantInfoClinVar;
import org.genome_nexus.client.Snpeff;
import org.genome_nexus.client.Vcf;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * MyVariantInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class MyVariantInfo {
  public static final String SERIALIZED_NAME_CLIN_VAR = "clinVar";
  @SerializedName(SERIALIZED_NAME_CLIN_VAR)
  private MyVariantInfoClinVar clinVar;

  public static final String SERIALIZED_NAME_COSMIC = "cosmic";
  @SerializedName(SERIALIZED_NAME_COSMIC)
  private Cosmic cosmic;

  public static final String SERIALIZED_NAME_DBSNP = "dbsnp";
  @SerializedName(SERIALIZED_NAME_DBSNP)
  private Dbsnp dbsnp;

  public static final String SERIALIZED_NAME_GNOMAD_EXOME = "gnomadExome";
  @SerializedName(SERIALIZED_NAME_GNOMAD_EXOME)
  private Gnomad gnomadExome;

  public static final String SERIALIZED_NAME_GNOMAD_GENOME = "gnomadGenome";
  @SerializedName(SERIALIZED_NAME_GNOMAD_GENOME)
  private Gnomad gnomadGenome;

  public static final String SERIALIZED_NAME_HGVS = "hgvs";
  @SerializedName(SERIALIZED_NAME_HGVS)
  private String hgvs;

  public static final String SERIALIZED_NAME_MUTDB = "mutdb";
  @SerializedName(SERIALIZED_NAME_MUTDB)
  private Mutdb mutdb;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SNPEFF = "snpeff";
  @SerializedName(SERIALIZED_NAME_SNPEFF)
  private Snpeff snpeff;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public static final String SERIALIZED_NAME_VCF = "vcf";
  @SerializedName(SERIALIZED_NAME_VCF)
  private Vcf vcf;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public MyVariantInfo() {
  }

  public MyVariantInfo clinVar(MyVariantInfoClinVar clinVar) {
    this.clinVar = clinVar;
    return this;
  }

   /**
   * Get clinVar
   * @return clinVar
  **/
  @javax.annotation.Nullable
  public MyVariantInfoClinVar getClinVar() {
    return clinVar;
  }

  public void setClinVar(MyVariantInfoClinVar clinVar) {
    this.clinVar = clinVar;
  }


  public MyVariantInfo cosmic(Cosmic cosmic) {
    this.cosmic = cosmic;
    return this;
  }

   /**
   * Get cosmic
   * @return cosmic
  **/
  @javax.annotation.Nullable
  public Cosmic getCosmic() {
    return cosmic;
  }

  public void setCosmic(Cosmic cosmic) {
    this.cosmic = cosmic;
  }


  public MyVariantInfo dbsnp(Dbsnp dbsnp) {
    this.dbsnp = dbsnp;
    return this;
  }

   /**
   * Get dbsnp
   * @return dbsnp
  **/
  @javax.annotation.Nullable
  public Dbsnp getDbsnp() {
    return dbsnp;
  }

  public void setDbsnp(Dbsnp dbsnp) {
    this.dbsnp = dbsnp;
  }


  public MyVariantInfo gnomadExome(Gnomad gnomadExome) {
    this.gnomadExome = gnomadExome;
    return this;
  }

   /**
   * Get gnomadExome
   * @return gnomadExome
  **/
  @javax.annotation.Nullable
  public Gnomad getGnomadExome() {
    return gnomadExome;
  }

  public void setGnomadExome(Gnomad gnomadExome) {
    this.gnomadExome = gnomadExome;
  }


  public MyVariantInfo gnomadGenome(Gnomad gnomadGenome) {
    this.gnomadGenome = gnomadGenome;
    return this;
  }

   /**
   * Get gnomadGenome
   * @return gnomadGenome
  **/
  @javax.annotation.Nullable
  public Gnomad getGnomadGenome() {
    return gnomadGenome;
  }

  public void setGnomadGenome(Gnomad gnomadGenome) {
    this.gnomadGenome = gnomadGenome;
  }


  public MyVariantInfo hgvs(String hgvs) {
    this.hgvs = hgvs;
    return this;
  }

   /**
   * hgvs
   * @return hgvs
  **/
  @javax.annotation.Nullable
  public String getHgvs() {
    return hgvs;
  }

  public void setHgvs(String hgvs) {
    this.hgvs = hgvs;
  }


  public MyVariantInfo mutdb(Mutdb mutdb) {
    this.mutdb = mutdb;
    return this;
  }

   /**
   * Get mutdb
   * @return mutdb
  **/
  @javax.annotation.Nullable
  public Mutdb getMutdb() {
    return mutdb;
  }

  public void setMutdb(Mutdb mutdb) {
    this.mutdb = mutdb;
  }


  public MyVariantInfo query(String query) {
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public MyVariantInfo snpeff(Snpeff snpeff) {
    this.snpeff = snpeff;
    return this;
  }

   /**
   * Get snpeff
   * @return snpeff
  **/
  @javax.annotation.Nullable
  public Snpeff getSnpeff() {
    return snpeff;
  }

  public void setSnpeff(Snpeff snpeff) {
    this.snpeff = snpeff;
  }


  public MyVariantInfo variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * variant
   * @return variant
  **/
  @javax.annotation.Nullable
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }


  public MyVariantInfo vcf(Vcf vcf) {
    this.vcf = vcf;
    return this;
  }

   /**
   * Get vcf
   * @return vcf
  **/
  @javax.annotation.Nullable
  public Vcf getVcf() {
    return vcf;
  }

  public void setVcf(Vcf vcf) {
    this.vcf = vcf;
  }


  public MyVariantInfo version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * version
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MyVariantInfo myVariantInfo = (MyVariantInfo) o;
    return Objects.equals(this.clinVar, myVariantInfo.clinVar) &&
        Objects.equals(this.cosmic, myVariantInfo.cosmic) &&
        Objects.equals(this.dbsnp, myVariantInfo.dbsnp) &&
        Objects.equals(this.gnomadExome, myVariantInfo.gnomadExome) &&
        Objects.equals(this.gnomadGenome, myVariantInfo.gnomadGenome) &&
        Objects.equals(this.hgvs, myVariantInfo.hgvs) &&
        Objects.equals(this.mutdb, myVariantInfo.mutdb) &&
        Objects.equals(this.query, myVariantInfo.query) &&
        Objects.equals(this.snpeff, myVariantInfo.snpeff) &&
        Objects.equals(this.variant, myVariantInfo.variant) &&
        Objects.equals(this.vcf, myVariantInfo.vcf) &&
        Objects.equals(this.version, myVariantInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clinVar, cosmic, dbsnp, gnomadExome, gnomadGenome, hgvs, mutdb, query, snpeff, variant, vcf, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MyVariantInfo {\n");
    sb.append("    clinVar: ").append(toIndentedString(clinVar)).append("\n");
    sb.append("    cosmic: ").append(toIndentedString(cosmic)).append("\n");
    sb.append("    dbsnp: ").append(toIndentedString(dbsnp)).append("\n");
    sb.append("    gnomadExome: ").append(toIndentedString(gnomadExome)).append("\n");
    sb.append("    gnomadGenome: ").append(toIndentedString(gnomadGenome)).append("\n");
    sb.append("    hgvs: ").append(toIndentedString(hgvs)).append("\n");
    sb.append("    mutdb: ").append(toIndentedString(mutdb)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    snpeff: ").append(toIndentedString(snpeff)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    vcf: ").append(toIndentedString(vcf)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clinVar");
    openapiFields.add("cosmic");
    openapiFields.add("dbsnp");
    openapiFields.add("gnomadExome");
    openapiFields.add("gnomadGenome");
    openapiFields.add("hgvs");
    openapiFields.add("mutdb");
    openapiFields.add("query");
    openapiFields.add("snpeff");
    openapiFields.add("variant");
    openapiFields.add("vcf");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MyVariantInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MyVariantInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MyVariantInfo is not found in the empty JSON string", MyVariantInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MyVariantInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MyVariantInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clinVar`
      if (jsonObj.get("clinVar") != null && !jsonObj.get("clinVar").isJsonNull()) {
        MyVariantInfoClinVar.validateJsonElement(jsonObj.get("clinVar"));
      }
      // validate the optional field `cosmic`
      if (jsonObj.get("cosmic") != null && !jsonObj.get("cosmic").isJsonNull()) {
        Cosmic.validateJsonElement(jsonObj.get("cosmic"));
      }
      // validate the optional field `dbsnp`
      if (jsonObj.get("dbsnp") != null && !jsonObj.get("dbsnp").isJsonNull()) {
        Dbsnp.validateJsonElement(jsonObj.get("dbsnp"));
      }
      // validate the optional field `gnomadExome`
      if (jsonObj.get("gnomadExome") != null && !jsonObj.get("gnomadExome").isJsonNull()) {
        Gnomad.validateJsonElement(jsonObj.get("gnomadExome"));
      }
      // validate the optional field `gnomadGenome`
      if (jsonObj.get("gnomadGenome") != null && !jsonObj.get("gnomadGenome").isJsonNull()) {
        Gnomad.validateJsonElement(jsonObj.get("gnomadGenome"));
      }
      if ((jsonObj.get("hgvs") != null && !jsonObj.get("hgvs").isJsonNull()) && !jsonObj.get("hgvs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hgvs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hgvs").toString()));
      }
      // validate the optional field `mutdb`
      if (jsonObj.get("mutdb") != null && !jsonObj.get("mutdb").isJsonNull()) {
        Mutdb.validateJsonElement(jsonObj.get("mutdb"));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // validate the optional field `snpeff`
      if (jsonObj.get("snpeff") != null && !jsonObj.get("snpeff").isJsonNull()) {
        Snpeff.validateJsonElement(jsonObj.get("snpeff"));
      }
      if ((jsonObj.get("variant") != null && !jsonObj.get("variant").isJsonNull()) && !jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      // validate the optional field `vcf`
      if (jsonObj.get("vcf") != null && !jsonObj.get("vcf").isJsonNull()) {
        Vcf.validateJsonElement(jsonObj.get("vcf"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MyVariantInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MyVariantInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MyVariantInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MyVariantInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<MyVariantInfo>() {
           @Override
           public void write(JsonWriter out, MyVariantInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MyVariantInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MyVariantInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MyVariantInfo
  * @throws IOException if the JSON string is invalid with respect to MyVariantInfo
  */
  public static MyVariantInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MyVariantInfo.class);
  }

 /**
  * Convert an instance of MyVariantInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

