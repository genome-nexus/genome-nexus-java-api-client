/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.SignalMutation;
import org.genome_nexus.client.SignalMutationFilter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SignalMutationControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SignalMutationControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SignalMutationControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchSignalMutationsByHgvsgGETUsingGET
     * @param variant A variant. For example 13:g.32890665G&gt;A (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSignalMutationsByHgvsgGETUsingGETCall(String variant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/signal/mutation/hgvs/{variant}"
            .replace("{" + "variant" + "}", localVarApiClient.escapeString(variant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSignalMutationsByHgvsgGETUsingGETValidateBeforeCall(String variant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variant' is set
        if (variant == null) {
            throw new ApiException("Missing the required parameter 'variant' when calling fetchSignalMutationsByHgvsgGETUsingGET(Async)");
        }

        return fetchSignalMutationsByHgvsgGETUsingGETCall(variant, _callback);

    }

    /**
     * Retrieves SignalDB mutations by hgvgs variant
     * 
     * @param variant A variant. For example 13:g.32890665G&gt;A (required)
     * @return List&lt;SignalMutation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SignalMutation> fetchSignalMutationsByHgvsgGETUsingGET(String variant) throws ApiException {
        ApiResponse<List<SignalMutation>> localVarResp = fetchSignalMutationsByHgvsgGETUsingGETWithHttpInfo(variant);
        return localVarResp.getData();
    }

    /**
     * Retrieves SignalDB mutations by hgvgs variant
     * 
     * @param variant A variant. For example 13:g.32890665G&gt;A (required)
     * @return ApiResponse&lt;List&lt;SignalMutation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SignalMutation>> fetchSignalMutationsByHgvsgGETUsingGETWithHttpInfo(String variant) throws ApiException {
        okhttp3.Call localVarCall = fetchSignalMutationsByHgvsgGETUsingGETValidateBeforeCall(variant, null);
        Type localVarReturnType = new TypeToken<List<SignalMutation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves SignalDB mutations by hgvgs variant (asynchronously)
     * 
     * @param variant A variant. For example 13:g.32890665G&gt;A (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSignalMutationsByHgvsgGETUsingGETAsync(String variant, final ApiCallback<List<SignalMutation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSignalMutationsByHgvsgGETUsingGETValidateBeforeCall(variant, _callback);
        Type localVarReturnType = new TypeToken<List<SignalMutation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSignalMutationsByHugoSymbolGETUsingGET
     * @param hugoGeneSymbol Hugo Symbol. For example BRCA1 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSignalMutationsByHugoSymbolGETUsingGETCall(String hugoGeneSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/signal/mutation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hugoGeneSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoGeneSymbol", hugoGeneSymbol));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSignalMutationsByHugoSymbolGETUsingGETValidateBeforeCall(String hugoGeneSymbol, final ApiCallback _callback) throws ApiException {
        return fetchSignalMutationsByHugoSymbolGETUsingGETCall(hugoGeneSymbol, _callback);

    }

    /**
     * Retrieves SignalDB mutations by Hugo Gene Symbol
     * 
     * @param hugoGeneSymbol Hugo Symbol. For example BRCA1 (optional)
     * @return List&lt;SignalMutation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SignalMutation> fetchSignalMutationsByHugoSymbolGETUsingGET(String hugoGeneSymbol) throws ApiException {
        ApiResponse<List<SignalMutation>> localVarResp = fetchSignalMutationsByHugoSymbolGETUsingGETWithHttpInfo(hugoGeneSymbol);
        return localVarResp.getData();
    }

    /**
     * Retrieves SignalDB mutations by Hugo Gene Symbol
     * 
     * @param hugoGeneSymbol Hugo Symbol. For example BRCA1 (optional)
     * @return ApiResponse&lt;List&lt;SignalMutation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SignalMutation>> fetchSignalMutationsByHugoSymbolGETUsingGETWithHttpInfo(String hugoGeneSymbol) throws ApiException {
        okhttp3.Call localVarCall = fetchSignalMutationsByHugoSymbolGETUsingGETValidateBeforeCall(hugoGeneSymbol, null);
        Type localVarReturnType = new TypeToken<List<SignalMutation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves SignalDB mutations by Hugo Gene Symbol (asynchronously)
     * 
     * @param hugoGeneSymbol Hugo Symbol. For example BRCA1 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSignalMutationsByHugoSymbolGETUsingGETAsync(String hugoGeneSymbol, final ApiCallback<List<SignalMutation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSignalMutationsByHugoSymbolGETUsingGETValidateBeforeCall(hugoGeneSymbol, _callback);
        Type localVarReturnType = new TypeToken<List<SignalMutation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSignalMutationsByMutationFilterPOSTUsingPOST
     * @param mutationFilter List of Hugo Gene Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSignalMutationsByMutationFilterPOSTUsingPOSTCall(SignalMutationFilter mutationFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mutationFilter;

        // create path and map variables
        String localVarPath = "/signal/mutation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSignalMutationsByMutationFilterPOSTUsingPOSTValidateBeforeCall(SignalMutationFilter mutationFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mutationFilter' is set
        if (mutationFilter == null) {
            throw new ApiException("Missing the required parameter 'mutationFilter' when calling fetchSignalMutationsByMutationFilterPOSTUsingPOST(Async)");
        }

        return fetchSignalMutationsByMutationFilterPOSTUsingPOSTCall(mutationFilter, _callback);

    }

    /**
     * Retrieves SignalDB mutations by Mutation Filter
     * 
     * @param mutationFilter List of Hugo Gene Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;] (required)
     * @return List&lt;SignalMutation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SignalMutation> fetchSignalMutationsByMutationFilterPOSTUsingPOST(SignalMutationFilter mutationFilter) throws ApiException {
        ApiResponse<List<SignalMutation>> localVarResp = fetchSignalMutationsByMutationFilterPOSTUsingPOSTWithHttpInfo(mutationFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieves SignalDB mutations by Mutation Filter
     * 
     * @param mutationFilter List of Hugo Gene Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;] (required)
     * @return ApiResponse&lt;List&lt;SignalMutation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SignalMutation>> fetchSignalMutationsByMutationFilterPOSTUsingPOSTWithHttpInfo(SignalMutationFilter mutationFilter) throws ApiException {
        okhttp3.Call localVarCall = fetchSignalMutationsByMutationFilterPOSTUsingPOSTValidateBeforeCall(mutationFilter, null);
        Type localVarReturnType = new TypeToken<List<SignalMutation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves SignalDB mutations by Mutation Filter (asynchronously)
     * 
     * @param mutationFilter List of Hugo Gene Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSignalMutationsByMutationFilterPOSTUsingPOSTAsync(SignalMutationFilter mutationFilter, final ApiCallback<List<SignalMutation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSignalMutationsByMutationFilterPOSTUsingPOSTValidateBeforeCall(mutationFilter, _callback);
        Type localVarReturnType = new TypeToken<List<SignalMutation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
