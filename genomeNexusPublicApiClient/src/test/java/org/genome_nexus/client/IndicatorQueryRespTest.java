/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.Implication;
import org.genome_nexus.client.IndicatorQueryTreatment;
import org.genome_nexus.client.MutationEffectResp;
import org.genome_nexus.client.Query;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for IndicatorQueryResp
 */
public class IndicatorQueryRespTest {
    private final IndicatorQueryResp model = new IndicatorQueryResp();

    /**
     * Model tests for IndicatorQueryResp
     */
    @Test
    public void testIndicatorQueryResp() {
        // TODO: test IndicatorQueryResp
    }

    /**
     * Test the property 'alleleExist'
     */
    @Test
    public void alleleExistTest() {
        // TODO: test alleleExist
    }

    /**
     * Test the property 'dataVersion'
     */
    @Test
    public void dataVersionTest() {
        // TODO: test dataVersion
    }

    /**
     * Test the property 'diagnosticImplications'
     */
    @Test
    public void diagnosticImplicationsTest() {
        // TODO: test diagnosticImplications
    }

    /**
     * Test the property 'diagnosticSummary'
     */
    @Test
    public void diagnosticSummaryTest() {
        // TODO: test diagnosticSummary
    }

    /**
     * Test the property 'geneExist'
     */
    @Test
    public void geneExistTest() {
        // TODO: test geneExist
    }

    /**
     * Test the property 'geneSummary'
     */
    @Test
    public void geneSummaryTest() {
        // TODO: test geneSummary
    }

    /**
     * Test the property 'highestDiagnosticImplicationLevel'
     */
    @Test
    public void highestDiagnosticImplicationLevelTest() {
        // TODO: test highestDiagnosticImplicationLevel
    }

    /**
     * Test the property 'highestFdaLevel'
     */
    @Test
    public void highestFdaLevelTest() {
        // TODO: test highestFdaLevel
    }

    /**
     * Test the property 'highestPrognosticImplicationLevel'
     */
    @Test
    public void highestPrognosticImplicationLevelTest() {
        // TODO: test highestPrognosticImplicationLevel
    }

    /**
     * Test the property 'highestResistanceLevel'
     */
    @Test
    public void highestResistanceLevelTest() {
        // TODO: test highestResistanceLevel
    }

    /**
     * Test the property 'highestSensitiveLevel'
     */
    @Test
    public void highestSensitiveLevelTest() {
        // TODO: test highestSensitiveLevel
    }

    /**
     * Test the property 'hotspot'
     */
    @Test
    public void hotspotTest() {
        // TODO: test hotspot
    }

    /**
     * Test the property 'lastUpdate'
     */
    @Test
    public void lastUpdateTest() {
        // TODO: test lastUpdate
    }

    /**
     * Test the property 'mutationEffect'
     */
    @Test
    public void mutationEffectTest() {
        // TODO: test mutationEffect
    }

    /**
     * Test the property 'oncogenic'
     */
    @Test
    public void oncogenicTest() {
        // TODO: test oncogenic
    }

    /**
     * Test the property 'otherSignificantResistanceLevels'
     */
    @Test
    public void otherSignificantResistanceLevelsTest() {
        // TODO: test otherSignificantResistanceLevels
    }

    /**
     * Test the property 'otherSignificantSensitiveLevels'
     */
    @Test
    public void otherSignificantSensitiveLevelsTest() {
        // TODO: test otherSignificantSensitiveLevels
    }

    /**
     * Test the property 'prognosticImplications'
     */
    @Test
    public void prognosticImplicationsTest() {
        // TODO: test prognosticImplications
    }

    /**
     * Test the property 'prognosticSummary'
     */
    @Test
    public void prognosticSummaryTest() {
        // TODO: test prognosticSummary
    }

    /**
     * Test the property 'query'
     */
    @Test
    public void queryTest() {
        // TODO: test query
    }

    /**
     * Test the property 'treatments'
     */
    @Test
    public void treatmentsTest() {
        // TODO: test treatments
    }

    /**
     * Test the property 'tumorTypeSummary'
     */
    @Test
    public void tumorTypeSummaryTest() {
        // TODO: test tumorTypeSummary
    }

    /**
     * Test the property 'variantExist'
     */
    @Test
    public void variantExistTest() {
        // TODO: test variantExist
    }

    /**
     * Test the property 'variantSummary'
     */
    @Test
    public void variantSummaryTest() {
        // TODO: test variantSummary
    }

    /**
     * Test the property 'vus'
     */
    @Test
    public void vusTest() {
        // TODO: test vus
    }

}
