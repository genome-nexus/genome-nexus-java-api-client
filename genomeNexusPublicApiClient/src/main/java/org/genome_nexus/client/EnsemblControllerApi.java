/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.EnsemblFilter;
import org.genome_nexus.client.EnsemblGene;
import org.genome_nexus.client.EnsemblTranscript;
import org.genome_nexus.client.GeneXref;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EnsemblControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnsemblControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EnsemblControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchCanonicalEnsemblGeneIdByEntrezGeneIdGET
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETCall(String entrezGeneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/entrez/{entrezGeneId}"
            .replace("{" + "entrezGeneId" + "}", localVarApiClient.escapeString(entrezGeneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETValidateBeforeCall(String entrezGeneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entrezGeneId' is set
        if (entrezGeneId == null) {
            throw new ApiException("Missing the required parameter 'entrezGeneId' when calling fetchCanonicalEnsemblGeneIdByEntrezGeneIdGET(Async)");
        }

        return fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETCall(entrezGeneId, _callback);

    }

    /**
     * Retrieves Ensembl canonical gene id by Entrez Gene Id
     * 
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @return EnsemblGene
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnsemblGene fetchCanonicalEnsemblGeneIdByEntrezGeneIdGET(String entrezGeneId) throws ApiException {
        ApiResponse<EnsemblGene> localVarResp = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETWithHttpInfo(entrezGeneId);
        return localVarResp.getData();
    }

    /**
     * Retrieves Ensembl canonical gene id by Entrez Gene Id
     * 
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @return ApiResponse&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnsemblGene> fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETWithHttpInfo(String entrezGeneId) throws ApiException {
        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETValidateBeforeCall(entrezGeneId, null);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical gene id by Entrez Gene Id (asynchronously)
     * 
     * @param entrezGeneId An Entrez Gene Id. For example 23140 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETAsync(String entrezGeneId, final ApiCallback<EnsemblGene> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByEntrezGeneIdGETValidateBeforeCall(entrezGeneId, _callback);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTCall(List<String> entrezGeneIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entrezGeneIds;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/entrez";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTValidateBeforeCall(List<String> entrezGeneIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'entrezGeneIds' is set
        if (entrezGeneIds == null) {
            throw new ApiException("Missing the required parameter 'entrezGeneIds' when calling fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST(Async)");
        }

        return fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTCall(entrezGeneIds, _callback);

    }

    /**
     * Retrieves canonical Ensembl Gene ID by Entrez Gene Ids
     * 
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @return List&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnsemblGene> fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOST(List<String> entrezGeneIds) throws ApiException {
        ApiResponse<List<EnsemblGene>> localVarResp = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTWithHttpInfo(entrezGeneIds);
        return localVarResp.getData();
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Entrez Gene Ids
     * 
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @return ApiResponse&lt;List&lt;EnsemblGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnsemblGene>> fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTWithHttpInfo(List<String> entrezGeneIds) throws ApiException {
        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTValidateBeforeCall(entrezGeneIds, null);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Entrez Gene Ids (asynchronously)
     * 
     * @param entrezGeneIds List of Entrez Gene Ids. For example [\&quot;23140\&quot;,\&quot;26009\&quot;,\&quot;100131879\&quot;] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTAsync(List<String> entrezGeneIds, final ApiCallback<List<EnsemblGene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByEntrezGeneIdsPOSTValidateBeforeCall(entrezGeneIds, _callback);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCanonicalEnsemblGeneIdByHugoSymbolGET
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByHugoSymbolGETCall(String hugoSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/hgnc/{hugoSymbol}"
            .replace("{" + "hugoSymbol" + "}", localVarApiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCanonicalEnsemblGeneIdByHugoSymbolGETValidateBeforeCall(String hugoSymbol, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling fetchCanonicalEnsemblGeneIdByHugoSymbolGET(Async)");
        }

        return fetchCanonicalEnsemblGeneIdByHugoSymbolGETCall(hugoSymbol, _callback);

    }

    /**
     * Retrieves Ensembl canonical gene id by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @return EnsemblGene
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnsemblGene fetchCanonicalEnsemblGeneIdByHugoSymbolGET(String hugoSymbol) throws ApiException {
        ApiResponse<EnsemblGene> localVarResp = fetchCanonicalEnsemblGeneIdByHugoSymbolGETWithHttpInfo(hugoSymbol);
        return localVarResp.getData();
    }

    /**
     * Retrieves Ensembl canonical gene id by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @return ApiResponse&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnsemblGene> fetchCanonicalEnsemblGeneIdByHugoSymbolGETWithHttpInfo(String hugoSymbol) throws ApiException {
        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByHugoSymbolGETValidateBeforeCall(hugoSymbol, null);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical gene id by Hugo Symbol (asynchronously)
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByHugoSymbolGETAsync(String hugoSymbol, final ApiCallback<EnsemblGene> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByHugoSymbolGETValidateBeforeCall(hugoSymbol, _callback);
        Type localVarReturnType = new TypeToken<EnsemblGene>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCanonicalEnsemblGeneIdByHugoSymbolsPOST
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTCall(List<String> hugoSymbols, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hugoSymbols;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-gene/hgnc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTValidateBeforeCall(List<String> hugoSymbols, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hugoSymbols' is set
        if (hugoSymbols == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbols' when calling fetchCanonicalEnsemblGeneIdByHugoSymbolsPOST(Async)");
        }

        return fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTCall(hugoSymbols, _callback);

    }

    /**
     * Retrieves canonical Ensembl Gene ID by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @return List&lt;EnsemblGene&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnsemblGene> fetchCanonicalEnsemblGeneIdByHugoSymbolsPOST(List<String> hugoSymbols) throws ApiException {
        ApiResponse<List<EnsemblGene>> localVarResp = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTWithHttpInfo(hugoSymbols);
        return localVarResp.getData();
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @return ApiResponse&lt;List&lt;EnsemblGene&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnsemblGene>> fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTWithHttpInfo(List<String> hugoSymbols) throws ApiException {
        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, null);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves canonical Ensembl Gene ID by Hugo Symbols (asynchronously)
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTAsync(List<String> hugoSymbols, final ApiCallback<List<EnsemblGene>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCanonicalEnsemblGeneIdByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, _callback);
        Type localVarReturnType = new TypeToken<List<EnsemblGene>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCanonicalEnsemblTranscriptByHugoSymbolGET
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblTranscriptByHugoSymbolGETCall(String hugoSymbol, String isoformOverrideSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-transcript/hgnc/{hugoSymbol}"
            .replace("{" + "hugoSymbol" + "}", localVarApiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCanonicalEnsemblTranscriptByHugoSymbolGETValidateBeforeCall(String hugoSymbol, String isoformOverrideSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling fetchCanonicalEnsemblTranscriptByHugoSymbolGET(Async)");
        }

        return fetchCanonicalEnsemblTranscriptByHugoSymbolGETCall(hugoSymbol, isoformOverrideSource, _callback);

    }

    /**
     * Retrieves Ensembl canonical transcript by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return EnsemblTranscript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnsemblTranscript fetchCanonicalEnsemblTranscriptByHugoSymbolGET(String hugoSymbol, String isoformOverrideSource) throws ApiException {
        ApiResponse<EnsemblTranscript> localVarResp = fetchCanonicalEnsemblTranscriptByHugoSymbolGETWithHttpInfo(hugoSymbol, isoformOverrideSource);
        return localVarResp.getData();
    }

    /**
     * Retrieves Ensembl canonical transcript by Hugo Symbol
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return ApiResponse&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnsemblTranscript> fetchCanonicalEnsemblTranscriptByHugoSymbolGETWithHttpInfo(String hugoSymbol, String isoformOverrideSource) throws ApiException {
        okhttp3.Call localVarCall = fetchCanonicalEnsemblTranscriptByHugoSymbolGETValidateBeforeCall(hugoSymbol, isoformOverrideSource, null);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical transcript by Hugo Symbol (asynchronously)
     * 
     * @param hugoSymbol A Hugo Symbol. For example TP53 (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblTranscriptByHugoSymbolGETAsync(String hugoSymbol, String isoformOverrideSource, final ApiCallback<EnsemblTranscript> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCanonicalEnsemblTranscriptByHugoSymbolGETValidateBeforeCall(hugoSymbol, isoformOverrideSource, _callback);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTCall(List<String> hugoSymbols, String isoformOverrideSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hugoSymbols;

        // create path and map variables
        String localVarPath = "/ensembl/canonical-transcript/hgnc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTValidateBeforeCall(List<String> hugoSymbols, String isoformOverrideSource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'hugoSymbols' is set
        if (hugoSymbols == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbols' when calling fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST(Async)");
        }

        return fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTCall(hugoSymbols, isoformOverrideSource, _callback);

    }

    /**
     * Retrieves Ensembl canonical transcripts by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return List&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnsemblTranscript> fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOST(List<String> hugoSymbols, String isoformOverrideSource) throws ApiException {
        ApiResponse<List<EnsemblTranscript>> localVarResp = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTWithHttpInfo(hugoSymbols, isoformOverrideSource);
        return localVarResp.getData();
    }

    /**
     * Retrieves Ensembl canonical transcripts by Hugo Symbols
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @return ApiResponse&lt;List&lt;EnsemblTranscript&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnsemblTranscript>> fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTWithHttpInfo(List<String> hugoSymbols, String isoformOverrideSource) throws ApiException {
        okhttp3.Call localVarCall = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, isoformOverrideSource, null);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Ensembl canonical transcripts by Hugo Symbols (asynchronously)
     * 
     * @param hugoSymbols List of Hugo Symbols. For example [\&quot;TP53\&quot;,\&quot;PIK3CA\&quot;,\&quot;BRCA1\&quot;] (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional, default to uniprot)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTAsync(List<String> hugoSymbols, String isoformOverrideSource, final ApiCallback<List<EnsemblTranscript>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCanonicalEnsemblTranscriptsByHugoSymbolsPOSTValidateBeforeCall(hugoSymbols, isoformOverrideSource, _callback);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchEnsemblTranscriptByTranscriptIdGET
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEnsemblTranscriptByTranscriptIdGETCall(String transcriptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/transcript/{transcriptId}"
            .replace("{" + "transcriptId" + "}", localVarApiClient.escapeString(transcriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEnsemblTranscriptByTranscriptIdGETValidateBeforeCall(String transcriptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcriptId' is set
        if (transcriptId == null) {
            throw new ApiException("Missing the required parameter 'transcriptId' when calling fetchEnsemblTranscriptByTranscriptIdGET(Async)");
        }

        return fetchEnsemblTranscriptByTranscriptIdGETCall(transcriptId, _callback);

    }

    /**
     * Retrieves the transcript by an Ensembl transcript ID
     * 
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @return EnsemblTranscript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public EnsemblTranscript fetchEnsemblTranscriptByTranscriptIdGET(String transcriptId) throws ApiException {
        ApiResponse<EnsemblTranscript> localVarResp = fetchEnsemblTranscriptByTranscriptIdGETWithHttpInfo(transcriptId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the transcript by an Ensembl transcript ID
     * 
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @return ApiResponse&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnsemblTranscript> fetchEnsemblTranscriptByTranscriptIdGETWithHttpInfo(String transcriptId) throws ApiException {
        okhttp3.Call localVarCall = fetchEnsemblTranscriptByTranscriptIdGETValidateBeforeCall(transcriptId, null);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the transcript by an Ensembl transcript ID (asynchronously)
     * 
     * @param transcriptId An Ensembl transcript ID. For example ENST00000361390 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEnsemblTranscriptByTranscriptIdGETAsync(String transcriptId, final ApiCallback<EnsemblTranscript> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEnsemblTranscriptByTranscriptIdGETValidateBeforeCall(transcriptId, _callback);
        Type localVarReturnType = new TypeToken<EnsemblTranscript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchEnsemblTranscriptsByEnsemblFilterPOST
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEnsemblTranscriptsByEnsemblFilterPOSTCall(EnsemblFilter ensemblFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ensemblFilter;

        // create path and map variables
        String localVarPath = "/ensembl/transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEnsemblTranscriptsByEnsemblFilterPOSTValidateBeforeCall(EnsemblFilter ensemblFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ensemblFilter' is set
        if (ensemblFilter == null) {
            throw new ApiException("Missing the required parameter 'ensemblFilter' when calling fetchEnsemblTranscriptsByEnsemblFilterPOST(Async)");
        }

        return fetchEnsemblTranscriptsByEnsemblFilterPOSTCall(ensemblFilter, _callback);

    }

    /**
     * Retrieves Ensembl Transcripts by Ensembl transcript IDs, hugo Symbols, protein IDs, or gene IDs
     * 
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @return List&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnsemblTranscript> fetchEnsemblTranscriptsByEnsemblFilterPOST(EnsemblFilter ensemblFilter) throws ApiException {
        ApiResponse<List<EnsemblTranscript>> localVarResp = fetchEnsemblTranscriptsByEnsemblFilterPOSTWithHttpInfo(ensemblFilter);
        return localVarResp.getData();
    }

    /**
     * Retrieves Ensembl Transcripts by Ensembl transcript IDs, hugo Symbols, protein IDs, or gene IDs
     * 
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @return ApiResponse&lt;List&lt;EnsemblTranscript&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnsemblTranscript>> fetchEnsemblTranscriptsByEnsemblFilterPOSTWithHttpInfo(EnsemblFilter ensemblFilter) throws ApiException {
        okhttp3.Call localVarCall = fetchEnsemblTranscriptsByEnsemblFilterPOSTValidateBeforeCall(ensemblFilter, null);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Ensembl Transcripts by Ensembl transcript IDs, hugo Symbols, protein IDs, or gene IDs (asynchronously)
     * 
     * @param ensemblFilter List of Ensembl transcript IDs. For example [\&quot;ENST00000361390\&quot;, \&quot;ENST00000361453\&quot;, \&quot;ENST00000361624\&quot;]&lt;br&gt;OR&lt;br&gt;List of Hugo Symbols. For example [\&quot;TP53\&quot;, \&quot;PIK3CA\&quot;, \&quot;BRCA1\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl protein IDs. For example [\&quot;ENSP00000439985\&quot;, \&quot;ENSP00000478460\&quot;, \&quot;ENSP00000346196\&quot;]&lt;br&gt;OR&lt;br&gt;List of Ensembl gene IDs. For example [\&quot;ENSG00000136999\&quot;, \&quot;ENSG00000272398\&quot;, \&quot;ENSG00000198695\&quot;] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEnsemblTranscriptsByEnsemblFilterPOSTAsync(EnsemblFilter ensemblFilter, final ApiCallback<List<EnsemblTranscript>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEnsemblTranscriptsByEnsemblFilterPOSTValidateBeforeCall(ensemblFilter, _callback);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchEnsemblTranscriptsGET
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEnsemblTranscriptsGETCall(String geneId, String proteinId, String hugoSymbol, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (geneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geneId", geneId));
        }

        if (proteinId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinId", proteinId));
        }

        if (hugoSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hugoSymbol", hugoSymbol));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEnsemblTranscriptsGETValidateBeforeCall(String geneId, String proteinId, String hugoSymbol, final ApiCallback _callback) throws ApiException {
        return fetchEnsemblTranscriptsGETCall(geneId, proteinId, hugoSymbol, _callback);

    }

    /**
     * Retrieves Ensembl Transcripts by protein ID, and gene ID. Retrieves all transcripts in case no query parameter provided
     * 
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @return List&lt;EnsemblTranscript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<EnsemblTranscript> fetchEnsemblTranscriptsGET(String geneId, String proteinId, String hugoSymbol) throws ApiException {
        ApiResponse<List<EnsemblTranscript>> localVarResp = fetchEnsemblTranscriptsGETWithHttpInfo(geneId, proteinId, hugoSymbol);
        return localVarResp.getData();
    }

    /**
     * Retrieves Ensembl Transcripts by protein ID, and gene ID. Retrieves all transcripts in case no query parameter provided
     * 
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @return ApiResponse&lt;List&lt;EnsemblTranscript&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EnsemblTranscript>> fetchEnsemblTranscriptsGETWithHttpInfo(String geneId, String proteinId, String hugoSymbol) throws ApiException {
        okhttp3.Call localVarCall = fetchEnsemblTranscriptsGETValidateBeforeCall(geneId, proteinId, hugoSymbol, null);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves Ensembl Transcripts by protein ID, and gene ID. Retrieves all transcripts in case no query parameter provided (asynchronously)
     * 
     * @param geneId An Ensembl gene ID. For example ENSG00000136999 (optional)
     * @param proteinId An Ensembl protein ID. For example ENSP00000439985 (optional)
     * @param hugoSymbol A Hugo Symbol For example ARF5 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEnsemblTranscriptsGETAsync(String geneId, String proteinId, String hugoSymbol, final ApiCallback<List<EnsemblTranscript>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEnsemblTranscriptsGETValidateBeforeCall(geneId, proteinId, hugoSymbol, _callback);
        Type localVarReturnType = new TypeToken<List<EnsemblTranscript>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGeneXrefsGET
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneXrefsGETCall(String accession, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ensembl/xrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accession != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accession", accession));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGeneXrefsGETValidateBeforeCall(String accession, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accession' is set
        if (accession == null) {
            throw new ApiException("Missing the required parameter 'accession' when calling fetchGeneXrefsGET(Async)");
        }

        return fetchGeneXrefsGETCall(accession, _callback);

    }

    /**
     * Perform lookups of Ensembl identifiers and retrieve their external references in other databases
     * 
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @return List&lt;GeneXref&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<GeneXref> fetchGeneXrefsGET(String accession) throws ApiException {
        ApiResponse<List<GeneXref>> localVarResp = fetchGeneXrefsGETWithHttpInfo(accession);
        return localVarResp.getData();
    }

    /**
     * Perform lookups of Ensembl identifiers and retrieve their external references in other databases
     * 
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @return ApiResponse&lt;List&lt;GeneXref&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GeneXref>> fetchGeneXrefsGETWithHttpInfo(String accession) throws ApiException {
        okhttp3.Call localVarCall = fetchGeneXrefsGETValidateBeforeCall(accession, null);
        Type localVarReturnType = new TypeToken<List<GeneXref>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Perform lookups of Ensembl identifiers and retrieve their external references in other databases (asynchronously)
     * 
     * @param accession Ensembl gene accession. For example ENSG00000169083 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneXrefsGETAsync(String accession, final ApiCallback<List<GeneXref>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGeneXrefsGETValidateBeforeCall(accession, _callback);
        Type localVarReturnType = new TypeToken<List<GeneXref>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
