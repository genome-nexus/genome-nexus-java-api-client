/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Hgvs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class Hgvs {
  public static final String SERIALIZED_NAME_CODING = "coding";
  @SerializedName(SERIALIZED_NAME_CODING)
  private List<String> coding;

  public static final String SERIALIZED_NAME_GENOMIC = "genomic";
  @SerializedName(SERIALIZED_NAME_GENOMIC)
  private List<String> genomic;

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private List<String> protein;

  public Hgvs() {
  }

  public Hgvs coding(List<String> coding) {
    this.coding = coding;
    return this;
  }

  public Hgvs addCodingItem(String codingItem) {
    if (this.coding == null) {
      this.coding = new ArrayList<>();
    }
    this.coding.add(codingItem);
    return this;
  }

   /**
   * Get coding
   * @return coding
  **/
  @javax.annotation.Nullable
  public List<String> getCoding() {
    return coding;
  }

  public void setCoding(List<String> coding) {
    this.coding = coding;
  }


  public Hgvs genomic(List<String> genomic) {
    this.genomic = genomic;
    return this;
  }

  public Hgvs addGenomicItem(String genomicItem) {
    if (this.genomic == null) {
      this.genomic = new ArrayList<>();
    }
    this.genomic.add(genomicItem);
    return this;
  }

   /**
   * Get genomic
   * @return genomic
  **/
  @javax.annotation.Nullable
  public List<String> getGenomic() {
    return genomic;
  }

  public void setGenomic(List<String> genomic) {
    this.genomic = genomic;
  }


  public Hgvs protein(List<String> protein) {
    this.protein = protein;
    return this;
  }

  public Hgvs addProteinItem(String proteinItem) {
    if (this.protein == null) {
      this.protein = new ArrayList<>();
    }
    this.protein.add(proteinItem);
    return this;
  }

   /**
   * Get protein
   * @return protein
  **/
  @javax.annotation.Nullable
  public List<String> getProtein() {
    return protein;
  }

  public void setProtein(List<String> protein) {
    this.protein = protein;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hgvs hgvs = (Hgvs) o;
    return Objects.equals(this.coding, hgvs.coding) &&
        Objects.equals(this.genomic, hgvs.genomic) &&
        Objects.equals(this.protein, hgvs.protein);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coding, genomic, protein);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hgvs {\n");
    sb.append("    coding: ").append(toIndentedString(coding)).append("\n");
    sb.append("    genomic: ").append(toIndentedString(genomic)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coding");
    openapiFields.add("genomic");
    openapiFields.add("protein");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Hgvs
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hgvs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hgvs is not found in the empty JSON string", Hgvs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hgvs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hgvs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("coding") != null && !jsonObj.get("coding").isJsonNull() && !jsonObj.get("coding").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `coding` to be an array in the JSON string but got `%s`", jsonObj.get("coding").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("genomic") != null && !jsonObj.get("genomic").isJsonNull() && !jsonObj.get("genomic").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `genomic` to be an array in the JSON string but got `%s`", jsonObj.get("genomic").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protein") != null && !jsonObj.get("protein").isJsonNull() && !jsonObj.get("protein").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protein` to be an array in the JSON string but got `%s`", jsonObj.get("protein").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hgvs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hgvs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hgvs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hgvs.class));

       return (TypeAdapter<T>) new TypeAdapter<Hgvs>() {
           @Override
           public void write(JsonWriter out, Hgvs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hgvs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Hgvs given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Hgvs
  * @throws IOException if the JSON string is invalid with respect to Hgvs
  */
  public static Hgvs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hgvs.class);
  }

 /**
  * Convert an instance of Hgvs to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

