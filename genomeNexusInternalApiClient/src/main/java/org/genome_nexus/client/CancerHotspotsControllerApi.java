/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.AggregatedHotspots;
import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.Hotspot;
import org.genome_nexus.client.ProteinLocation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CancerHotspotsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CancerHotspotsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CancerHotspotsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchHotspotAnnotationByGenomicLocationGET
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByGenomicLocationGETCall(String genomicLocation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/genomic/{genomicLocation}"
            .replace("{" + "genomicLocation" + "}", localVarApiClient.escapeString(genomicLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByGenomicLocationGETValidateBeforeCall(String genomicLocation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genomicLocation' is set
        if (genomicLocation == null) {
            throw new ApiException("Missing the required parameter 'genomicLocation' when calling fetchHotspotAnnotationByGenomicLocationGET(Async)");
        }

        return fetchHotspotAnnotationByGenomicLocationGETCall(genomicLocation, _callback);

    }

    /**
     * Retrieves hotspot annotations for a specific genomic location
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Hotspot> fetchHotspotAnnotationByGenomicLocationGET(String genomicLocation) throws ApiException {
        ApiResponse<List<Hotspot>> localVarResp = fetchHotspotAnnotationByGenomicLocationGETWithHttpInfo(genomicLocation);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for a specific genomic location
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hotspot>> fetchHotspotAnnotationByGenomicLocationGETWithHttpInfo(String genomicLocation) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByGenomicLocationGETValidateBeforeCall(genomicLocation, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for a specific genomic location (asynchronously)
     * 
     * @param genomicLocation A genomic location. For example 7,140453136,140453136,A,T (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByGenomicLocationGETAsync(String genomicLocation, final ApiCallback<List<Hotspot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByGenomicLocationGETValidateBeforeCall(genomicLocation, _callback);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHotspotAnnotationByGenomicLocationPOST
     * @param genomicLocations List of genomic locations. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByGenomicLocationPOSTCall(List<GenomicLocation> genomicLocations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = genomicLocations;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/genomic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByGenomicLocationPOSTValidateBeforeCall(List<GenomicLocation> genomicLocations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'genomicLocations' is set
        if (genomicLocations == null) {
            throw new ApiException("Missing the required parameter 'genomicLocations' when calling fetchHotspotAnnotationByGenomicLocationPOST(Async)");
        }

        return fetchHotspotAnnotationByGenomicLocationPOSTCall(genomicLocations, _callback);

    }

    /**
     * Retrieves hotspot annotations for the provided list of genomic locations
     * 
     * @param genomicLocations List of genomic locations. (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByGenomicLocationPOST(List<GenomicLocation> genomicLocations) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> localVarResp = fetchHotspotAnnotationByGenomicLocationPOSTWithHttpInfo(genomicLocations);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of genomic locations
     * 
     * @param genomicLocations List of genomic locations. (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByGenomicLocationPOSTWithHttpInfo(List<GenomicLocation> genomicLocations) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByGenomicLocationPOSTValidateBeforeCall(genomicLocations, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of genomic locations (asynchronously)
     * 
     * @param genomicLocations List of genomic locations. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByGenomicLocationPOSTAsync(List<GenomicLocation> genomicLocations, final ApiCallback<List<AggregatedHotspots>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByGenomicLocationPOSTValidateBeforeCall(genomicLocations, _callback);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHotspotAnnotationByHgvsGET
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByHgvsGETCall(String variant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/hgvs/{variant}"
            .replace("{" + "variant" + "}", localVarApiClient.escapeString(variant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByHgvsGETValidateBeforeCall(String variant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variant' is set
        if (variant == null) {
            throw new ApiException("Missing the required parameter 'variant' when calling fetchHotspotAnnotationByHgvsGET(Async)");
        }

        return fetchHotspotAnnotationByHgvsGETCall(variant, _callback);

    }

    /**
     * Retrieves hotspot annotations for a specific variant
     * 
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Hotspot> fetchHotspotAnnotationByHgvsGET(String variant) throws ApiException {
        ApiResponse<List<Hotspot>> localVarResp = fetchHotspotAnnotationByHgvsGETWithHttpInfo(variant);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for a specific variant
     * 
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hotspot>> fetchHotspotAnnotationByHgvsGETWithHttpInfo(String variant) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByHgvsGETValidateBeforeCall(variant, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for a specific variant (asynchronously)
     * 
     * @param variant A variant. For example 7:g.140453136A&gt;T (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByHgvsGETAsync(String variant, final ApiCallback<List<Hotspot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByHgvsGETValidateBeforeCall(variant, _callback);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHotspotAnnotationByHgvsPOST
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByHgvsPOSTCall(List<String> variants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variants;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/hgvs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByHgvsPOSTValidateBeforeCall(List<String> variants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variants' is set
        if (variants == null) {
            throw new ApiException("Missing the required parameter 'variants' when calling fetchHotspotAnnotationByHgvsPOST(Async)");
        }

        return fetchHotspotAnnotationByHgvsPOSTCall(variants, _callback);

    }

    /**
     * Retrieves hotspot annotations for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByHgvsPOST(List<String> variants) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> localVarResp = fetchHotspotAnnotationByHgvsPOSTWithHttpInfo(variants);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByHgvsPOSTWithHttpInfo(List<String> variants) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByHgvsPOSTValidateBeforeCall(variants, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of variants (asynchronously)
     * 
     * @param variants List of variants. For example [\&quot;7:g.140453136A&gt;T\&quot;,\&quot;12:g.25398285C&gt;A\&quot;] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByHgvsPOSTAsync(List<String> variants, final ApiCallback<List<AggregatedHotspots>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByHgvsPOSTValidateBeforeCall(variants, _callback);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHotspotAnnotationByProteinLocationsPOST
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByProteinLocationsPOSTCall(List<ProteinLocation> proteinLocations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = proteinLocations;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/proteinLocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByProteinLocationsPOSTValidateBeforeCall(List<ProteinLocation> proteinLocations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'proteinLocations' is set
        if (proteinLocations == null) {
            throw new ApiException("Missing the required parameter 'proteinLocations' when calling fetchHotspotAnnotationByProteinLocationsPOST(Async)");
        }

        return fetchHotspotAnnotationByProteinLocationsPOSTCall(proteinLocations, _callback);

    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript id, protein location and mutation type
     * 
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByProteinLocationsPOST(List<ProteinLocation> proteinLocations) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> localVarResp = fetchHotspotAnnotationByProteinLocationsPOSTWithHttpInfo(proteinLocations);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript id, protein location and mutation type
     * 
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByProteinLocationsPOSTWithHttpInfo(List<ProteinLocation> proteinLocations) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByProteinLocationsPOSTValidateBeforeCall(proteinLocations, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript id, protein location and mutation type (asynchronously)
     * 
     * @param proteinLocations List of transcript id, protein start location, protein end location, mutation type. The mutation types are limited to &#39;Missense_Mutation&#39;, &#39;In_Frame_Ins&#39;, &#39;In_Frame_Del&#39;, &#39;Splice_Site&#39;, and &#39;Splice_Region&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByProteinLocationsPOSTAsync(List<ProteinLocation> proteinLocations, final ApiCallback<List<AggregatedHotspots>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByProteinLocationsPOSTValidateBeforeCall(proteinLocations, _callback);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHotspotAnnotationByTranscriptIdGET
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByTranscriptIdGETCall(String transcriptId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/transcript/{transcriptId}"
            .replace("{" + "transcriptId" + "}", localVarApiClient.escapeString(transcriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByTranscriptIdGETValidateBeforeCall(String transcriptId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcriptId' is set
        if (transcriptId == null) {
            throw new ApiException("Missing the required parameter 'transcriptId' when calling fetchHotspotAnnotationByTranscriptIdGET(Async)");
        }

        return fetchHotspotAnnotationByTranscriptIdGETCall(transcriptId, _callback);

    }

    /**
     * Retrieves hotspot annotations for the provided transcript ID
     * 
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Hotspot> fetchHotspotAnnotationByTranscriptIdGET(String transcriptId) throws ApiException {
        ApiResponse<List<Hotspot>> localVarResp = fetchHotspotAnnotationByTranscriptIdGETWithHttpInfo(transcriptId);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided transcript ID
     * 
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hotspot>> fetchHotspotAnnotationByTranscriptIdGETWithHttpInfo(String transcriptId) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByTranscriptIdGETValidateBeforeCall(transcriptId, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided transcript ID (asynchronously)
     * 
     * @param transcriptId A Transcript Id. For example ENST00000288602 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByTranscriptIdGETAsync(String transcriptId, final ApiCallback<List<Hotspot>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByTranscriptIdGETValidateBeforeCall(transcriptId, _callback);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHotspotAnnotationByTranscriptIdPOST
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByTranscriptIdPOSTCall(List<String> transcriptIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transcriptIds;

        // create path and map variables
        String localVarPath = "/cancer_hotspots/transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHotspotAnnotationByTranscriptIdPOSTValidateBeforeCall(List<String> transcriptIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transcriptIds' is set
        if (transcriptIds == null) {
            throw new ApiException("Missing the required parameter 'transcriptIds' when calling fetchHotspotAnnotationByTranscriptIdPOST(Async)");
        }

        return fetchHotspotAnnotationByTranscriptIdPOSTCall(transcriptIds, _callback);

    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript ID
     * 
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @return List&lt;AggregatedHotspots&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<AggregatedHotspots> fetchHotspotAnnotationByTranscriptIdPOST(List<String> transcriptIds) throws ApiException {
        ApiResponse<List<AggregatedHotspots>> localVarResp = fetchHotspotAnnotationByTranscriptIdPOSTWithHttpInfo(transcriptIds);
        return localVarResp.getData();
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript ID
     * 
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @return ApiResponse&lt;List&lt;AggregatedHotspots&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AggregatedHotspots>> fetchHotspotAnnotationByTranscriptIdPOSTWithHttpInfo(List<String> transcriptIds) throws ApiException {
        okhttp3.Call localVarCall = fetchHotspotAnnotationByTranscriptIdPOSTValidateBeforeCall(transcriptIds, null);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves hotspot annotations for the provided list of transcript ID (asynchronously)
     * 
     * @param transcriptIds List of transcript Id. For example [\&quot;ENST00000288602\&quot;,\&quot;ENST00000256078\&quot;] (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHotspotAnnotationByTranscriptIdPOSTAsync(List<String> transcriptIds, final ApiCallback<List<AggregatedHotspots>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHotspotAnnotationByTranscriptIdPOSTValidateBeforeCall(transcriptIds, _callback);
        Type localVarReturnType = new TypeToken<List<AggregatedHotspots>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
