/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * SignalQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class SignalQuery {
  public static final String SERIALIZED_NAME_ALTERATION = "alteration";
  @SerializedName(SERIALIZED_NAME_ALTERATION)
  private String alteration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HUGO_SYMBOL = "hugoSymbol";
  @SerializedName(SERIALIZED_NAME_HUGO_SYMBOL)
  private String hugoSymbol;

  /**
   * Match Type
   */
  @JsonAdapter(MatchTypeEnum.Adapter.class)
  public enum MatchTypeEnum {
    EXACT("EXACT"),
    
    STARTS_WITH("STARTS_WITH"),
    
    PARTIAL("PARTIAL"),
    
    NO_MATCH("NO_MATCH");

    private String value;

    MatchTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchTypeEnum fromValue(String value) {
      for (MatchTypeEnum b : MatchTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_TYPE = "matchType";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private MatchTypeEnum matchType;

  /**
   * Query Type
   */
  @JsonAdapter(QueryTypeEnum.Adapter.class)
  public enum QueryTypeEnum {
    GENE("GENE"),
    
    ALTERATION("ALTERATION"),
    
    VARIANT("VARIANT"),
    
    REGION("REGION");

    private String value;

    QueryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryTypeEnum fromValue(String value) {
      for (QueryTypeEnum b : QueryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERY_TYPE = "queryType";
  @SerializedName(SERIALIZED_NAME_QUERY_TYPE)
  private QueryTypeEnum queryType;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private String variant;

  public SignalQuery() {
  }

  public SignalQuery alteration(String alteration) {
    this.alteration = alteration;
    return this;
  }

   /**
   * Matching Alteration (e.g: V600E)
   * @return alteration
  **/
  @javax.annotation.Nullable
  public String getAlteration() {
    return alteration;
  }

  public void setAlteration(String alteration) {
    this.alteration = alteration;
  }


  public SignalQuery description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Optional free-form text
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SignalQuery hugoSymbol(String hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
    return this;
  }

   /**
   * Matching Hugo Gene Symbol (e.g: BRCA2, BRAF)
   * @return hugoSymbol
  **/
  @javax.annotation.Nullable
  public String getHugoSymbol() {
    return hugoSymbol;
  }

  public void setHugoSymbol(String hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
  }


  public SignalQuery matchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
    return this;
  }

   /**
   * Match Type
   * @return matchType
  **/
  @javax.annotation.Nullable
  public MatchTypeEnum getMatchType() {
    return matchType;
  }

  public void setMatchType(MatchTypeEnum matchType) {
    this.matchType = matchType;
  }


  public SignalQuery queryType(QueryTypeEnum queryType) {
    this.queryType = queryType;
    return this;
  }

   /**
   * Query Type
   * @return queryType
  **/
  @javax.annotation.Nullable
  public QueryTypeEnum getQueryType() {
    return queryType;
  }

  public void setQueryType(QueryTypeEnum queryType) {
    this.queryType = queryType;
  }


  public SignalQuery region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Matching Region (e.g: 13:32968940-32968940)
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public SignalQuery variant(String variant) {
    this.variant = variant;
    return this;
  }

   /**
   * Matching HGVSG Variant (e.g: 17:g.37880220T&gt;C)
   * @return variant
  **/
  @javax.annotation.Nullable
  public String getVariant() {
    return variant;
  }

  public void setVariant(String variant) {
    this.variant = variant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalQuery signalQuery = (SignalQuery) o;
    return Objects.equals(this.alteration, signalQuery.alteration) &&
        Objects.equals(this.description, signalQuery.description) &&
        Objects.equals(this.hugoSymbol, signalQuery.hugoSymbol) &&
        Objects.equals(this.matchType, signalQuery.matchType) &&
        Objects.equals(this.queryType, signalQuery.queryType) &&
        Objects.equals(this.region, signalQuery.region) &&
        Objects.equals(this.variant, signalQuery.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alteration, description, hugoSymbol, matchType, queryType, region, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalQuery {\n");
    sb.append("    alteration: ").append(toIndentedString(alteration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hugoSymbol: ").append(toIndentedString(hugoSymbol)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    queryType: ").append(toIndentedString(queryType)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alteration");
    openapiFields.add("description");
    openapiFields.add("hugoSymbol");
    openapiFields.add("matchType");
    openapiFields.add("queryType");
    openapiFields.add("region");
    openapiFields.add("variant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SignalQuery
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignalQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignalQuery is not found in the empty JSON string", SignalQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignalQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignalQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alteration") != null && !jsonObj.get("alteration").isJsonNull()) && !jsonObj.get("alteration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alteration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alteration").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("hugoSymbol") != null && !jsonObj.get("hugoSymbol").isJsonNull()) && !jsonObj.get("hugoSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hugoSymbol").toString()));
      }
      if ((jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) && !jsonObj.get("matchType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchType").toString()));
      }
      // validate the optional field `matchType`
      if (jsonObj.get("matchType") != null && !jsonObj.get("matchType").isJsonNull()) {
        MatchTypeEnum.validateJsonElement(jsonObj.get("matchType"));
      }
      if ((jsonObj.get("queryType") != null && !jsonObj.get("queryType").isJsonNull()) && !jsonObj.get("queryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryType").toString()));
      }
      // validate the optional field `queryType`
      if (jsonObj.get("queryType") != null && !jsonObj.get("queryType").isJsonNull()) {
        QueryTypeEnum.validateJsonElement(jsonObj.get("queryType"));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("variant") != null && !jsonObj.get("variant").isJsonNull()) && !jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignalQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignalQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignalQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignalQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<SignalQuery>() {
           @Override
           public void write(JsonWriter out, SignalQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignalQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignalQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignalQuery
  * @throws IOException if the JSON string is invalid with respect to SignalQuery
  */
  public static SignalQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignalQuery.class);
  }

 /**
  * Convert an instance of SignalQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

