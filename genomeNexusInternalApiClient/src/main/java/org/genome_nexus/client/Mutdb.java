/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.genome_nexus.client.Hg19;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Mutdb
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class Mutdb {
  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private String alt;

  public static final String SERIALIZED_NAME_CHROM = "chrom";
  @SerializedName(SERIALIZED_NAME_CHROM)
  private String chrom;

  public static final String SERIALIZED_NAME_COSMIC_ID = "cosmicId";
  @SerializedName(SERIALIZED_NAME_COSMIC_ID)
  private String cosmicId;

  public static final String SERIALIZED_NAME_HG19 = "hg19";
  @SerializedName(SERIALIZED_NAME_HG19)
  private Hg19 hg19;

  public static final String SERIALIZED_NAME_MUTPRED_SCORE = "mutpredScore";
  @SerializedName(SERIALIZED_NAME_MUTPRED_SCORE)
  private Double mutpredScore;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_RSID = "rsid";
  @SerializedName(SERIALIZED_NAME_RSID)
  private String rsid;

  public static final String SERIALIZED_NAME_UNIPROT_ID = "uniprotId";
  @SerializedName(SERIALIZED_NAME_UNIPROT_ID)
  private String uniprotId;

  public Mutdb() {
  }

  public Mutdb alt(String alt) {
    this.alt = alt;
    return this;
  }

   /**
   * alt
   * @return alt
  **/
  @javax.annotation.Nullable
  public String getAlt() {
    return alt;
  }

  public void setAlt(String alt) {
    this.alt = alt;
  }


  public Mutdb chrom(String chrom) {
    this.chrom = chrom;
    return this;
  }

   /**
   * chrom
   * @return chrom
  **/
  @javax.annotation.Nullable
  public String getChrom() {
    return chrom;
  }

  public void setChrom(String chrom) {
    this.chrom = chrom;
  }


  public Mutdb cosmicId(String cosmicId) {
    this.cosmicId = cosmicId;
    return this;
  }

   /**
   * cosmic_id
   * @return cosmicId
  **/
  @javax.annotation.Nullable
  public String getCosmicId() {
    return cosmicId;
  }

  public void setCosmicId(String cosmicId) {
    this.cosmicId = cosmicId;
  }


  public Mutdb hg19(Hg19 hg19) {
    this.hg19 = hg19;
    return this;
  }

   /**
   * Get hg19
   * @return hg19
  **/
  @javax.annotation.Nullable
  public Hg19 getHg19() {
    return hg19;
  }

  public void setHg19(Hg19 hg19) {
    this.hg19 = hg19;
  }


  public Mutdb mutpredScore(Double mutpredScore) {
    this.mutpredScore = mutpredScore;
    return this;
  }

   /**
   * mutpred_score
   * @return mutpredScore
  **/
  @javax.annotation.Nullable
  public Double getMutpredScore() {
    return mutpredScore;
  }

  public void setMutpredScore(Double mutpredScore) {
    this.mutpredScore = mutpredScore;
  }


  public Mutdb ref(String ref) {
    this.ref = ref;
    return this;
  }

   /**
   * ref
   * @return ref
  **/
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }


  public Mutdb rsid(String rsid) {
    this.rsid = rsid;
    return this;
  }

   /**
   * rsid
   * @return rsid
  **/
  @javax.annotation.Nullable
  public String getRsid() {
    return rsid;
  }

  public void setRsid(String rsid) {
    this.rsid = rsid;
  }


  public Mutdb uniprotId(String uniprotId) {
    this.uniprotId = uniprotId;
    return this;
  }

   /**
   * uniprot_id
   * @return uniprotId
  **/
  @javax.annotation.Nullable
  public String getUniprotId() {
    return uniprotId;
  }

  public void setUniprotId(String uniprotId) {
    this.uniprotId = uniprotId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mutdb mutdb = (Mutdb) o;
    return Objects.equals(this.alt, mutdb.alt) &&
        Objects.equals(this.chrom, mutdb.chrom) &&
        Objects.equals(this.cosmicId, mutdb.cosmicId) &&
        Objects.equals(this.hg19, mutdb.hg19) &&
        Objects.equals(this.mutpredScore, mutdb.mutpredScore) &&
        Objects.equals(this.ref, mutdb.ref) &&
        Objects.equals(this.rsid, mutdb.rsid) &&
        Objects.equals(this.uniprotId, mutdb.uniprotId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alt, chrom, cosmicId, hg19, mutpredScore, ref, rsid, uniprotId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mutdb {\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    chrom: ").append(toIndentedString(chrom)).append("\n");
    sb.append("    cosmicId: ").append(toIndentedString(cosmicId)).append("\n");
    sb.append("    hg19: ").append(toIndentedString(hg19)).append("\n");
    sb.append("    mutpredScore: ").append(toIndentedString(mutpredScore)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    rsid: ").append(toIndentedString(rsid)).append("\n");
    sb.append("    uniprotId: ").append(toIndentedString(uniprotId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alt");
    openapiFields.add("chrom");
    openapiFields.add("cosmicId");
    openapiFields.add("hg19");
    openapiFields.add("mutpredScore");
    openapiFields.add("ref");
    openapiFields.add("rsid");
    openapiFields.add("uniprotId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Mutdb
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mutdb.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mutdb is not found in the empty JSON string", Mutdb.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mutdb.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mutdb` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull()) && !jsonObj.get("alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt").toString()));
      }
      if ((jsonObj.get("chrom") != null && !jsonObj.get("chrom").isJsonNull()) && !jsonObj.get("chrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chrom").toString()));
      }
      if ((jsonObj.get("cosmicId") != null && !jsonObj.get("cosmicId").isJsonNull()) && !jsonObj.get("cosmicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cosmicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cosmicId").toString()));
      }
      // validate the optional field `hg19`
      if (jsonObj.get("hg19") != null && !jsonObj.get("hg19").isJsonNull()) {
        Hg19.validateJsonElement(jsonObj.get("hg19"));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("rsid") != null && !jsonObj.get("rsid").isJsonNull()) && !jsonObj.get("rsid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rsid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rsid").toString()));
      }
      if ((jsonObj.get("uniprotId") != null && !jsonObj.get("uniprotId").isJsonNull()) && !jsonObj.get("uniprotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniprotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniprotId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mutdb.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mutdb' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mutdb> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mutdb.class));

       return (TypeAdapter<T>) new TypeAdapter<Mutdb>() {
           @Override
           public void write(JsonWriter out, Mutdb value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mutdb read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Mutdb given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Mutdb
  * @throws IOException if the JSON string is invalid with respect to Mutdb
  */
  public static Mutdb fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mutdb.class);
  }

 /**
  * Convert an instance of Mutdb to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

