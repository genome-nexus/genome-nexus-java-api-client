/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.genome_nexus.client.HrdScore;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * StatsByTumorType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class StatsByTumorType {
  public static final String SERIALIZED_NAME_AGE_AT_DX = "ageAtDx";
  @SerializedName(SERIALIZED_NAME_AGE_AT_DX)
  private Integer ageAtDx;

  public static final String SERIALIZED_NAME_F_BIALLELIC = "fBiallelic";
  @SerializedName(SERIALIZED_NAME_F_BIALLELIC)
  private Double fBiallelic;

  public static final String SERIALIZED_NAME_F_CANCER_TYPE_COUNT = "fCancerTypeCount";
  @SerializedName(SERIALIZED_NAME_F_CANCER_TYPE_COUNT)
  private Double fCancerTypeCount;

  public static final String SERIALIZED_NAME_HRD_SCORE = "hrdScore";
  @SerializedName(SERIALIZED_NAME_HRD_SCORE)
  private HrdScore hrdScore;

  public static final String SERIALIZED_NAME_MSI_SCORE = "msiScore";
  @SerializedName(SERIALIZED_NAME_MSI_SCORE)
  private Double msiScore;

  public static final String SERIALIZED_NAME_N_CANCER_TYPE_COUNT = "nCancerTypeCount";
  @SerializedName(SERIALIZED_NAME_N_CANCER_TYPE_COUNT)
  private Integer nCancerTypeCount;

  public static final String SERIALIZED_NAME_NUMBER_OF_GERMLINE_HOMOZYGOUS = "numberOfGermlineHomozygous";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_GERMLINE_HOMOZYGOUS)
  private Integer numberOfGermlineHomozygous;

  public static final String SERIALIZED_NAME_NUMBER_WITH_SIG = "numberWithSig";
  @SerializedName(SERIALIZED_NAME_NUMBER_WITH_SIG)
  private Integer numberWithSig;

  public static final String SERIALIZED_NAME_TMB = "tmb";
  @SerializedName(SERIALIZED_NAME_TMB)
  private Double tmb;

  public static final String SERIALIZED_NAME_TUMOR_TYPE = "tumorType";
  @SerializedName(SERIALIZED_NAME_TUMOR_TYPE)
  private String tumorType;

  public StatsByTumorType() {
  }

  public StatsByTumorType ageAtDx(Integer ageAtDx) {
    this.ageAtDx = ageAtDx;
    return this;
  }

   /**
   * Median Age at Dx
   * @return ageAtDx
  **/
  @javax.annotation.Nullable
  public Integer getAgeAtDx() {
    return ageAtDx;
  }

  public void setAgeAtDx(Integer ageAtDx) {
    this.ageAtDx = ageAtDx;
  }


  public StatsByTumorType fBiallelic(Double fBiallelic) {
    this.fBiallelic = fBiallelic;
    return this;
  }

   /**
   * Frequency Of Biallelic
   * @return fBiallelic
  **/
  @javax.annotation.Nullable
  public Double getfBiallelic() {
    return fBiallelic;
  }

  public void setfBiallelic(Double fBiallelic) {
    this.fBiallelic = fBiallelic;
  }


  public StatsByTumorType fCancerTypeCount(Double fCancerTypeCount) {
    this.fCancerTypeCount = fCancerTypeCount;
    return this;
  }

   /**
   * Frequency Of Cancer Type Count
   * @return fCancerTypeCount
  **/
  @javax.annotation.Nullable
  public Double getfCancerTypeCount() {
    return fCancerTypeCount;
  }

  public void setfCancerTypeCount(Double fCancerTypeCount) {
    this.fCancerTypeCount = fCancerTypeCount;
  }


  public StatsByTumorType hrdScore(HrdScore hrdScore) {
    this.hrdScore = hrdScore;
    return this;
  }

   /**
   * Get hrdScore
   * @return hrdScore
  **/
  @javax.annotation.Nullable
  public HrdScore getHrdScore() {
    return hrdScore;
  }

  public void setHrdScore(HrdScore hrdScore) {
    this.hrdScore = hrdScore;
  }


  public StatsByTumorType msiScore(Double msiScore) {
    this.msiScore = msiScore;
    return this;
  }

   /**
   * Msi Score
   * @return msiScore
  **/
  @javax.annotation.Nullable
  public Double getMsiScore() {
    return msiScore;
  }

  public void setMsiScore(Double msiScore) {
    this.msiScore = msiScore;
  }


  public StatsByTumorType nCancerTypeCount(Integer nCancerTypeCount) {
    this.nCancerTypeCount = nCancerTypeCount;
    return this;
  }

   /**
   * Number Of Cancer Type Count
   * @return nCancerTypeCount
  **/
  @javax.annotation.Nullable
  public Integer getnCancerTypeCount() {
    return nCancerTypeCount;
  }

  public void setnCancerTypeCount(Integer nCancerTypeCount) {
    this.nCancerTypeCount = nCancerTypeCount;
  }


  public StatsByTumorType numberOfGermlineHomozygous(Integer numberOfGermlineHomozygous) {
    this.numberOfGermlineHomozygous = numberOfGermlineHomozygous;
    return this;
  }

   /**
   * Number Of Germline Homozygous Per Tumor Type
   * @return numberOfGermlineHomozygous
  **/
  @javax.annotation.Nullable
  public Integer getNumberOfGermlineHomozygous() {
    return numberOfGermlineHomozygous;
  }

  public void setNumberOfGermlineHomozygous(Integer numberOfGermlineHomozygous) {
    this.numberOfGermlineHomozygous = numberOfGermlineHomozygous;
  }


  public StatsByTumorType numberWithSig(Integer numberWithSig) {
    this.numberWithSig = numberWithSig;
    return this;
  }

   /**
   * Number of Variants with Signature
   * @return numberWithSig
  **/
  @javax.annotation.Nullable
  public Integer getNumberWithSig() {
    return numberWithSig;
  }

  public void setNumberWithSig(Integer numberWithSig) {
    this.numberWithSig = numberWithSig;
  }


  public StatsByTumorType tmb(Double tmb) {
    this.tmb = tmb;
    return this;
  }

   /**
   * Median TMB
   * @return tmb
  **/
  @javax.annotation.Nullable
  public Double getTmb() {
    return tmb;
  }

  public void setTmb(Double tmb) {
    this.tmb = tmb;
  }


  public StatsByTumorType tumorType(String tumorType) {
    this.tumorType = tumorType;
    return this;
  }

   /**
   * Tumor Type
   * @return tumorType
  **/
  @javax.annotation.Nullable
  public String getTumorType() {
    return tumorType;
  }

  public void setTumorType(String tumorType) {
    this.tumorType = tumorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatsByTumorType statsByTumorType = (StatsByTumorType) o;
    return Objects.equals(this.ageAtDx, statsByTumorType.ageAtDx) &&
        Objects.equals(this.fBiallelic, statsByTumorType.fBiallelic) &&
        Objects.equals(this.fCancerTypeCount, statsByTumorType.fCancerTypeCount) &&
        Objects.equals(this.hrdScore, statsByTumorType.hrdScore) &&
        Objects.equals(this.msiScore, statsByTumorType.msiScore) &&
        Objects.equals(this.nCancerTypeCount, statsByTumorType.nCancerTypeCount) &&
        Objects.equals(this.numberOfGermlineHomozygous, statsByTumorType.numberOfGermlineHomozygous) &&
        Objects.equals(this.numberWithSig, statsByTumorType.numberWithSig) &&
        Objects.equals(this.tmb, statsByTumorType.tmb) &&
        Objects.equals(this.tumorType, statsByTumorType.tumorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ageAtDx, fBiallelic, fCancerTypeCount, hrdScore, msiScore, nCancerTypeCount, numberOfGermlineHomozygous, numberWithSig, tmb, tumorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatsByTumorType {\n");
    sb.append("    ageAtDx: ").append(toIndentedString(ageAtDx)).append("\n");
    sb.append("    fBiallelic: ").append(toIndentedString(fBiallelic)).append("\n");
    sb.append("    fCancerTypeCount: ").append(toIndentedString(fCancerTypeCount)).append("\n");
    sb.append("    hrdScore: ").append(toIndentedString(hrdScore)).append("\n");
    sb.append("    msiScore: ").append(toIndentedString(msiScore)).append("\n");
    sb.append("    nCancerTypeCount: ").append(toIndentedString(nCancerTypeCount)).append("\n");
    sb.append("    numberOfGermlineHomozygous: ").append(toIndentedString(numberOfGermlineHomozygous)).append("\n");
    sb.append("    numberWithSig: ").append(toIndentedString(numberWithSig)).append("\n");
    sb.append("    tmb: ").append(toIndentedString(tmb)).append("\n");
    sb.append("    tumorType: ").append(toIndentedString(tumorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ageAtDx");
    openapiFields.add("fBiallelic");
    openapiFields.add("fCancerTypeCount");
    openapiFields.add("hrdScore");
    openapiFields.add("msiScore");
    openapiFields.add("nCancerTypeCount");
    openapiFields.add("numberOfGermlineHomozygous");
    openapiFields.add("numberWithSig");
    openapiFields.add("tmb");
    openapiFields.add("tumorType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StatsByTumorType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StatsByTumorType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StatsByTumorType is not found in the empty JSON string", StatsByTumorType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StatsByTumorType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StatsByTumorType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `hrdScore`
      if (jsonObj.get("hrdScore") != null && !jsonObj.get("hrdScore").isJsonNull()) {
        HrdScore.validateJsonElement(jsonObj.get("hrdScore"));
      }
      if ((jsonObj.get("tumorType") != null && !jsonObj.get("tumorType").isJsonNull()) && !jsonObj.get("tumorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tumorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tumorType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StatsByTumorType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StatsByTumorType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StatsByTumorType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StatsByTumorType.class));

       return (TypeAdapter<T>) new TypeAdapter<StatsByTumorType>() {
           @Override
           public void write(JsonWriter out, StatsByTumorType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StatsByTumorType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StatsByTumorType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StatsByTumorType
  * @throws IOException if the JSON string is invalid with respect to StatsByTumorType
  */
  public static StatsByTumorType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StatsByTumorType.class);
  }

 /**
  * Convert an instance of StatsByTumorType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

