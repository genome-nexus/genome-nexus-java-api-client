/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Hotspot
 */
public class HotspotTest {
    private final Hotspot model = new Hotspot();

    /**
     * Model tests for Hotspot
     */
    @Test
    public void testHotspot() {
        // TODO: test Hotspot
    }

    /**
     * Test the property 'hugoSymbol'
     */
    @Test
    public void hugoSymbolTest() {
        // TODO: test hugoSymbol
    }

    /**
     * Test the property 'inframeCount'
     */
    @Test
    public void inframeCountTest() {
        // TODO: test inframeCount
    }

    /**
     * Test the property 'missenseCount'
     */
    @Test
    public void missenseCountTest() {
        // TODO: test missenseCount
    }

    /**
     * Test the property 'residue'
     */
    @Test
    public void residueTest() {
        // TODO: test residue
    }

    /**
     * Test the property 'spliceCount'
     */
    @Test
    public void spliceCountTest() {
        // TODO: test spliceCount
    }

    /**
     * Test the property 'transcriptId'
     */
    @Test
    public void transcriptIdTest() {
        // TODO: test transcriptId
    }

    /**
     * Test the property 'truncatingCount'
     */
    @Test
    public void truncatingCountTest() {
        // TODO: test truncatingCount
    }

    /**
     * Test the property 'tumorCount'
     */
    @Test
    public void tumorCountTest() {
        // TODO: test tumorCount
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

}
