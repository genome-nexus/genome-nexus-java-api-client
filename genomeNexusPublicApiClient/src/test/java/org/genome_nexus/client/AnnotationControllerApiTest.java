/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiException;
import org.genome_nexus.client.GenomicLocation;
import org.genome_nexus.client.VariantAnnotation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnnotationControllerApi
 */
@Disabled
public class AnnotationControllerApiTest {

    private final AnnotationControllerApi api = new AnnotationControllerApi();

    /**
     * Retrieves VEP annotation for the provided genomic location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByGenomicLocationGETTest() throws ApiException {
        String genomicLocation = null;
        String isoformOverrideSource = null;
        String token = null;
        List<String> fields = null;
        VariantAnnotation response = api.fetchVariantAnnotationByGenomicLocationGET(genomicLocation, isoformOverrideSource, token, fields);
        // TODO: test validations
    }

    /**
     * Retrieves VEP annotation for the provided list of genomic locations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByGenomicLocationPOSTTest() throws ApiException {
        List<GenomicLocation> genomicLocations = null;
        String isoformOverrideSource = null;
        String token = null;
        List<String> fields = null;
        List<VariantAnnotation> response = api.fetchVariantAnnotationByGenomicLocationPOST(genomicLocations, isoformOverrideSource, token, fields);
        // TODO: test validations
    }

    /**
     * Retrieves VEP annotation for the give dbSNP id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByIdGETTest() throws ApiException {
        String variantId = null;
        String isoformOverrideSource = null;
        String token = null;
        List<String> fields = null;
        VariantAnnotation response = api.fetchVariantAnnotationByIdGET(variantId, isoformOverrideSource, token, fields);
        // TODO: test validations
    }

    /**
     * Retrieves VEP annotation for the provided list of dbSNP ids
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationByIdPOSTTest() throws ApiException {
        List<String> variantIds = null;
        String isoformOverrideSource = null;
        String token = null;
        List<String> fields = null;
        List<VariantAnnotation> response = api.fetchVariantAnnotationByIdPOST(variantIds, isoformOverrideSource, token, fields);
        // TODO: test validations
    }

    /**
     * Retrieves VEP annotation for the provided variant
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationGETTest() throws ApiException {
        String variant = null;
        String isoformOverrideSource = null;
        String token = null;
        List<String> fields = null;
        VariantAnnotation response = api.fetchVariantAnnotationGET(variant, isoformOverrideSource, token, fields);
        // TODO: test validations
    }

    /**
     * Retrieves VEP annotation for the provided list of variants
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchVariantAnnotationPOSTTest() throws ApiException {
        List<String> variants = null;
        String isoformOverrideSource = null;
        String token = null;
        List<String> fields = null;
        List<VariantAnnotation> response = api.fetchVariantAnnotationPOST(variants, isoformOverrideSource, token, fields);
        // TODO: test validations
    }

}
