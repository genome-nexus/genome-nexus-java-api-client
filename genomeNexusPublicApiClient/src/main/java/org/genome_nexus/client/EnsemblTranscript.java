/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.genome_nexus.client.Exon;
import org.genome_nexus.client.PfamDomainRange;
import org.genome_nexus.client.UntranslatedRegion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * EnsemblTranscript
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class EnsemblTranscript {
  public static final String SERIALIZED_NAME_UNIPROT_ID = "uniprotId";
  @SerializedName(SERIALIZED_NAME_UNIPROT_ID)
  private String uniprotId;

  public static final String SERIALIZED_NAME_TRANSCRIPT_ID = "transcriptId";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_ID)
  private String transcriptId;

  public static final String SERIALIZED_NAME_GENE_ID = "geneId";
  @SerializedName(SERIALIZED_NAME_GENE_ID)
  private String geneId;

  public static final String SERIALIZED_NAME_PROTEIN_ID = "proteinId";
  @SerializedName(SERIALIZED_NAME_PROTEIN_ID)
  private String proteinId;

  public static final String SERIALIZED_NAME_PROTEIN_LENGTH = "proteinLength";
  @SerializedName(SERIALIZED_NAME_PROTEIN_LENGTH)
  private Integer proteinLength;

  public static final String SERIALIZED_NAME_PFAM_DOMAINS = "pfamDomains";
  @SerializedName(SERIALIZED_NAME_PFAM_DOMAINS)
  private List<PfamDomainRange> pfamDomains;

  public static final String SERIALIZED_NAME_HUGO_SYMBOLS = "hugoSymbols";
  @SerializedName(SERIALIZED_NAME_HUGO_SYMBOLS)
  private List<String> hugoSymbols;

  public static final String SERIALIZED_NAME_REFSEQ_MRNA_ID = "refseqMrnaId";
  @SerializedName(SERIALIZED_NAME_REFSEQ_MRNA_ID)
  private String refseqMrnaId;

  public static final String SERIALIZED_NAME_CCDS_ID = "ccdsId";
  @SerializedName(SERIALIZED_NAME_CCDS_ID)
  private String ccdsId;

  public static final String SERIALIZED_NAME_EXONS = "exons";
  @SerializedName(SERIALIZED_NAME_EXONS)
  private List<Exon> exons;

  public static final String SERIALIZED_NAME_UTRS = "utrs";
  @SerializedName(SERIALIZED_NAME_UTRS)
  private List<UntranslatedRegion> utrs;

  public EnsemblTranscript() {
  }

  public EnsemblTranscript uniprotId(String uniprotId) {
    this.uniprotId = uniprotId;
    return this;
  }

   /**
   * Get uniprotId
   * @return uniprotId
  **/
  @javax.annotation.Nullable
  public String getUniprotId() {
    return uniprotId;
  }

  public void setUniprotId(String uniprotId) {
    this.uniprotId = uniprotId;
  }


  public EnsemblTranscript transcriptId(String transcriptId) {
    this.transcriptId = transcriptId;
    return this;
  }

   /**
   * Ensembl transcript id
   * @return transcriptId
  **/
  @javax.annotation.Nonnull
  public String getTranscriptId() {
    return transcriptId;
  }

  public void setTranscriptId(String transcriptId) {
    this.transcriptId = transcriptId;
  }


  public EnsemblTranscript geneId(String geneId) {
    this.geneId = geneId;
    return this;
  }

   /**
   * Ensembl gene id
   * @return geneId
  **/
  @javax.annotation.Nonnull
  public String getGeneId() {
    return geneId;
  }

  public void setGeneId(String geneId) {
    this.geneId = geneId;
  }


  public EnsemblTranscript proteinId(String proteinId) {
    this.proteinId = proteinId;
    return this;
  }

   /**
   * Ensembl protein id
   * @return proteinId
  **/
  @javax.annotation.Nonnull
  public String getProteinId() {
    return proteinId;
  }

  public void setProteinId(String proteinId) {
    this.proteinId = proteinId;
  }


  public EnsemblTranscript proteinLength(Integer proteinLength) {
    this.proteinLength = proteinLength;
    return this;
  }

   /**
   * Length of protein
   * @return proteinLength
  **/
  @javax.annotation.Nullable
  public Integer getProteinLength() {
    return proteinLength;
  }

  public void setProteinLength(Integer proteinLength) {
    this.proteinLength = proteinLength;
  }


  public EnsemblTranscript pfamDomains(List<PfamDomainRange> pfamDomains) {
    this.pfamDomains = pfamDomains;
    return this;
  }

  public EnsemblTranscript addPfamDomainsItem(PfamDomainRange pfamDomainsItem) {
    if (this.pfamDomains == null) {
      this.pfamDomains = new ArrayList<>();
    }
    this.pfamDomains.add(pfamDomainsItem);
    return this;
  }

   /**
   * Pfam domains
   * @return pfamDomains
  **/
  @javax.annotation.Nullable
  public List<PfamDomainRange> getPfamDomains() {
    return pfamDomains;
  }

  public void setPfamDomains(List<PfamDomainRange> pfamDomains) {
    this.pfamDomains = pfamDomains;
  }


  public EnsemblTranscript hugoSymbols(List<String> hugoSymbols) {
    this.hugoSymbols = hugoSymbols;
    return this;
  }

  public EnsemblTranscript addHugoSymbolsItem(String hugoSymbolsItem) {
    if (this.hugoSymbols == null) {
      this.hugoSymbols = new ArrayList<>();
    }
    this.hugoSymbols.add(hugoSymbolsItem);
    return this;
  }

   /**
   * Hugo symbols
   * @return hugoSymbols
  **/
  @javax.annotation.Nullable
  public List<String> getHugoSymbols() {
    return hugoSymbols;
  }

  public void setHugoSymbols(List<String> hugoSymbols) {
    this.hugoSymbols = hugoSymbols;
  }


  public EnsemblTranscript refseqMrnaId(String refseqMrnaId) {
    this.refseqMrnaId = refseqMrnaId;
    return this;
  }

   /**
   * RefSeq mRNA ID
   * @return refseqMrnaId
  **/
  @javax.annotation.Nullable
  public String getRefseqMrnaId() {
    return refseqMrnaId;
  }

  public void setRefseqMrnaId(String refseqMrnaId) {
    this.refseqMrnaId = refseqMrnaId;
  }


  public EnsemblTranscript ccdsId(String ccdsId) {
    this.ccdsId = ccdsId;
    return this;
  }

   /**
   * Consensus CDS (CCDS) ID
   * @return ccdsId
  **/
  @javax.annotation.Nullable
  public String getCcdsId() {
    return ccdsId;
  }

  public void setCcdsId(String ccdsId) {
    this.ccdsId = ccdsId;
  }


  public EnsemblTranscript exons(List<Exon> exons) {
    this.exons = exons;
    return this;
  }

  public EnsemblTranscript addExonsItem(Exon exonsItem) {
    if (this.exons == null) {
      this.exons = new ArrayList<>();
    }
    this.exons.add(exonsItem);
    return this;
  }

   /**
   * Exon information
   * @return exons
  **/
  @javax.annotation.Nullable
  public List<Exon> getExons() {
    return exons;
  }

  public void setExons(List<Exon> exons) {
    this.exons = exons;
  }


  public EnsemblTranscript utrs(List<UntranslatedRegion> utrs) {
    this.utrs = utrs;
    return this;
  }

  public EnsemblTranscript addUtrsItem(UntranslatedRegion utrsItem) {
    if (this.utrs == null) {
      this.utrs = new ArrayList<>();
    }
    this.utrs.add(utrsItem);
    return this;
  }

   /**
   * UTR information
   * @return utrs
  **/
  @javax.annotation.Nullable
  public List<UntranslatedRegion> getUtrs() {
    return utrs;
  }

  public void setUtrs(List<UntranslatedRegion> utrs) {
    this.utrs = utrs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnsemblTranscript ensemblTranscript = (EnsemblTranscript) o;
    return Objects.equals(this.uniprotId, ensemblTranscript.uniprotId) &&
        Objects.equals(this.transcriptId, ensemblTranscript.transcriptId) &&
        Objects.equals(this.geneId, ensemblTranscript.geneId) &&
        Objects.equals(this.proteinId, ensemblTranscript.proteinId) &&
        Objects.equals(this.proteinLength, ensemblTranscript.proteinLength) &&
        Objects.equals(this.pfamDomains, ensemblTranscript.pfamDomains) &&
        Objects.equals(this.hugoSymbols, ensemblTranscript.hugoSymbols) &&
        Objects.equals(this.refseqMrnaId, ensemblTranscript.refseqMrnaId) &&
        Objects.equals(this.ccdsId, ensemblTranscript.ccdsId) &&
        Objects.equals(this.exons, ensemblTranscript.exons) &&
        Objects.equals(this.utrs, ensemblTranscript.utrs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uniprotId, transcriptId, geneId, proteinId, proteinLength, pfamDomains, hugoSymbols, refseqMrnaId, ccdsId, exons, utrs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnsemblTranscript {\n");
    sb.append("    uniprotId: ").append(toIndentedString(uniprotId)).append("\n");
    sb.append("    transcriptId: ").append(toIndentedString(transcriptId)).append("\n");
    sb.append("    geneId: ").append(toIndentedString(geneId)).append("\n");
    sb.append("    proteinId: ").append(toIndentedString(proteinId)).append("\n");
    sb.append("    proteinLength: ").append(toIndentedString(proteinLength)).append("\n");
    sb.append("    pfamDomains: ").append(toIndentedString(pfamDomains)).append("\n");
    sb.append("    hugoSymbols: ").append(toIndentedString(hugoSymbols)).append("\n");
    sb.append("    refseqMrnaId: ").append(toIndentedString(refseqMrnaId)).append("\n");
    sb.append("    ccdsId: ").append(toIndentedString(ccdsId)).append("\n");
    sb.append("    exons: ").append(toIndentedString(exons)).append("\n");
    sb.append("    utrs: ").append(toIndentedString(utrs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("uniprotId");
    openapiFields.add("transcriptId");
    openapiFields.add("geneId");
    openapiFields.add("proteinId");
    openapiFields.add("proteinLength");
    openapiFields.add("pfamDomains");
    openapiFields.add("hugoSymbols");
    openapiFields.add("refseqMrnaId");
    openapiFields.add("ccdsId");
    openapiFields.add("exons");
    openapiFields.add("utrs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("transcriptId");
    openapiRequiredFields.add("geneId");
    openapiRequiredFields.add("proteinId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EnsemblTranscript
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnsemblTranscript.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnsemblTranscript is not found in the empty JSON string", EnsemblTranscript.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnsemblTranscript.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnsemblTranscript` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnsemblTranscript.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uniprotId") != null && !jsonObj.get("uniprotId").isJsonNull()) && !jsonObj.get("uniprotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniprotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniprotId").toString()));
      }
      if (!jsonObj.get("transcriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcriptId").toString()));
      }
      if (!jsonObj.get("geneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `geneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("geneId").toString()));
      }
      if (!jsonObj.get("proteinId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proteinId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proteinId").toString()));
      }
      if (jsonObj.get("pfamDomains") != null && !jsonObj.get("pfamDomains").isJsonNull()) {
        JsonArray jsonArraypfamDomains = jsonObj.getAsJsonArray("pfamDomains");
        if (jsonArraypfamDomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pfamDomains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pfamDomains` to be an array in the JSON string but got `%s`", jsonObj.get("pfamDomains").toString()));
          }

          // validate the optional field `pfamDomains` (array)
          for (int i = 0; i < jsonArraypfamDomains.size(); i++) {
            PfamDomainRange.validateJsonElement(jsonArraypfamDomains.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hugoSymbols") != null && !jsonObj.get("hugoSymbols").isJsonNull() && !jsonObj.get("hugoSymbols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoSymbols` to be an array in the JSON string but got `%s`", jsonObj.get("hugoSymbols").toString()));
      }
      if ((jsonObj.get("refseqMrnaId") != null && !jsonObj.get("refseqMrnaId").isJsonNull()) && !jsonObj.get("refseqMrnaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refseqMrnaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refseqMrnaId").toString()));
      }
      if ((jsonObj.get("ccdsId") != null && !jsonObj.get("ccdsId").isJsonNull()) && !jsonObj.get("ccdsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccdsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccdsId").toString()));
      }
      if (jsonObj.get("exons") != null && !jsonObj.get("exons").isJsonNull()) {
        JsonArray jsonArrayexons = jsonObj.getAsJsonArray("exons");
        if (jsonArrayexons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exons` to be an array in the JSON string but got `%s`", jsonObj.get("exons").toString()));
          }

          // validate the optional field `exons` (array)
          for (int i = 0; i < jsonArrayexons.size(); i++) {
            Exon.validateJsonElement(jsonArrayexons.get(i));
          };
        }
      }
      if (jsonObj.get("utrs") != null && !jsonObj.get("utrs").isJsonNull()) {
        JsonArray jsonArrayutrs = jsonObj.getAsJsonArray("utrs");
        if (jsonArrayutrs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("utrs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `utrs` to be an array in the JSON string but got `%s`", jsonObj.get("utrs").toString()));
          }

          // validate the optional field `utrs` (array)
          for (int i = 0; i < jsonArrayutrs.size(); i++) {
            UntranslatedRegion.validateJsonElement(jsonArrayutrs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnsemblTranscript.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnsemblTranscript' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnsemblTranscript> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnsemblTranscript.class));

       return (TypeAdapter<T>) new TypeAdapter<EnsemblTranscript>() {
           @Override
           public void write(JsonWriter out, EnsemblTranscript value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnsemblTranscript read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EnsemblTranscript given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EnsemblTranscript
  * @throws IOException if the JSON string is invalid with respect to EnsemblTranscript
  */
  public static EnsemblTranscript fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnsemblTranscript.class);
  }

 /**
  * Convert an instance of EnsemblTranscript to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

