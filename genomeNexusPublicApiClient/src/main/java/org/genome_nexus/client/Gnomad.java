/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.genome_nexus.client.AlleleCount;
import org.genome_nexus.client.AlleleFrequency;
import org.genome_nexus.client.AlleleNumber;
import org.genome_nexus.client.Homozygotes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Gnomad
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class Gnomad {
  public static final String SERIALIZED_NAME_ALLELE_COUNT = "alleleCount";
  @SerializedName(SERIALIZED_NAME_ALLELE_COUNT)
  private AlleleCount alleleCount;

  public static final String SERIALIZED_NAME_ALLELE_FREQUENCY = "alleleFrequency";
  @SerializedName(SERIALIZED_NAME_ALLELE_FREQUENCY)
  private AlleleFrequency alleleFrequency;

  public static final String SERIALIZED_NAME_ALLELE_NUMBER = "alleleNumber";
  @SerializedName(SERIALIZED_NAME_ALLELE_NUMBER)
  private AlleleNumber alleleNumber;

  public static final String SERIALIZED_NAME_HOMOZYGOTES = "homozygotes";
  @SerializedName(SERIALIZED_NAME_HOMOZYGOTES)
  private Homozygotes homozygotes;

  public Gnomad() {
  }

  public Gnomad alleleCount(AlleleCount alleleCount) {
    this.alleleCount = alleleCount;
    return this;
  }

   /**
   * Get alleleCount
   * @return alleleCount
  **/
  @javax.annotation.Nullable
  public AlleleCount getAlleleCount() {
    return alleleCount;
  }

  public void setAlleleCount(AlleleCount alleleCount) {
    this.alleleCount = alleleCount;
  }


  public Gnomad alleleFrequency(AlleleFrequency alleleFrequency) {
    this.alleleFrequency = alleleFrequency;
    return this;
  }

   /**
   * Get alleleFrequency
   * @return alleleFrequency
  **/
  @javax.annotation.Nullable
  public AlleleFrequency getAlleleFrequency() {
    return alleleFrequency;
  }

  public void setAlleleFrequency(AlleleFrequency alleleFrequency) {
    this.alleleFrequency = alleleFrequency;
  }


  public Gnomad alleleNumber(AlleleNumber alleleNumber) {
    this.alleleNumber = alleleNumber;
    return this;
  }

   /**
   * Get alleleNumber
   * @return alleleNumber
  **/
  @javax.annotation.Nullable
  public AlleleNumber getAlleleNumber() {
    return alleleNumber;
  }

  public void setAlleleNumber(AlleleNumber alleleNumber) {
    this.alleleNumber = alleleNumber;
  }


  public Gnomad homozygotes(Homozygotes homozygotes) {
    this.homozygotes = homozygotes;
    return this;
  }

   /**
   * Get homozygotes
   * @return homozygotes
  **/
  @javax.annotation.Nullable
  public Homozygotes getHomozygotes() {
    return homozygotes;
  }

  public void setHomozygotes(Homozygotes homozygotes) {
    this.homozygotes = homozygotes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Gnomad gnomad = (Gnomad) o;
    return Objects.equals(this.alleleCount, gnomad.alleleCount) &&
        Objects.equals(this.alleleFrequency, gnomad.alleleFrequency) &&
        Objects.equals(this.alleleNumber, gnomad.alleleNumber) &&
        Objects.equals(this.homozygotes, gnomad.homozygotes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alleleCount, alleleFrequency, alleleNumber, homozygotes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Gnomad {\n");
    sb.append("    alleleCount: ").append(toIndentedString(alleleCount)).append("\n");
    sb.append("    alleleFrequency: ").append(toIndentedString(alleleFrequency)).append("\n");
    sb.append("    alleleNumber: ").append(toIndentedString(alleleNumber)).append("\n");
    sb.append("    homozygotes: ").append(toIndentedString(homozygotes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alleleCount");
    openapiFields.add("alleleFrequency");
    openapiFields.add("alleleNumber");
    openapiFields.add("homozygotes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Gnomad
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Gnomad.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Gnomad is not found in the empty JSON string", Gnomad.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Gnomad.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Gnomad` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alleleCount`
      if (jsonObj.get("alleleCount") != null && !jsonObj.get("alleleCount").isJsonNull()) {
        AlleleCount.validateJsonElement(jsonObj.get("alleleCount"));
      }
      // validate the optional field `alleleFrequency`
      if (jsonObj.get("alleleFrequency") != null && !jsonObj.get("alleleFrequency").isJsonNull()) {
        AlleleFrequency.validateJsonElement(jsonObj.get("alleleFrequency"));
      }
      // validate the optional field `alleleNumber`
      if (jsonObj.get("alleleNumber") != null && !jsonObj.get("alleleNumber").isJsonNull()) {
        AlleleNumber.validateJsonElement(jsonObj.get("alleleNumber"));
      }
      // validate the optional field `homozygotes`
      if (jsonObj.get("homozygotes") != null && !jsonObj.get("homozygotes").isJsonNull()) {
        Homozygotes.validateJsonElement(jsonObj.get("homozygotes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Gnomad.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Gnomad' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Gnomad> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Gnomad.class));

       return (TypeAdapter<T>) new TypeAdapter<Gnomad>() {
           @Override
           public void write(JsonWriter out, Gnomad value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Gnomad read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Gnomad given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Gnomad
  * @throws IOException if the JSON string is invalid with respect to Gnomad
  */
  public static Gnomad fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Gnomad.class);
  }

 /**
  * Convert an instance of Gnomad to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

