/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Clinvar
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class Clinvar {
  public static final String SERIALIZED_NAME_ALTERNATE_ALLELE = "alternateAllele";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ALLELE)
  private String alternateAllele;

  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_CLINICAL_SIGNIFICANCE = "clinicalSignificance";
  @SerializedName(SERIALIZED_NAME_CLINICAL_SIGNIFICANCE)
  private String clinicalSignificance;

  public static final String SERIALIZED_NAME_CLINVAR_ID = "clinvarId";
  @SerializedName(SERIALIZED_NAME_CLINVAR_ID)
  private Integer clinvarId;

  public static final String SERIALIZED_NAME_CONFLICTING_CLINICAL_SIGNIFICANCE = "conflictingClinicalSignificance";
  @SerializedName(SERIALIZED_NAME_CONFLICTING_CLINICAL_SIGNIFICANCE)
  private String conflictingClinicalSignificance;

  public static final String SERIALIZED_NAME_END_POSITION = "endPosition";
  @SerializedName(SERIALIZED_NAME_END_POSITION)
  private Integer endPosition;

  public static final String SERIALIZED_NAME_REFERENCE_ALLELE = "referenceAllele";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ALLELE)
  private String referenceAllele;

  public static final String SERIALIZED_NAME_START_POSITION = "startPosition";
  @SerializedName(SERIALIZED_NAME_START_POSITION)
  private Integer startPosition;

  public Clinvar() {
  }

  public Clinvar alternateAllele(String alternateAllele) {
    this.alternateAllele = alternateAllele;
    return this;
  }

   /**
   * Get alternateAllele
   * @return alternateAllele
  **/
  @javax.annotation.Nullable
  public String getAlternateAllele() {
    return alternateAllele;
  }

  public void setAlternateAllele(String alternateAllele) {
    this.alternateAllele = alternateAllele;
  }


  public Clinvar chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

   /**
   * Get chromosome
   * @return chromosome
  **/
  @javax.annotation.Nullable
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public Clinvar clinicalSignificance(String clinicalSignificance) {
    this.clinicalSignificance = clinicalSignificance;
    return this;
  }

   /**
   * Get clinicalSignificance
   * @return clinicalSignificance
  **/
  @javax.annotation.Nullable
  public String getClinicalSignificance() {
    return clinicalSignificance;
  }

  public void setClinicalSignificance(String clinicalSignificance) {
    this.clinicalSignificance = clinicalSignificance;
  }


  public Clinvar clinvarId(Integer clinvarId) {
    this.clinvarId = clinvarId;
    return this;
  }

   /**
   * Get clinvarId
   * @return clinvarId
  **/
  @javax.annotation.Nullable
  public Integer getClinvarId() {
    return clinvarId;
  }

  public void setClinvarId(Integer clinvarId) {
    this.clinvarId = clinvarId;
  }


  public Clinvar conflictingClinicalSignificance(String conflictingClinicalSignificance) {
    this.conflictingClinicalSignificance = conflictingClinicalSignificance;
    return this;
  }

   /**
   * Get conflictingClinicalSignificance
   * @return conflictingClinicalSignificance
  **/
  @javax.annotation.Nullable
  public String getConflictingClinicalSignificance() {
    return conflictingClinicalSignificance;
  }

  public void setConflictingClinicalSignificance(String conflictingClinicalSignificance) {
    this.conflictingClinicalSignificance = conflictingClinicalSignificance;
  }


  public Clinvar endPosition(Integer endPosition) {
    this.endPosition = endPosition;
    return this;
  }

   /**
   * Get endPosition
   * @return endPosition
  **/
  @javax.annotation.Nullable
  public Integer getEndPosition() {
    return endPosition;
  }

  public void setEndPosition(Integer endPosition) {
    this.endPosition = endPosition;
  }


  public Clinvar referenceAllele(String referenceAllele) {
    this.referenceAllele = referenceAllele;
    return this;
  }

   /**
   * Get referenceAllele
   * @return referenceAllele
  **/
  @javax.annotation.Nullable
  public String getReferenceAllele() {
    return referenceAllele;
  }

  public void setReferenceAllele(String referenceAllele) {
    this.referenceAllele = referenceAllele;
  }


  public Clinvar startPosition(Integer startPosition) {
    this.startPosition = startPosition;
    return this;
  }

   /**
   * Get startPosition
   * @return startPosition
  **/
  @javax.annotation.Nullable
  public Integer getStartPosition() {
    return startPosition;
  }

  public void setStartPosition(Integer startPosition) {
    this.startPosition = startPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Clinvar clinvar = (Clinvar) o;
    return Objects.equals(this.alternateAllele, clinvar.alternateAllele) &&
        Objects.equals(this.chromosome, clinvar.chromosome) &&
        Objects.equals(this.clinicalSignificance, clinvar.clinicalSignificance) &&
        Objects.equals(this.clinvarId, clinvar.clinvarId) &&
        Objects.equals(this.conflictingClinicalSignificance, clinvar.conflictingClinicalSignificance) &&
        Objects.equals(this.endPosition, clinvar.endPosition) &&
        Objects.equals(this.referenceAllele, clinvar.referenceAllele) &&
        Objects.equals(this.startPosition, clinvar.startPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateAllele, chromosome, clinicalSignificance, clinvarId, conflictingClinicalSignificance, endPosition, referenceAllele, startPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Clinvar {\n");
    sb.append("    alternateAllele: ").append(toIndentedString(alternateAllele)).append("\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    clinicalSignificance: ").append(toIndentedString(clinicalSignificance)).append("\n");
    sb.append("    clinvarId: ").append(toIndentedString(clinvarId)).append("\n");
    sb.append("    conflictingClinicalSignificance: ").append(toIndentedString(conflictingClinicalSignificance)).append("\n");
    sb.append("    endPosition: ").append(toIndentedString(endPosition)).append("\n");
    sb.append("    referenceAllele: ").append(toIndentedString(referenceAllele)).append("\n");
    sb.append("    startPosition: ").append(toIndentedString(startPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateAllele");
    openapiFields.add("chromosome");
    openapiFields.add("clinicalSignificance");
    openapiFields.add("clinvarId");
    openapiFields.add("conflictingClinicalSignificance");
    openapiFields.add("endPosition");
    openapiFields.add("referenceAllele");
    openapiFields.add("startPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Clinvar
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Clinvar.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Clinvar is not found in the empty JSON string", Clinvar.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Clinvar.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Clinvar` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateAllele") != null && !jsonObj.get("alternateAllele").isJsonNull()) && !jsonObj.get("alternateAllele").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateAllele` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateAllele").toString()));
      }
      if ((jsonObj.get("chromosome") != null && !jsonObj.get("chromosome").isJsonNull()) && !jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      if ((jsonObj.get("clinicalSignificance") != null && !jsonObj.get("clinicalSignificance").isJsonNull()) && !jsonObj.get("clinicalSignificance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clinicalSignificance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clinicalSignificance").toString()));
      }
      if ((jsonObj.get("conflictingClinicalSignificance") != null && !jsonObj.get("conflictingClinicalSignificance").isJsonNull()) && !jsonObj.get("conflictingClinicalSignificance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflictingClinicalSignificance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflictingClinicalSignificance").toString()));
      }
      if ((jsonObj.get("referenceAllele") != null && !jsonObj.get("referenceAllele").isJsonNull()) && !jsonObj.get("referenceAllele").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceAllele` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceAllele").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Clinvar.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Clinvar' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Clinvar> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Clinvar.class));

       return (TypeAdapter<T>) new TypeAdapter<Clinvar>() {
           @Override
           public void write(JsonWriter out, Clinvar value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Clinvar read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Clinvar given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Clinvar
  * @throws IOException if the JSON string is invalid with respect to Clinvar
  */
  public static Clinvar fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Clinvar.class);
  }

 /**
  * Convert an instance of Clinvar to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

