/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * Hotspot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:02.948968527-05:00[America/New_York]")
public class Hotspot {
  public static final String SERIALIZED_NAME_HUGO_SYMBOL = "hugoSymbol";
  @SerializedName(SERIALIZED_NAME_HUGO_SYMBOL)
  private String hugoSymbol;

  public static final String SERIALIZED_NAME_INFRAME_COUNT = "inframeCount";
  @SerializedName(SERIALIZED_NAME_INFRAME_COUNT)
  private Integer inframeCount;

  public static final String SERIALIZED_NAME_MISSENSE_COUNT = "missenseCount";
  @SerializedName(SERIALIZED_NAME_MISSENSE_COUNT)
  private Integer missenseCount;

  public static final String SERIALIZED_NAME_RESIDUE = "residue";
  @SerializedName(SERIALIZED_NAME_RESIDUE)
  private String residue;

  public static final String SERIALIZED_NAME_SPLICE_COUNT = "spliceCount";
  @SerializedName(SERIALIZED_NAME_SPLICE_COUNT)
  private Integer spliceCount;

  public static final String SERIALIZED_NAME_TRANSCRIPT_ID = "transcriptId";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_ID)
  private String transcriptId;

  public static final String SERIALIZED_NAME_TRUNCATING_COUNT = "truncatingCount";
  @SerializedName(SERIALIZED_NAME_TRUNCATING_COUNT)
  private Integer truncatingCount;

  public static final String SERIALIZED_NAME_TUMOR_COUNT = "tumorCount";
  @SerializedName(SERIALIZED_NAME_TUMOR_COUNT)
  private Integer tumorCount;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Hotspot() {
  }

  public Hotspot hugoSymbol(String hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
    return this;
  }

   /**
   * Hugo gene symbol
   * @return hugoSymbol
  **/
  @javax.annotation.Nullable
  public String getHugoSymbol() {
    return hugoSymbol;
  }

  public void setHugoSymbol(String hugoSymbol) {
    this.hugoSymbol = hugoSymbol;
  }


  public Hotspot inframeCount(Integer inframeCount) {
    this.inframeCount = inframeCount;
    return this;
  }

   /**
   * Inframe mutation count
   * @return inframeCount
  **/
  @javax.annotation.Nullable
  public Integer getInframeCount() {
    return inframeCount;
  }

  public void setInframeCount(Integer inframeCount) {
    this.inframeCount = inframeCount;
  }


  public Hotspot missenseCount(Integer missenseCount) {
    this.missenseCount = missenseCount;
    return this;
  }

   /**
   * Missense mutation count
   * @return missenseCount
  **/
  @javax.annotation.Nullable
  public Integer getMissenseCount() {
    return missenseCount;
  }

  public void setMissenseCount(Integer missenseCount) {
    this.missenseCount = missenseCount;
  }


  public Hotspot residue(String residue) {
    this.residue = residue;
    return this;
  }

   /**
   * Hotspot residue
   * @return residue
  **/
  @javax.annotation.Nullable
  public String getResidue() {
    return residue;
  }

  public void setResidue(String residue) {
    this.residue = residue;
  }


  public Hotspot spliceCount(Integer spliceCount) {
    this.spliceCount = spliceCount;
    return this;
  }

   /**
   * Splice mutation count
   * @return spliceCount
  **/
  @javax.annotation.Nullable
  public Integer getSpliceCount() {
    return spliceCount;
  }

  public void setSpliceCount(Integer spliceCount) {
    this.spliceCount = spliceCount;
  }


  public Hotspot transcriptId(String transcriptId) {
    this.transcriptId = transcriptId;
    return this;
  }

   /**
   * Ensembl Transcript Id
   * @return transcriptId
  **/
  @javax.annotation.Nullable
  public String getTranscriptId() {
    return transcriptId;
  }

  public void setTranscriptId(String transcriptId) {
    this.transcriptId = transcriptId;
  }


  public Hotspot truncatingCount(Integer truncatingCount) {
    this.truncatingCount = truncatingCount;
    return this;
  }

   /**
   * Truncation mutation count
   * @return truncatingCount
  **/
  @javax.annotation.Nullable
  public Integer getTruncatingCount() {
    return truncatingCount;
  }

  public void setTruncatingCount(Integer truncatingCount) {
    this.truncatingCount = truncatingCount;
  }


  public Hotspot tumorCount(Integer tumorCount) {
    this.tumorCount = tumorCount;
    return this;
  }

   /**
   * Tumor count
   * @return tumorCount
  **/
  @javax.annotation.Nullable
  public Integer getTumorCount() {
    return tumorCount;
  }

  public void setTumorCount(Integer tumorCount) {
    this.tumorCount = tumorCount;
  }


  public Hotspot type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Hotspot type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hotspot hotspot = (Hotspot) o;
    return Objects.equals(this.hugoSymbol, hotspot.hugoSymbol) &&
        Objects.equals(this.inframeCount, hotspot.inframeCount) &&
        Objects.equals(this.missenseCount, hotspot.missenseCount) &&
        Objects.equals(this.residue, hotspot.residue) &&
        Objects.equals(this.spliceCount, hotspot.spliceCount) &&
        Objects.equals(this.transcriptId, hotspot.transcriptId) &&
        Objects.equals(this.truncatingCount, hotspot.truncatingCount) &&
        Objects.equals(this.tumorCount, hotspot.tumorCount) &&
        Objects.equals(this.type, hotspot.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hugoSymbol, inframeCount, missenseCount, residue, spliceCount, transcriptId, truncatingCount, tumorCount, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hotspot {\n");
    sb.append("    hugoSymbol: ").append(toIndentedString(hugoSymbol)).append("\n");
    sb.append("    inframeCount: ").append(toIndentedString(inframeCount)).append("\n");
    sb.append("    missenseCount: ").append(toIndentedString(missenseCount)).append("\n");
    sb.append("    residue: ").append(toIndentedString(residue)).append("\n");
    sb.append("    spliceCount: ").append(toIndentedString(spliceCount)).append("\n");
    sb.append("    transcriptId: ").append(toIndentedString(transcriptId)).append("\n");
    sb.append("    truncatingCount: ").append(toIndentedString(truncatingCount)).append("\n");
    sb.append("    tumorCount: ").append(toIndentedString(tumorCount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hugoSymbol");
    openapiFields.add("inframeCount");
    openapiFields.add("missenseCount");
    openapiFields.add("residue");
    openapiFields.add("spliceCount");
    openapiFields.add("transcriptId");
    openapiFields.add("truncatingCount");
    openapiFields.add("tumorCount");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Hotspot
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hotspot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hotspot is not found in the empty JSON string", Hotspot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hotspot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hotspot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hugoSymbol") != null && !jsonObj.get("hugoSymbol").isJsonNull()) && !jsonObj.get("hugoSymbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hugoSymbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hugoSymbol").toString()));
      }
      if ((jsonObj.get("residue") != null && !jsonObj.get("residue").isJsonNull()) && !jsonObj.get("residue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `residue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("residue").toString()));
      }
      if ((jsonObj.get("transcriptId") != null && !jsonObj.get("transcriptId").isJsonNull()) && !jsonObj.get("transcriptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcriptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcriptId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hotspot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hotspot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hotspot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hotspot.class));

       return (TypeAdapter<T>) new TypeAdapter<Hotspot>() {
           @Override
           public void write(JsonWriter out, Hotspot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hotspot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Hotspot given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Hotspot
  * @throws IOException if the JSON string is invalid with respect to Hotspot
  */
  public static Hotspot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hotspot.class);
  }

 /**
  * Convert an instance of Hotspot to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

