/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * GenomicLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class GenomicLocation {
  public static final String SERIALIZED_NAME_CHROMOSOME = "chromosome";
  @SerializedName(SERIALIZED_NAME_CHROMOSOME)
  private String chromosome;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private Integer start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private Integer end;

  public static final String SERIALIZED_NAME_REFERENCE_ALLELE = "referenceAllele";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ALLELE)
  private String referenceAllele;

  public static final String SERIALIZED_NAME_VARIANT_ALLELE = "variantAllele";
  @SerializedName(SERIALIZED_NAME_VARIANT_ALLELE)
  private String variantAllele;

  public GenomicLocation() {
  }

  public GenomicLocation chromosome(String chromosome) {
    this.chromosome = chromosome;
    return this;
  }

   /**
   * Chromosome
   * @return chromosome
  **/
  @javax.annotation.Nonnull
  public String getChromosome() {
    return chromosome;
  }

  public void setChromosome(String chromosome) {
    this.chromosome = chromosome;
  }


  public GenomicLocation start(Integer start) {
    this.start = start;
    return this;
  }

   /**
   * Start Position
   * @return start
  **/
  @javax.annotation.Nonnull
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }


  public GenomicLocation end(Integer end) {
    this.end = end;
    return this;
  }

   /**
   * End Position
   * @return end
  **/
  @javax.annotation.Nonnull
  public Integer getEnd() {
    return end;
  }

  public void setEnd(Integer end) {
    this.end = end;
  }


  public GenomicLocation referenceAllele(String referenceAllele) {
    this.referenceAllele = referenceAllele;
    return this;
  }

   /**
   * Reference Allele
   * @return referenceAllele
  **/
  @javax.annotation.Nonnull
  public String getReferenceAllele() {
    return referenceAllele;
  }

  public void setReferenceAllele(String referenceAllele) {
    this.referenceAllele = referenceAllele;
  }


  public GenomicLocation variantAllele(String variantAllele) {
    this.variantAllele = variantAllele;
    return this;
  }

   /**
   * Variant Allele
   * @return variantAllele
  **/
  @javax.annotation.Nonnull
  public String getVariantAllele() {
    return variantAllele;
  }

  public void setVariantAllele(String variantAllele) {
    this.variantAllele = variantAllele;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenomicLocation genomicLocation = (GenomicLocation) o;
    return Objects.equals(this.chromosome, genomicLocation.chromosome) &&
        Objects.equals(this.start, genomicLocation.start) &&
        Objects.equals(this.end, genomicLocation.end) &&
        Objects.equals(this.referenceAllele, genomicLocation.referenceAllele) &&
        Objects.equals(this.variantAllele, genomicLocation.variantAllele);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chromosome, start, end, referenceAllele, variantAllele);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenomicLocation {\n");
    sb.append("    chromosome: ").append(toIndentedString(chromosome)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    referenceAllele: ").append(toIndentedString(referenceAllele)).append("\n");
    sb.append("    variantAllele: ").append(toIndentedString(variantAllele)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chromosome");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("referenceAllele");
    openapiFields.add("variantAllele");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("chromosome");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("end");
    openapiRequiredFields.add("referenceAllele");
    openapiRequiredFields.add("variantAllele");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GenomicLocation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenomicLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenomicLocation is not found in the empty JSON string", GenomicLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenomicLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenomicLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenomicLocation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("chromosome").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chromosome` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chromosome").toString()));
      }
      if (!jsonObj.get("referenceAllele").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceAllele` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceAllele").toString()));
      }
      if (!jsonObj.get("variantAllele").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantAllele` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantAllele").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenomicLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenomicLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenomicLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenomicLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<GenomicLocation>() {
           @Override
           public void write(JsonWriter out, GenomicLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenomicLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenomicLocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenomicLocation
  * @throws IOException if the JSON string is invalid with respect to GenomicLocation
  */
  public static GenomicLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenomicLocation.class);
  }

 /**
  * Convert an instance of GenomicLocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

