/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.VariantAnnotationSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnnotationSummaryControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnnotationSummaryControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnnotationSummaryControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for fetchVariantAnnotationSummaryGET
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationSummaryGETCall(String variant, String isoformOverrideSource, String projection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/annotation/summary/{variant}"
            .replace("{" + "variant" + "}", localVarApiClient.escapeString(variant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (projection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projection", projection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationSummaryGETValidateBeforeCall(String variant, String isoformOverrideSource, String projection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variant' is set
        if (variant == null) {
            throw new ApiException("Missing the required parameter 'variant' when calling fetchVariantAnnotationSummaryGET(Async)");
        }

        return fetchVariantAnnotationSummaryGETCall(variant, isoformOverrideSource, projection, _callback);

    }

    /**
     * Retrieves VEP annotation summary for the provided variant
     * 
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @return VariantAnnotationSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VariantAnnotationSummary fetchVariantAnnotationSummaryGET(String variant, String isoformOverrideSource, String projection) throws ApiException {
        ApiResponse<VariantAnnotationSummary> localVarResp = fetchVariantAnnotationSummaryGETWithHttpInfo(variant, isoformOverrideSource, projection);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation summary for the provided variant
     * 
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @return ApiResponse&lt;VariantAnnotationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VariantAnnotationSummary> fetchVariantAnnotationSummaryGETWithHttpInfo(String variant, String isoformOverrideSource, String projection) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationSummaryGETValidateBeforeCall(variant, isoformOverrideSource, projection, null);
        Type localVarReturnType = new TypeToken<VariantAnnotationSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation summary for the provided variant (asynchronously)
     * 
     * @param variant Variant. For example 17:g.41242962_41242963insGA (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationSummaryGETAsync(String variant, String isoformOverrideSource, String projection, final ApiCallback<VariantAnnotationSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationSummaryGETValidateBeforeCall(variant, isoformOverrideSource, projection, _callback);
        Type localVarReturnType = new TypeToken<VariantAnnotationSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVariantAnnotationSummaryPOST
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationSummaryPOSTCall(List<String> variants, String isoformOverrideSource, String projection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = variants;

        // create path and map variables
        String localVarPath = "/annotation/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoformOverrideSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isoformOverrideSource", isoformOverrideSource));
        }

        if (projection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projection", projection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVariantAnnotationSummaryPOSTValidateBeforeCall(List<String> variants, String isoformOverrideSource, String projection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variants' is set
        if (variants == null) {
            throw new ApiException("Missing the required parameter 'variants' when calling fetchVariantAnnotationSummaryPOST(Async)");
        }

        return fetchVariantAnnotationSummaryPOSTCall(variants, isoformOverrideSource, projection, _callback);

    }

    /**
     * Retrieves VEP annotation summary for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @return List&lt;VariantAnnotationSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VariantAnnotationSummary> fetchVariantAnnotationSummaryPOST(List<String> variants, String isoformOverrideSource, String projection) throws ApiException {
        ApiResponse<List<VariantAnnotationSummary>> localVarResp = fetchVariantAnnotationSummaryPOSTWithHttpInfo(variants, isoformOverrideSource, projection);
        return localVarResp.getData();
    }

    /**
     * Retrieves VEP annotation summary for the provided list of variants
     * 
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @return ApiResponse&lt;List&lt;VariantAnnotationSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VariantAnnotationSummary>> fetchVariantAnnotationSummaryPOSTWithHttpInfo(List<String> variants, String isoformOverrideSource, String projection) throws ApiException {
        okhttp3.Call localVarCall = fetchVariantAnnotationSummaryPOSTValidateBeforeCall(variants, isoformOverrideSource, projection, null);
        Type localVarReturnType = new TypeToken<List<VariantAnnotationSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves VEP annotation summary for the provided list of variants (asynchronously)
     * 
     * @param variants List of variants. For example [\&quot;X:g.66937331T&gt;A\&quot;,\&quot;17:g.41242962_41242963insGA\&quot;] (GRCh37) or [\&quot;1:g.182712A&gt;C\&quot;, \&quot;2:g.265023C&gt;T\&quot;, \&quot;3:g.319781del\&quot;, \&quot;19:g.110753dup\&quot;, \&quot;1:g.1385015_1387562del\&quot;] (GRCh38) (required)
     * @param isoformOverrideSource Isoform override source. For example uniprot (optional)
     * @param projection Indicates whether to return summary for all transcripts or only for canonical transcript (optional, default to ALL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVariantAnnotationSummaryPOSTAsync(List<String> variants, String isoformOverrideSource, String projection, final ApiCallback<List<VariantAnnotationSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVariantAnnotationSummaryPOSTValidateBeforeCall(variants, isoformOverrideSource, projection, _callback);
        Type localVarReturnType = new TypeToken<List<VariantAnnotationSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
