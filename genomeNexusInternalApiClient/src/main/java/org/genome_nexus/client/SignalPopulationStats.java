/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.genome_nexus.JSON;

/**
 * SignalPopulationStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-12-26T11:53:07.493659809-05:00[America/New_York]")
public class SignalPopulationStats {
  public static final String SERIALIZED_NAME_AFR = "afr";
  @SerializedName(SERIALIZED_NAME_AFR)
  private Double afr;

  public static final String SERIALIZED_NAME_ASJ = "asj";
  @SerializedName(SERIALIZED_NAME_ASJ)
  private Double asj;

  public static final String SERIALIZED_NAME_ASN = "asn";
  @SerializedName(SERIALIZED_NAME_ASN)
  private Double asn;

  public static final String SERIALIZED_NAME_EUR = "eur";
  @SerializedName(SERIALIZED_NAME_EUR)
  private Double eur;

  public static final String SERIALIZED_NAME_IMPACT = "impact";
  @SerializedName(SERIALIZED_NAME_IMPACT)
  private Double impact;

  public static final String SERIALIZED_NAME_OTH = "oth";
  @SerializedName(SERIALIZED_NAME_OTH)
  private Double oth;

  public SignalPopulationStats() {
  }

  public SignalPopulationStats afr(Double afr) {
    this.afr = afr;
    return this;
  }

   /**
   * African/African American
   * @return afr
  **/
  @javax.annotation.Nullable
  public Double getAfr() {
    return afr;
  }

  public void setAfr(Double afr) {
    this.afr = afr;
  }


  public SignalPopulationStats asj(Double asj) {
    this.asj = asj;
    return this;
  }

   /**
   * Ashkenazi Jewish
   * @return asj
  **/
  @javax.annotation.Nullable
  public Double getAsj() {
    return asj;
  }

  public void setAsj(Double asj) {
    this.asj = asj;
  }


  public SignalPopulationStats asn(Double asn) {
    this.asn = asn;
    return this;
  }

   /**
   * Asian
   * @return asn
  **/
  @javax.annotation.Nullable
  public Double getAsn() {
    return asn;
  }

  public void setAsn(Double asn) {
    this.asn = asn;
  }


  public SignalPopulationStats eur(Double eur) {
    this.eur = eur;
    return this;
  }

   /**
   * European
   * @return eur
  **/
  @javax.annotation.Nullable
  public Double getEur() {
    return eur;
  }

  public void setEur(Double eur) {
    this.eur = eur;
  }


  public SignalPopulationStats impact(Double impact) {
    this.impact = impact;
    return this;
  }

   /**
   * Impact
   * @return impact
  **/
  @javax.annotation.Nullable
  public Double getImpact() {
    return impact;
  }

  public void setImpact(Double impact) {
    this.impact = impact;
  }


  public SignalPopulationStats oth(Double oth) {
    this.oth = oth;
    return this;
  }

   /**
   * Other
   * @return oth
  **/
  @javax.annotation.Nullable
  public Double getOth() {
    return oth;
  }

  public void setOth(Double oth) {
    this.oth = oth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignalPopulationStats signalPopulationStats = (SignalPopulationStats) o;
    return Objects.equals(this.afr, signalPopulationStats.afr) &&
        Objects.equals(this.asj, signalPopulationStats.asj) &&
        Objects.equals(this.asn, signalPopulationStats.asn) &&
        Objects.equals(this.eur, signalPopulationStats.eur) &&
        Objects.equals(this.impact, signalPopulationStats.impact) &&
        Objects.equals(this.oth, signalPopulationStats.oth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afr, asj, asn, eur, impact, oth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignalPopulationStats {\n");
    sb.append("    afr: ").append(toIndentedString(afr)).append("\n");
    sb.append("    asj: ").append(toIndentedString(asj)).append("\n");
    sb.append("    asn: ").append(toIndentedString(asn)).append("\n");
    sb.append("    eur: ").append(toIndentedString(eur)).append("\n");
    sb.append("    impact: ").append(toIndentedString(impact)).append("\n");
    sb.append("    oth: ").append(toIndentedString(oth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afr");
    openapiFields.add("asj");
    openapiFields.add("asn");
    openapiFields.add("eur");
    openapiFields.add("impact");
    openapiFields.add("oth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SignalPopulationStats
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignalPopulationStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignalPopulationStats is not found in the empty JSON string", SignalPopulationStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignalPopulationStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignalPopulationStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignalPopulationStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignalPopulationStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignalPopulationStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignalPopulationStats.class));

       return (TypeAdapter<T>) new TypeAdapter<SignalPopulationStats>() {
           @Override
           public void write(JsonWriter out, SignalPopulationStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignalPopulationStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SignalPopulationStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SignalPopulationStats
  * @throws IOException if the JSON string is invalid with respect to SignalPopulationStats
  */
  public static SignalPopulationStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignalPopulationStats.class);
  }

 /**
  * Convert an instance of SignalPopulationStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

